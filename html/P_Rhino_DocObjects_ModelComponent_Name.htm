<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ModelComponent.Name Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Name property" /><meta name="System.Keywords" content="ModelComponent.Name property" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.ModelComponent.Name" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.ModelComponent.get_Name" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.ModelComponent.set_Name" /><meta name="Microsoft.Help.Id" content="P:Rhino.DocObjects.ModelComponent.Name" /><meta name="Description" content="Gets or sets the name" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.DocObjects" /><meta name="file" content="P_Rhino_DocObjects_ModelComponent_Name" /><meta name="guid" content="P_Rhino_DocObjects_ModelComponent_Name" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_DocObjects.htm" title="Rhino.DocObjects" tocid="N_Rhino_DocObjects">Rhino.DocObjects</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_DocObjects_ModelComponent.htm" title="ModelComponent Class" tocid="T_Rhino_DocObjects_ModelComponent">ModelComponent Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_Rhino_DocObjects_ModelComponent.htm" title="ModelComponent Properties" tocid="Properties_T_Rhino_DocObjects_ModelComponent">ModelComponent Properties</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_ComponentStatus.htm" title="ComponentStatus Property " tocid="P_Rhino_DocObjects_ModelComponent_ComponentStatus">ComponentStatus Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_ComponentType.htm" title="ComponentType Property " tocid="P_Rhino_DocObjects_ModelComponent_ComponentType">ComponentType Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_DeletedName.htm" title="DeletedName Property " tocid="P_Rhino_DocObjects_ModelComponent_DeletedName">DeletedName Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_HasId.htm" title="HasId Property " tocid="P_Rhino_DocObjects_ModelComponent_HasId">HasId Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_HasIndex.htm" title="HasIndex Property " tocid="P_Rhino_DocObjects_ModelComponent_HasIndex">HasIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_HasName.htm" title="HasName Property " tocid="P_Rhino_DocObjects_ModelComponent_HasName">HasName Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_Id.htm" title="Id Property " tocid="P_Rhino_DocObjects_ModelComponent_Id">Id Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_IdIsLocked.htm" title="IdIsLocked Property " tocid="P_Rhino_DocObjects_ModelComponent_IdIsLocked">IdIsLocked Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_Index.htm" title="Index Property " tocid="P_Rhino_DocObjects_ModelComponent_Index">Index Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_IndexIsLocked.htm" title="IndexIsLocked Property " tocid="P_Rhino_DocObjects_ModelComponent_IndexIsLocked">IndexIsLocked Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_InstanceDefinitionModelSerialNumber.htm" title="InstanceDefinitionModelSerialNumber Property " tocid="P_Rhino_DocObjects_ModelComponent_InstanceDefinitionModelSerialNumber">InstanceDefinitionModelSerialNumber Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_IsComponentStatusLocked.htm" title="IsComponentStatusLocked Property " tocid="P_Rhino_DocObjects_ModelComponent_IsComponentStatusLocked">IsComponentStatusLocked Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_IsSystemComponent.htm" title="IsSystemComponent Property " tocid="P_Rhino_DocObjects_ModelComponent_IsSystemComponent">IsSystemComponent Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_ModelSerialNumber.htm" title="ModelSerialNumber Property " tocid="P_Rhino_DocObjects_ModelComponent_ModelSerialNumber">ModelSerialNumber Property </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_Name.htm" title="Name Property " tocid="P_Rhino_DocObjects_ModelComponent_Name">Name Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_NameIsLocked.htm" title="NameIsLocked Property " tocid="P_Rhino_DocObjects_ModelComponent_NameIsLocked">NameIsLocked Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_ModelComponent_ReferenceModelSerialNumber.htm" title="ReferenceModelSerialNumber Property " tocid="P_Rhino_DocObjects_ModelComponent_ReferenceModelSerialNumber">ReferenceModelSerialNumber Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>ModelComponent<span id="LST5E9FBAA8_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5E9FBAA8_0?cpp=::|nu=.");</script>Name Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Gets or sets the name
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_DocObjects.htm">Rhino.DocObjects</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 6.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="identifier">string</span> <span class="identifier">Name</span> { <span class="keyword">get</span>; <span class="keyword">set</span>; }</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Overridable</span> <span class="keyword">Property</span> <span class="identifier">Name</span> <span class="keyword">As</span> <span class="identifier">String</span>
	<span class="keyword">Get</span>
	<span class="keyword">Set</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.string" target="_blank">String</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.invalidoperationexception" target="_blank">InvalidOperationException</a></td><td>
            When setting the Name failed.
            This usually happens because the instance Name is already locked.
            </td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result HatchCurve(Rhino.RhinoDoc doc)
  {
    <span class="highlight-keyword">var</span> go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    go.SetCommandPrompt(<span class="highlight-literal">"Select closed planar curve"</span>);
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;
    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve;
    go.SubObjectSelect = <span class="highlight-keyword">false</span>;
    go.Get();
    <span class="highlight-keyword">if</span>( go.CommandResult() != Rhino.Commands.Result.Success )
      <span class="highlight-keyword">return</span> go.CommandResult();

    <span class="highlight-keyword">var</span> curve = go.Object(<span class="highlight-number">0</span>).Curve();
    <span class="highlight-keyword">if</span>( curve==<span class="highlight-keyword">null</span> || !curve.IsClosed || !curve.IsPlanar() )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    <span class="highlight-keyword">string</span> hatch_name = doc.HatchPatterns[doc.HatchPatterns.CurrentHatchPatternIndex].Name;
    <span class="highlight-keyword">var</span> rc = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Hatch pattern"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> hatch_name);
    <span class="highlight-keyword">if</span>( rc!= Rhino.Commands.Result.Success )
      <span class="highlight-keyword">return</span> rc;
    hatch_name = hatch_name.Trim();
    <span class="highlight-keyword">if</span>( <span class="highlight-keyword">string</span>.IsNullOrWhiteSpace(hatch_name) )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    <span class="highlight-keyword">int</span> index = doc.HatchPatterns.Find(hatch_name, <span class="highlight-keyword">true</span>);
    <span class="highlight-keyword">if</span>( index &lt; <span class="highlight-number">0</span> )
    {
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Hatch pattern does not exist."</span>);
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    }

    <span class="highlight-keyword">var</span> hatches = Rhino.Geometry.Hatch.Create( curve, index, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>);
    <span class="highlight-keyword">for</span>( <span class="highlight-keyword">int</span> i=<span class="highlight-number">0</span>; i&lt;hatches.Length; i++ )
      doc.Objects.AddHatch(hatches[i]);
    <span class="highlight-keyword">if</span>( hatches.Length&gt;<span class="highlight-number">0</span> )
      doc.Views.Redraw();
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> HatchCurve(doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> go = <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select closed planar curve"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GeometryAttributeFilter = Rhino.Input.[Custom].GeometryAttributeFilter.ClosedCurve
    go.SubObjectSelect = <span class="highlight-keyword">False</span>
    go.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> curve = go.<span class="highlight-keyword">Object</span>(<span class="highlight-number">0</span>).Curve()
    <span class="highlight-keyword">If</span> curve <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> <span class="highlight-keyword">Not</span> curve.IsClosed <span class="highlight-keyword">OrElse</span> <span class="highlight-keyword">Not</span> curve.IsPlanar() <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> hatch_name <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = doc.HatchPatterns(doc.HatchPatterns.CurrentHatchPatternIndex).Name
    <span class="highlight-keyword">Dim</span> rc = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Hatch pattern"</span>, <span class="highlight-keyword">True</span>, hatch_name)
    <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> rc
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    hatch_name = hatch_name.Trim()
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">String</span>.IsNullOrWhiteSpace(hatch_name) <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.<span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Dim</span> index <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = doc.HatchPatterns.Find(hatch_name, <span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">If</span> index &lt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Hatch pattern does not exist."</span>)
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.<span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> hatches = Rhino.Geometry.Hatch.Create(curve, index, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>)
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> hatches.Length - <span class="highlight-number">1</span>
      doc.Objects.AddHatch(hatches(i))
    <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">If</span> hatches.Length &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
      doc.Views.Redraw()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> HatchCurve():
    go = Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select closed planar curve"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve
    go.SubObjectSelect = False
    go.Get()
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success: <span class="highlight-keyword">return</span>

    curve = go.Object(<span class="highlight-number">0</span>).Curve()
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">not</span> curve <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> curve.IsClosed <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> curve.IsPlanar()): <span class="highlight-keyword">return</span>

    hatch_name = scriptcontext.doc.HatchPatterns[scriptcontext.doc.HatchPatterns.CurrentHatchPatternIndex].Name
    rc, hatch_name = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Hatch pattern"</span>, True, hatch_name)
    <span class="highlight-keyword">if</span> rc!=Rhino.Commands.Result.Success <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> hatch_name: <span class="highlight-keyword">return</span>

    index = scriptcontext.doc.HatchPatterns.Find(hatch_name, True)
    <span class="highlight-keyword">if</span> index&lt;<span class="highlight-number">0</span>:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"Hatch pattern does not exist."</span>
        <span class="highlight-keyword">return</span>

    hatches = Rhino.Geometry.Hatch.Create(curve, index, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>)
    <span class="highlight-keyword">for</span> hatch <span class="highlight-keyword">in</span> hatches:
        scriptcontext.doc.Objects.AddHatch(hatch)
    <span class="highlight-keyword">if</span> hatches: scriptcontext.doc.Views.Redraw()

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    HatchCurve()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_DocObjects_ModelComponent.htm">ModelComponent Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_DocObjects.htm">Rhino.DocObjects Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>