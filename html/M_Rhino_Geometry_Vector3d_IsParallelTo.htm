<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Vector3d.IsParallelTo Method (Vector3d)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Vector3d.IsParallelTo(Rhino.Geometry.Vector3d)" /><meta name="Description" content="Determines whether this vector is parallel to another vector, within one degree (within Pi / 180)." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_Vector3d_IsParallelTo" /><meta name="guid" content="M_Rhino_Geometry_Vector3d_IsParallelTo" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_Vector3d.htm" title="Vector3d Structure" tocid="T_Rhino_Geometry_Vector3d">Vector3d Structure</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_Vector3d.htm" title="Vector3d Methods" tocid="Methods_T_Rhino_Geometry_Vector3d">Vector3d Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_Vector3d_IsParallelTo.htm" title="IsParallelTo Method " tocid="Overload_Rhino_Geometry_Vector3d_IsParallelTo">IsParallelTo Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Vector3d_IsParallelTo.htm" title="IsParallelTo Method (Vector3d)" tocid="M_Rhino_Geometry_Vector3d_IsParallelTo">IsParallelTo Method (Vector3d)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Vector3d_IsParallelTo_1.htm" title="IsParallelTo Method (Vector3d, Double)" tocid="M_Rhino_Geometry_Vector3d_IsParallelTo_1">IsParallelTo Method (Vector3d, Double)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Vector3d<span id="LST9B2D49C5_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST9B2D49C5_0?cpp=::|nu=.");</script>IsParallelTo Method (Vector3d)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Determines whether this vector is parallel to another vector, within one degree (within Pi / 180). 
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">int</span> <span class="identifier">IsParallelTo</span>(
	<span class="identifier">Vector3d</span> <span class="parameter">other</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">IsParallelTo</span> ( 
	<span class="parameter">other</span> <span class="keyword">As</span> <span class="identifier">Vector3d</span>
) <span class="keyword">As</span> <span class="identifier">Integer</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">other</span></dt><dd>Type: <a href="T_Rhino_Geometry_Vector3d.htm">Rhino.Geometry<span id="LST9B2D49C5_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST9B2D49C5_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Vector3d</a><br />Vector to use for comparison.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">Int32</a><br />
            Parallel indicator:
            <p>+1 = both vectors are parallel</p><p> 0 = vectors are not parallel, or at least one of the vectors is zero</p><p>-1 = vectors are anti-parallel.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino.Geometry;

<span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result IntersectLines(Rhino.RhinoDoc doc)
  {
    Rhino.Input.Custom.GetObject go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    go.SetCommandPrompt( <span class="highlight-literal">"Select lines"</span> );
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;
    go.GetMultiple( <span class="highlight-number">2</span>, <span class="highlight-number">2</span>);
    <span class="highlight-keyword">if</span>( go.CommandResult() != Rhino.Commands.Result.Success )
      <span class="highlight-keyword">return</span> go.CommandResult();
    <span class="highlight-keyword">if</span>( go.ObjectCount != <span class="highlight-number">2</span> )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    LineCurve crv0 = go.Object(<span class="highlight-number">0</span>).Geometry() <span class="highlight-keyword">as</span> LineCurve;
    LineCurve crv1 = go.Object(<span class="highlight-number">1</span>).Geometry() <span class="highlight-keyword">as</span> LineCurve;
    <span class="highlight-keyword">if</span>( crv0==<span class="highlight-keyword">null</span> || crv1==<span class="highlight-keyword">null</span> )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    Line line0 = crv0.Line;
    Line line1 = crv1.Line;
    Vector3d v0 = line0.Direction;
    v0.Unitize();
    Vector3d v1 = line1.Direction;
    v1.Unitize();

    <span class="highlight-keyword">if</span>( v0.IsParallelTo(v1) != <span class="highlight-number">0</span> )
    {
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Selected lines are parallel."</span>);
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    }

    <span class="highlight-keyword">double</span> a, b;
    <span class="highlight-keyword">if</span>( !Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1, <span class="highlight-keyword">out</span> a, <span class="highlight-keyword">out</span> b))
    {
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"No intersection found."</span>);
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    }

    Point3d pt0 = line0.PointAt(a);
    Point3d pt1 = line1.PointAt(b);
    <span class="highlight-comment">// pt0 and pt1 should be equal, so we will only add pt0 to the document</span>
    doc.Objects.AddPoint( pt0 );
    doc.Views.Redraw();
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino.Geometry

<span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> IntersectLines(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> go <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select lines"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GetMultiple(<span class="highlight-number">2</span>, <span class="highlight-number">2</span>)
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">If</span> go.ObjectCount &lt;&gt; <span class="highlight-number">2</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> crv0 <span class="highlight-keyword">As</span> LineCurve = <span class="highlight-keyword">TryCast</span>(go.<span class="highlight-keyword">Object</span>(<span class="highlight-number">0</span>).Geometry(), LineCurve)
    <span class="highlight-keyword">Dim</span> crv1 <span class="highlight-keyword">As</span> LineCurve = <span class="highlight-keyword">TryCast</span>(go.<span class="highlight-keyword">Object</span>(<span class="highlight-number">1</span>).Geometry(), LineCurve)
    <span class="highlight-keyword">If</span> crv0 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> crv1 <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> line0 <span class="highlight-keyword">As</span> Line = crv0.Line
    <span class="highlight-keyword">Dim</span> line1 <span class="highlight-keyword">As</span> Line = crv1.Line
    <span class="highlight-keyword">Dim</span> v0 <span class="highlight-keyword">As</span> Vector3d = line0.Direction
    v0.Unitize()
    <span class="highlight-keyword">Dim</span> v1 <span class="highlight-keyword">As</span> Vector3d = line1.Direction
    v1.Unitize()

    <span class="highlight-keyword">If</span> v0.IsParallelTo(v1) &lt;&gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Selected lines are parallel."</span>)
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.[<span class="highlight-keyword">Nothing</span>]
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> a <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>, b <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1, a, b) <span class="highlight-keyword">Then</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"No intersection found."</span>)
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.[<span class="highlight-keyword">Nothing</span>]
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> pt0 <span class="highlight-keyword">As</span> Point3d = line0.PointAt(a)
    <span class="highlight-keyword">Dim</span> pt1 <span class="highlight-keyword">As</span> Point3d = line1.PointAt(b)
    <span class="highlight-comment">' pt0 and pt1 should be equal, so we will only add pt0 to the document</span>
    doc.Objects.AddPoint(pt0)
    doc.Views.Redraw()
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> IntersectLines():
    go = Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt( <span class="highlight-literal">"Select lines"</span> )
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GetMultiple( <span class="highlight-number">2</span>, <span class="highlight-number">2</span>)
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success:
      <span class="highlight-keyword">return</span> go.CommandResult()
    <span class="highlight-keyword">if</span> go.ObjectCount!=<span class="highlight-number">2</span>: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    crv0 = go.Object(<span class="highlight-number">0</span>).Geometry()
    crv1 = go.Object(<span class="highlight-number">1</span>).Geometry()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> crv0 <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> crv1: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    line0 = crv0.Line
    line1 = crv1.Line
    v0 = line0.Direction
    v0.Unitize()
    v1 = line1.Direction
    v1.Unitize()

    <span class="highlight-keyword">if</span> v0.IsParallelTo(v1)!=<span class="highlight-number">0</span>:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"Selected lines are parallel."</span>
        <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing

    rc, a, b = Rhino.Geometry.Intersect.Intersection.LineLine(line0, line1)
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> rc:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"No intersection found."</span>
        <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing

    pt0 = line0.PointAt(a)
    pt1 = line1.PointAt(b)
    <span class="highlight-comment"># pt0 and pt1 should be equal, so we will only add pt0 to the document</span>
    scriptcontext.doc.Objects.AddPoint(pt0)
    scriptcontext.doc.Views.Redraw()
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    IntersectLines()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Vector3d.htm">Vector3d Structure</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Geometry_Vector3d_IsParallelTo.htm">IsParallelTo Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>