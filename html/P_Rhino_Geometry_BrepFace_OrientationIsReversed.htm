<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>BrepFace.OrientationIsReversed Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="OrientationIsReversed property" /><meta name="System.Keywords" content="BrepFace.OrientationIsReversed property" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.BrepFace.OrientationIsReversed" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.BrepFace.get_OrientationIsReversed" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.BrepFace.set_OrientationIsReversed" /><meta name="Microsoft.Help.Id" content="P:Rhino.Geometry.BrepFace.OrientationIsReversed" /><meta name="Description" content="true if face orientation is opposite of natural surface orientation." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="P_Rhino_Geometry_BrepFace_OrientationIsReversed" /><meta name="guid" content="P_Rhino_Geometry_BrepFace_OrientationIsReversed" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_BrepFace.htm" title="BrepFace Class" tocid="T_Rhino_Geometry_BrepFace">BrepFace Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_Rhino_Geometry_BrepFace.htm" title="BrepFace Properties" tocid="Properties_T_Rhino_Geometry_BrepFace">BrepFace Properties</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_Brep.htm" title="Brep Property " tocid="P_Rhino_Geometry_BrepFace_Brep">Brep Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_FaceIndex.htm" title="FaceIndex Property " tocid="P_Rhino_Geometry_BrepFace_FaceIndex">FaceIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_Id.htm" title="Id Property " tocid="P_Rhino_Geometry_BrepFace_Id">Id Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_IsSurface.htm" title="IsSurface Property " tocid="P_Rhino_Geometry_BrepFace_IsSurface">IsSurface Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_Loops.htm" title="Loops Property " tocid="P_Rhino_Geometry_BrepFace_Loops">Loops Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_MaterialChannelIndex.htm" title="MaterialChannelIndex Property " tocid="P_Rhino_Geometry_BrepFace_MaterialChannelIndex">MaterialChannelIndex Property </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_OrientationIsReversed.htm" title="OrientationIsReversed Property " tocid="P_Rhino_Geometry_BrepFace_OrientationIsReversed">OrientationIsReversed Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_OuterLoop.htm" title="OuterLoop Property " tocid="P_Rhino_Geometry_BrepFace_OuterLoop">OuterLoop Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_PerFaceColor.htm" title="PerFaceColor Property " tocid="P_Rhino_Geometry_BrepFace_PerFaceColor">PerFaceColor Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_BrepFace_SurfaceIndex.htm" title="SurfaceIndex Property " tocid="P_Rhino_Geometry_BrepFace_SurfaceIndex">SurfaceIndex Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>BrepFace<span id="LST8E262CB_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8E262CB_0?cpp=::|nu=.");</script>OrientationIsReversed Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            true if face orientation is opposite of natural surface orientation.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">bool</span> <span class="identifier">OrientationIsReversed</span> { <span class="keyword">get</span>; <span class="keyword">set</span>; }</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="identifier">OrientationIsReversed</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>
	<span class="keyword">Get</span>
	<span class="keyword">Set</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank">Boolean</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Input.Custom;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Commands;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> NormalDirectionOfBrepFaceCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csDetermineNormalDirectionOfBrepFace"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-comment">// select a surface</span>
      <span class="highlight-keyword">var</span> gs = <span class="highlight-keyword">new</span> GetObject();
      gs.SetCommandPrompt(<span class="highlight-literal">"select surface"</span>);
      gs.GeometryFilter = ObjectType.Surface;
      gs.DisablePreSelect();
      gs.SubObjectSelect = <span class="highlight-keyword">false</span>;
      gs.Get();
      <span class="highlight-keyword">if</span> (gs.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gs.CommandResult();
      <span class="highlight-comment">// get the selected face</span>
      <span class="highlight-keyword">var</span> face = gs.Object(<span class="highlight-number">0</span>).Face();
      <span class="highlight-keyword">if</span> (face == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-comment">// pick a point on the surface.  Constain</span>
      <span class="highlight-comment">// picking to the face.</span>
      <span class="highlight-keyword">var</span> gp = <span class="highlight-keyword">new</span> GetPoint();
      gp.SetCommandPrompt(<span class="highlight-literal">"select point on surface"</span>);
      gp.Constrain(face, <span class="highlight-keyword">false</span>);
      gp.Get();
      <span class="highlight-keyword">if</span> (gp.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gp.CommandResult();

      <span class="highlight-comment">// get the parameters of the point on the</span>
      <span class="highlight-comment">// surface that is clesest to gp.Point()</span>
      <span class="highlight-keyword">double</span> u, v;
      <span class="highlight-keyword">if</span> (face.ClosestPoint(gp.Point(), <span class="highlight-keyword">out</span> u, <span class="highlight-keyword">out</span> v))
      {
        <span class="highlight-keyword">var</span> direction = face.NormalAt(u, v);
        <span class="highlight-keyword">if</span> (face.OrientationIsReversed)
          direction.Reverse();
        RhinoApp.WriteLine(
          <span class="highlight-keyword">string</span>.Format(
            <span class="highlight-literal">"Surface normal at uv({0:f},{1:f}) = ({2:f},{3:f},{4:f})"</span>, 
            u, v, direction.X, direction.Y, direction.Z));
      }
      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Input.Custom
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.Commands

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> NormalDirectionOfBrepFaceCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbDetermineNormDirectionOfBrepFace"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-comment">' select a surface</span>
      <span class="highlight-keyword">Dim</span> gs = <span class="highlight-keyword">New</span> GetObject()
      gs.SetCommandPrompt(<span class="highlight-literal">"select surface"</span>)
      gs.GeometryFilter = ObjectType.Surface
      gs.DisablePreSelect()
      gs.SubObjectSelect = <span class="highlight-keyword">False</span>
      gs.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gs.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gs.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-comment">' get the selected face</span>
      <span class="highlight-keyword">Dim</span> face = gs.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>).Face()
      <span class="highlight-keyword">If</span> face <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">' pick a point on the surface.  Constain</span>
      <span class="highlight-comment">' picking to the face.</span>
      <span class="highlight-keyword">Dim</span> gp = <span class="highlight-keyword">New</span> GetPoint()
      gp.SetCommandPrompt(<span class="highlight-literal">"select point on surface"</span>)
      gp.Constrain(face, <span class="highlight-keyword">False</span>)
      gp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">' get the parameters of the point on the</span>
      <span class="highlight-comment">' surface that is clesest to gp.Point()</span>
      <span class="highlight-keyword">Dim</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>, v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">If</span> face.ClosestPoint(gp.Point(), u, v) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> direction = face.NormalAt(u, v)
        <span class="highlight-keyword">If</span> face.OrientationIsReversed <span class="highlight-keyword">Then</span>
          direction.Reverse()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        RhinoApp.WriteLine(<span class="highlight-keyword">String</span>.Format(<span class="highlight-literal">"Surface normal at uv({0:f},{1:f}) = ({2:f},{3:f},{4:f})"</span>, u, v, direction.X, direction.Y, direction.Z))
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">from</span> Rhino.Commands <span class="highlight-keyword">import</span> Result

<span class="highlight-keyword">def</span> RunCommand():
  <span class="highlight-comment"># select a surface</span>
  gs = Rhino.Input.Custom.GetObject()
  gs.SetCommandPrompt(<span class="highlight-literal">"select surface"</span>)
  gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface
  gs.DisablePreSelect()
  gs.SubObjectSelect = False
  gs.Get()
  <span class="highlight-keyword">if</span> gs.CommandResult() != Result.Success:
    <span class="highlight-keyword">return</span> gs.CommandResult()

  <span class="highlight-comment"># get the selected face</span>
  face = gs.Object(<span class="highlight-number">0</span>).Face()
  <span class="highlight-keyword">if</span> face == None:
    <span class="highlight-keyword">return</span>

  <span class="highlight-comment"># pick a point on the surface.  Constain</span>
  <span class="highlight-comment"># picking to the face.</span>
  gp = Rhino.Input.Custom.GetPoint()
  gp.SetCommandPrompt(<span class="highlight-literal">"select point on surface"</span>)
  gp.Constrain(face, False)
  gp.Get()
  <span class="highlight-keyword">if</span> gp.CommandResult() != Result.Success:
    <span class="highlight-keyword">return</span> gp.CommandResult()

  <span class="highlight-comment"># get the parameters of the point on the</span>
  <span class="highlight-comment"># surface that is clesest to gp.Point()</span>
  b, u, v = face.ClosestPoint(gp.Point())
  <span class="highlight-keyword">if</span> b:
    dir = face.NormalAt(u, v)
    <span class="highlight-keyword">if</span> face.OrientationIsReversed:
      dir.Reverse()
    <span class="highlight-keyword">print</span> <span class="highlight-literal">"Surface normal at uv({0:f},{1:f}) = ({2:f},{3:f},{4:f})"</span>.format(
        u, v, dir.X, dir.Y, dir.Z)

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_BrepFace.htm">BrepFace Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>