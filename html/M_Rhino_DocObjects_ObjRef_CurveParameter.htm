<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ObjRef.CurveParameter Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="CurveParameter method" /><meta name="System.Keywords" content="ObjRef.CurveParameter method" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.ObjRef.CurveParameter" /><meta name="Microsoft.Help.Id" content="M:Rhino.DocObjects.ObjRef.CurveParameter(System.Double@)" /><meta name="Description" content="If the reference geometry is a curve or edge with a selection point, then this gets the parameter of the selection point." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.DocObjects" /><meta name="file" content="M_Rhino_DocObjects_ObjRef_CurveParameter" /><meta name="guid" content="M_Rhino_DocObjects_ObjRef_CurveParameter" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_DocObjects.htm" title="Rhino.DocObjects" tocid="N_Rhino_DocObjects">Rhino.DocObjects</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_DocObjects_ObjRef.htm" title="ObjRef Class" tocid="T_Rhino_DocObjects_ObjRef">ObjRef Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_DocObjects_ObjRef.htm" title="ObjRef Methods" tocid="Methods_T_Rhino_DocObjects_ObjRef">ObjRef Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Brep.htm" title="Brep Method " tocid="M_Rhino_DocObjects_ObjRef_Brep">Brep Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_ClippingPlaneSurface.htm" title="ClippingPlaneSurface Method " tocid="M_Rhino_DocObjects_ObjRef_ClippingPlaneSurface">ClippingPlaneSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Curve.htm" title="Curve Method " tocid="M_Rhino_DocObjects_ObjRef_Curve">Curve Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_CurveParameter.htm" title="CurveParameter Method " tocid="M_Rhino_DocObjects_ObjRef_CurveParameter">CurveParameter Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_DocObjects_ObjRef_Dispose.htm" title="Dispose Method " tocid="Overload_Rhino_DocObjects_ObjRef_Dispose">Dispose Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Edge.htm" title="Edge Method " tocid="M_Rhino_DocObjects_ObjRef_Edge">Edge Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Face.htm" title="Face Method " tocid="M_Rhino_DocObjects_ObjRef_Face">Face Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Finalize.htm" title="Finalize Method " tocid="M_Rhino_DocObjects_ObjRef_Finalize">Finalize Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Geometry.htm" title="Geometry Method " tocid="M_Rhino_DocObjects_ObjRef_Geometry">Geometry Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Hatch.htm" title="Hatch Method " tocid="M_Rhino_DocObjects_ObjRef_Hatch">Hatch Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_InstanceDefinitionPart.htm" title="InstanceDefinitionPart Method " tocid="M_Rhino_DocObjects_ObjRef_InstanceDefinitionPart">InstanceDefinitionPart Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Light.htm" title="Light Method " tocid="M_Rhino_DocObjects_ObjRef_Light">Light Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Mesh.htm" title="Mesh Method " tocid="M_Rhino_DocObjects_ObjRef_Mesh">Mesh Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Object.htm" title="Object Method " tocid="M_Rhino_DocObjects_ObjRef_Object">Object Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Point.htm" title="Point Method " tocid="M_Rhino_DocObjects_ObjRef_Point">Point Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_PointCloud.htm" title="PointCloud Method " tocid="M_Rhino_DocObjects_ObjRef_PointCloud">PointCloud Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SelectionMethod.htm" title="SelectionMethod Method " tocid="M_Rhino_DocObjects_ObjRef_SelectionMethod">SelectionMethod Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SelectionPoint.htm" title="SelectionPoint Method " tocid="M_Rhino_DocObjects_ObjRef_SelectionPoint">SelectionPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SelectionView.htm" title="SelectionView Method " tocid="M_Rhino_DocObjects_ObjRef_SelectionView">SelectionView Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SelectionViewDetailSerialNumber.htm" title="SelectionViewDetailSerialNumber Method " tocid="M_Rhino_DocObjects_ObjRef_SelectionViewDetailSerialNumber">SelectionViewDetailSerialNumber Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SetSelectionComponent.htm" title="SetSelectionComponent Method " tocid="M_Rhino_DocObjects_ObjRef_SetSelectionComponent">SetSelectionComponent Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SubD.htm" title="SubD Method " tocid="M_Rhino_DocObjects_ObjRef_SubD">SubD Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SubDFace.htm" title="SubDFace Method " tocid="M_Rhino_DocObjects_ObjRef_SubDFace">SubDFace Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Surface.htm" title="Surface Method " tocid="M_Rhino_DocObjects_ObjRef_Surface">Surface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_SurfaceParameter.htm" title="SurfaceParameter Method " tocid="M_Rhino_DocObjects_ObjRef_SurfaceParameter">SurfaceParameter Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_TextDot.htm" title="TextDot Method " tocid="M_Rhino_DocObjects_ObjRef_TextDot">TextDot Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_TextEntity.htm" title="TextEntity Method " tocid="M_Rhino_DocObjects_ObjRef_TextEntity">TextEntity Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjRef_Trim.htm" title="Trim Method " tocid="M_Rhino_DocObjects_ObjRef_Trim">Trim Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>ObjRef<span id="LST8D4868B0_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8D4868B0_0?cpp=::|nu=.");</script>CurveParameter Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            If the reference geometry is a curve or edge with a selection
            point, then this gets the parameter of the selection point.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_DocObjects.htm">Rhino.DocObjects</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">Curve</span> <span class="identifier">CurveParameter</span>(
	<span class="keyword">out</span> <span class="identifier">double</span> <span class="parameter">parameter</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">CurveParameter</span> ( 
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">parameter</span> <span class="keyword">As</span> <span class="identifier">Double</span>
) <span class="keyword">As</span> <span class="identifier">Curve</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">parameter</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">System<span id="LST8D4868B0_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8D4868B0_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Double</a><span id="LST8D4868B0_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8D4868B0_2?cpp=%");</script><br />The parameter of the selection point.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="T_Rhino_Geometry_Curve.htm">Curve</a><br />If the selection point was on a curve or edge, then the
            curve/edge is returned, otherwise null.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID2RBSection" class="collapsibleSection">
            If a curve was selected and CurveParameter is called and the 
            SelectionMethod() is not 1 (point pick on object), the curve will
            be returned and parameter will be set to the start parameter of
            the picked curve. This can be misleading so it may be necessary
            to call SelectionMethod() first, before calling CurveParameter
            to get the desired information.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> Rhino.Input;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddRadialDimensionCommand : Rhino.Commands.Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName
    {
      <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csAddRadialDimension"</span>; }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      ObjRef obj_ref;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetOneObject(<span class="highlight-literal">"Select curve for radius dimension"</span>, 
        <span class="highlight-keyword">true</span>, ObjectType.Curve, <span class="highlight-keyword">out</span> obj_ref);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">double</span> curve_parameter;
      <span class="highlight-keyword">var</span> curve = obj_ref.CurveParameter(<span class="highlight-keyword">out</span> curve_parameter);
      <span class="highlight-keyword">if</span> (curve == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-keyword">if</span> (curve.IsLinear() || curve.IsPolyline())
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Curve must be non-linear."</span>);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-comment">// in this example just deal with planar curves</span>
      <span class="highlight-keyword">if</span> (!curve.IsPlanar())
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Curve must be planar."</span>);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-keyword">var</span> point_on_curve = curve.PointAt(curve_parameter);
      <span class="highlight-keyword">var</span> curvature_vector = curve.CurvatureAt(curve_parameter);
      <span class="highlight-keyword">var</span> len = curvature_vector.Length;
      <span class="highlight-keyword">if</span> (len &lt; RhinoMath.SqrtEpsilon)
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Curve is almost linear and therefore has no curvature."</span>);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-keyword">var</span> center = point_on_curve + (curvature_vector/(len*len));
      Plane plane;
      curve.TryGetPlane(<span class="highlight-keyword">out</span> plane);
      <span class="highlight-keyword">var</span> radial_dimension = 
        <span class="highlight-keyword">new</span> RadialDimension(center, point_on_curve, plane.XAxis, plane.Normal, <span class="highlight-number">5.0</span>);
      doc.Objects.AddRadialDimension(radial_dimension);
      doc.Views.Redraw();
      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> Rhino.Input

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> AddRadialDimensionCommand
    <span class="highlight-keyword">Inherits</span> Rhino.Commands.Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbAddRadialDimension"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> obj_ref <span class="highlight-keyword">As</span> ObjRef = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc = RhinoGet.GetOneObject(<span class="highlight-literal">"Select curve for radius dimension"</span>, <span class="highlight-keyword">True</span>, ObjectType.Curve, obj_ref)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> curve_parameter <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">Dim</span> curve = obj_ref.CurveParameter(curve_parameter)
      <span class="highlight-keyword">If</span> curve <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">If</span> curve.IsLinear() <span class="highlight-keyword">OrElse</span> curve.IsPolyline() <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"Curve must be non-linear."</span>)
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">' in this example just deal with planar curves</span>
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> curve.IsPlanar() <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"Curve must be planar."</span>)
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> point_on_curve = curve.PointAt(curve_parameter)
      <span class="highlight-keyword">Dim</span> curvature_vector = curve.CurvatureAt(curve_parameter)
      <span class="highlight-keyword">Dim</span> len = curvature_vector.Length
      <span class="highlight-keyword">If</span> len &lt; RhinoMath.SqrtEpsilon <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"Curve is almost linear and therefore has no curvature."</span>)
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> center = point_on_curve + (curvature_vector / (len * len))
      <span class="highlight-keyword">Dim</span> plane <span class="highlight-keyword">As</span> Plane
      curve.TryGetPlane(plane)
      <span class="highlight-keyword">Dim</span> radial_dimension = <span class="highlight-keyword">New</span> RadialDimension(center, point_on_curve, plane.XAxis, plane.Normal, <span class="highlight-number">5.0</span>)
      doc.Objects.AddRadialDimension(radial_dimension)
      doc.Views.Redraw()
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> Rhino <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.DocObjects <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Commands <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> RunCommand():
  rc, obj_ref = RhinoGet.GetOneObject(<span class="highlight-literal">"Select curve for radius dimension"</span>, 
    True, ObjectType.Curve)
  <span class="highlight-keyword">if</span> rc != Result.Success:
    <span class="highlight-keyword">return</span> rc
  curve, curve_parameter = obj_ref.CurveParameter()
  <span class="highlight-keyword">if</span> curve == None:
    <span class="highlight-keyword">return</span> Result.Failure

  <span class="highlight-keyword">if</span> curve.IsLinear() <span class="highlight-keyword">or</span> curve.IsPolyline():
    <span class="highlight-keyword">print</span> <span class="highlight-literal">"Curve must be non-linear."</span>
    <span class="highlight-keyword">return</span> Result.Nothing

  <span class="highlight-comment"># in this example just deal with planar curves</span>
  <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> curve.IsPlanar():
    <span class="highlight-keyword">print</span> <span class="highlight-literal">"Curve must be planar."</span>
    <span class="highlight-keyword">return</span> Result.Nothing

  point_on_curve = curve.PointAt(curve_parameter)
  curvature_vector = curve.CurvatureAt(curve_parameter)
  len = curvature_vector.Length
  <span class="highlight-keyword">if</span> len &lt; RhinoMath.SqrtEpsilon:
    <span class="highlight-keyword">print</span> <span class="highlight-literal">"Curve is almost linear and therefore has no curvature."</span>
    <span class="highlight-keyword">return</span> Result.Nothing

  center = point_on_curve + (curvature_vector/(len*len))
  _, plane = curve.TryGetPlane()
  radial_dimension = \
    RadialDimension(center, point_on_curve, plane.XAxis, plane.Normal, <span class="highlight-number">5.0</span>)
  doc.Objects.AddRadialDimension(radial_dimension)
  doc.Views.Redraw()
  <span class="highlight-keyword">return</span> Result.Success

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_DocObjects_ObjRef.htm">ObjRef Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_DocObjects.htm">Rhino.DocObjects Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>