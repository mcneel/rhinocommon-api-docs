<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ObjectTable.UnselectAll Method </title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.DocObjects.Tables.ObjectTable.UnselectAll" /><meta name="Description" content="Unselect objects." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.DocObjects.Tables" /><meta name="file" content="M_Rhino_DocObjects_Tables_ObjectTable_UnselectAll" /><meta name="guid" content="M_Rhino_DocObjects_Tables_ObjectTable_UnselectAll" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_DocObjects_Tables.htm" title="Rhino.DocObjects.Tables" tocid="N_Rhino_DocObjects_Tables">Rhino.DocObjects.Tables</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_DocObjects_Tables_ObjectTable.htm" title="ObjectTable Class" tocid="T_Rhino_DocObjects_Tables_ObjectTable">ObjectTable Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_DocObjects_Tables_ObjectTable.htm" title="ObjectTable Methods" tocid="Methods_T_Rhino_DocObjects_Tables_ObjectTable">ObjectTable Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_DocObjects_Tables_ObjectTable_UnselectAll.htm" title="UnselectAll Method " tocid="Overload_Rhino_DocObjects_Tables_ObjectTable_UnselectAll">UnselectAll Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_Tables_ObjectTable_UnselectAll.htm" title="UnselectAll Method " tocid="M_Rhino_DocObjects_Tables_ObjectTable_UnselectAll">UnselectAll Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_Tables_ObjectTable_UnselectAll_1.htm" title="UnselectAll Method (Boolean)" tocid="M_Rhino_DocObjects_Tables_ObjectTable_UnselectAll_1">UnselectAll Method (Boolean)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>ObjectTable<span id="LST3649CF7_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3649CF7_0?cpp=::|nu=.");</script>UnselectAll Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">Unselect objects.</div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_DocObjects_Tables.htm">Rhino.DocObjects.Tables</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">int</span> <span class="identifier">UnselectAll</span>()</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">UnselectAll</span> <span class="keyword">As</span> <span class="identifier">Integer</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Return Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">Int32</a><br />Number of object that were unselected.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> Rhino.Input;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">class</span> DeviationConduit : Rhino.Display.DisplayConduit
  {
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Curve m_curve_a;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Curve m_curve_b;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Point3d m_min_dist_point_a ;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Point3d m_min_dist_point_b ;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Point3d m_max_dist_point_a ;
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">readonly</span> Point3d m_max_dist_point_b ;

    <span class="highlight-keyword">public</span> DeviationConduit(Curve curveA, Curve curveB, Point3d minDistPointA, Point3d minDistPointB, Point3d maxDistPointA, Point3d maxDistPointB)
    {
      m_curve_a = curveA;
      m_curve_b = curveB;
      m_min_dist_point_a = minDistPointA;
      m_min_dist_point_b = minDistPointB;
      m_max_dist_point_a = maxDistPointA;
      m_max_dist_point_b = maxDistPointB;
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> DrawForeground(Rhino.Display.DrawEventArgs e)
    {
      e.Display.DrawCurve(m_curve_a, Color.Red);
      e.Display.DrawCurve(m_curve_b, Color.Red);

      e.Display.DrawPoint(m_min_dist_point_a, Color.LawnGreen);
      e.Display.DrawPoint(m_min_dist_point_b, Color.LawnGreen);
      e.Display.DrawLine(<span class="highlight-keyword">new</span> Line(m_min_dist_point_a, m_min_dist_point_b), Color.LawnGreen);
      e.Display.DrawPoint(m_max_dist_point_a, Color.Red);
      e.Display.DrawPoint(m_max_dist_point_b, Color.Red);
      e.Display.DrawLine(<span class="highlight-keyword">new</span> Line(m_max_dist_point_a, m_max_dist_point_b), Color.Red);
    }
  }


  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CurveDeviationCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csCurveDeviation"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      doc.Objects.UnselectAll();

      ObjRef obj_ref1;
      <span class="highlight-keyword">var</span> rc1 = RhinoGet.GetOneObject(<span class="highlight-literal">"first curve"</span>, <span class="highlight-keyword">true</span>, ObjectType.Curve, <span class="highlight-keyword">out</span> obj_ref1);
      <span class="highlight-keyword">if</span> (rc1 != Result.Success)
        <span class="highlight-keyword">return</span> rc1;
      Curve curve_a = <span class="highlight-keyword">null</span>;
      <span class="highlight-keyword">if</span> (obj_ref1 != <span class="highlight-keyword">null</span>)
        curve_a = obj_ref1.Curve();
      <span class="highlight-keyword">if</span> (curve_a == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-comment">// Since you already selected a curve if you don't unselect it</span>
      <span class="highlight-comment">// the next GetOneObject won't stop as it considers that curve </span>
      <span class="highlight-comment">// input, i.e., curveA and curveB will point to the same curve.</span>
      <span class="highlight-comment">// Another option would be to use an instance of Rhino.Input.Custom.GetObject</span>
      <span class="highlight-comment">// instead of Rhino.Input.RhinoGet as GetObject has a DisablePreSelect() method.</span>
      doc.Objects.UnselectAll();

      ObjRef obj_ref2;
      <span class="highlight-keyword">var</span> rc2 = RhinoGet.GetOneObject(<span class="highlight-literal">"second curve"</span>, <span class="highlight-keyword">true</span>, ObjectType.Curve, <span class="highlight-keyword">out</span> obj_ref2);
      <span class="highlight-keyword">if</span> (rc2 != Result.Success)
        <span class="highlight-keyword">return</span> rc2;
      Curve curve_b = <span class="highlight-keyword">null</span>;
      <span class="highlight-keyword">if</span> (obj_ref2 != <span class="highlight-keyword">null</span>)
        curve_b = obj_ref2.Curve();
      <span class="highlight-keyword">if</span> (curve_b == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-keyword">var</span> tolerance = doc.ModelAbsoluteTolerance;

      <span class="highlight-keyword">double</span> max_distance;
      <span class="highlight-keyword">double</span> max_distance_parameter_a;
      <span class="highlight-keyword">double</span> max_distance_parameter_b;
      <span class="highlight-keyword">double</span> min_distance;
      <span class="highlight-keyword">double</span> min_distance_parameter_a;
      <span class="highlight-keyword">double</span> min_distance_parameter_b;

      DeviationConduit conduit;
      <span class="highlight-keyword">if</span> (!Curve.GetDistancesBetweenCurves(curve_a, curve_b, tolerance, <span class="highlight-keyword">out</span> max_distance, 
                <span class="highlight-keyword">out</span> max_distance_parameter_a, <span class="highlight-keyword">out</span> max_distance_parameter_b,
                <span class="highlight-keyword">out</span> min_distance, <span class="highlight-keyword">out</span> min_distance_parameter_a, <span class="highlight-keyword">out</span> min_distance_parameter_b))
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Unable to find overlap intervals."</span>);
        <span class="highlight-keyword">return</span> Result.Success;
      }
      <span class="highlight-keyword">else</span>
      {
        <span class="highlight-keyword">if</span> (min_distance &lt;= RhinoMath.ZeroTolerance)
          min_distance = <span class="highlight-number">0.0</span>;
        <span class="highlight-keyword">var</span> max_dist_pt_a = curve_a.PointAt(max_distance_parameter_a);
        <span class="highlight-keyword">var</span> max_dist_pt_b = curve_b.PointAt(max_distance_parameter_b);
        <span class="highlight-keyword">var</span> min_dist_pt_a = curve_a.PointAt(min_distance_parameter_a);
        <span class="highlight-keyword">var</span> min_dist_pt_b = curve_b.PointAt(min_distance_parameter_b);

        conduit = <span class="highlight-keyword">new</span> DeviationConduit(curve_a, curve_b, min_dist_pt_a, min_dist_pt_b, max_dist_pt_a, max_dist_pt_b) {Enabled = <span class="highlight-keyword">true</span>};
        doc.Views.Redraw();

        RhinoApp.WriteLine(<span class="highlight-literal">"Minimum deviation = {0}   pointA({1}), pointB({2})"</span>, min_distance, min_dist_pt_a, min_dist_pt_b);
        RhinoApp.WriteLine(<span class="highlight-literal">"Maximum deviation = {0}   pointA({1}), pointB({2})"</span>, max_distance, max_dist_pt_a, max_dist_pt_b);
      }

      <span class="highlight-keyword">var</span> str = <span class="highlight-literal">""</span>;
      RhinoGet.GetString(<span class="highlight-literal">"Press Enter when done"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> str);
      conduit.Enabled = <span class="highlight-keyword">false</span>;

      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> Rhino.Input

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Class</span> DeviationConduit
    <span class="highlight-keyword">Inherits</span> Rhino.Display.DisplayConduit
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">ReadOnly</span> _curveA <span class="highlight-keyword">As</span> Curve
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">ReadOnly</span> _curveB <span class="highlight-keyword">As</span> Curve
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">ReadOnly</span> _minDistPointA <span class="highlight-keyword">As</span> Point3d
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">ReadOnly</span> _minDistPointB <span class="highlight-keyword">As</span> Point3d
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">ReadOnly</span> _maxDistPointA <span class="highlight-keyword">As</span> Point3d
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">ReadOnly</span> _maxDistPointB <span class="highlight-keyword">As</span> Point3d

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>(curveA <span class="highlight-keyword">As</span> Curve, curveB <span class="highlight-keyword">As</span> Curve, minDistPointA <span class="highlight-keyword">As</span> Point3d, minDistPointB <span class="highlight-keyword">As</span> Point3d, maxDistPointA <span class="highlight-keyword">As</span> Point3d, maxDistPointB <span class="highlight-keyword">As</span> Point3d)
      _curveA = curveA
      _curveB = curveB
      _minDistPointA = minDistPointA
      _minDistPointB = minDistPointB
      _maxDistPointA = maxDistPointA
      _maxDistPointB = maxDistPointB
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> DrawForeground(e <span class="highlight-keyword">As</span> Rhino.Display.DrawEventArgs)
      e.Display.DrawCurve(_curveA, Color.Red)
      e.Display.DrawCurve(_curveB, Color.Red)

      e.Display.DrawPoint(_minDistPointA, Color.LawnGreen)
      e.Display.DrawPoint(_minDistPointB, Color.LawnGreen)
      e.Display.DrawLine(<span class="highlight-keyword">New</span> Line(_minDistPointA, _minDistPointB), Color.LawnGreen)
      e.Display.DrawPoint(_maxDistPointA, Color.Red)
      e.Display.DrawPoint(_maxDistPointB, Color.Red)
      e.Display.DrawLine(<span class="highlight-keyword">New</span> Line(_maxDistPointA, _maxDistPointB), Color.Red)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>


  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> CurveDeviationCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbCurveDeviation"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      doc.Objects.UnselectAll()

      <span class="highlight-keyword">Dim</span> objRef1 <span class="highlight-keyword">As</span> ObjRef = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc1 = RhinoGet.GetOneObject(<span class="highlight-literal">"first curve"</span>, <span class="highlight-keyword">True</span>, ObjectType.Curve, objRef1)
      <span class="highlight-keyword">If</span> rc1 &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc1
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> curveA <span class="highlight-keyword">As</span> Curve = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">If</span> objRef1 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        curveA = objRef1.Curve()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> curveA <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">' Since you already selected a curve if you don't unselect it</span>
      <span class="highlight-comment">' the next GetOneObject won't stop as it considers that curve </span>
      <span class="highlight-comment">' input, i.e., curveA and curveB will point to the same curve.</span>
      <span class="highlight-comment">' Another option would be to use an instance of Rhino.Input.Custom.GetObject</span>
      <span class="highlight-comment">' instead of Rhino.Input.RhinoGet as GetObject has a DisablePreSelect() method.</span>
      doc.Objects.UnselectAll()

      <span class="highlight-keyword">Dim</span> objRef2 <span class="highlight-keyword">As</span> ObjRef = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc2 = RhinoGet.GetOneObject(<span class="highlight-literal">"second curve"</span>, <span class="highlight-keyword">True</span>, ObjectType.Curve, objRef2)
      <span class="highlight-keyword">If</span> rc2 &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc2
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> curveB <span class="highlight-keyword">As</span> Curve = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">If</span> objRef2 <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        curveB = objRef2.Curve()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> curveB <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> tolerance = doc.ModelAbsoluteTolerance

      <span class="highlight-keyword">Dim</span> maxDistance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">Dim</span> maxDistanceParameterA <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">Dim</span> maxDistanceParameterB <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">Dim</span> minDistance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">Dim</span> minDistanceParameterA <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">Dim</span> minDistanceParameterB <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>

      <span class="highlight-keyword">Dim</span> conduit <span class="highlight-keyword">As</span> DeviationConduit
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> Curve.GetDistancesBetweenCurves(curveA, curveB, tolerance, maxDistance, maxDistanceParameterA, maxDistanceParameterB, _
        minDistance, minDistanceParameterA, minDistanceParameterB) <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"Unable to find overlap intervals."</span>)
        <span class="highlight-keyword">Return</span> Result.Success
      <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">If</span> minDistance &lt;= RhinoMath.ZeroTolerance <span class="highlight-keyword">Then</span>
          minDistance = <span class="highlight-number">0.0</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Dim</span> maxDistPtA = curveA.PointAt(maxDistanceParameterA)
        <span class="highlight-keyword">Dim</span> maxDistPtB = curveB.PointAt(maxDistanceParameterB)
        <span class="highlight-keyword">Dim</span> minDistPtA = curveA.PointAt(minDistanceParameterA)
        <span class="highlight-keyword">Dim</span> minDistPtB = curveB.PointAt(minDistanceParameterB)

        conduit = <span class="highlight-keyword">New</span> DeviationConduit(curveA, curveB, minDistPtA, minDistPtB, maxDistPtA, maxDistPtB)
        conduit.Enabled = <span class="highlight-keyword">True</span>

        doc.Views.Redraw()
        RhinoApp.WriteLine(<span class="highlight-literal">"Minimum deviation= {0}   pointA= {1}, pointB= {2}"</span>, minDistance, minDistPtA, minDistPtB)
        RhinoApp.WriteLine(<span class="highlight-literal">"Maximum deviation= {0}   pointA= {1}, pointB= {2}"</span>, maxDistance, maxDistPtA, maxDistPtB)
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> str <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">""</span>
      RhinoGet.GetString(<span class="highlight-literal">"Press Enter when done"</span>, <span class="highlight-keyword">True</span>, str)
      conduit.Enabled = <span class="highlight-keyword">False</span>

      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs
<span class="highlight-keyword">import</span> scriptcontext
<span class="highlight-keyword">import</span> Rhino

<span class="highlight-keyword">def</span> RunCommand():
  crvA = rs.GetCurveObject(<span class="highlight-literal">"first curve"</span>)[<span class="highlight-number">0</span>]
  crvA = rs.coercecurve(crvA)
  crvB = rs.GetCurveObject(<span class="highlight-literal">"second curve"</span>)[<span class="highlight-number">0</span>]
  crvB = rs.coercecurve(crvB)
  <span class="highlight-keyword">if</span> crvA == None <span class="highlight-keyword">or</span> crvB == None:
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

  maxa, maxb, maxd, mina, minb, mind = rs.CurveDeviation(crvA, crvB)

  <span class="highlight-keyword">if</span> mind &lt;= Rhino.RhinoMath.ZeroTolerance:
      mind = <span class="highlight-number">0.0</span>;
  maxDistPtA = crvA.PointAt(maxa)
  maxDistPtB = crvB.PointAt(maxb)
  minDistPtA = crvA.PointAt(mina)
  minDistPtB = crvB.PointAt(minb)

  <span class="highlight-keyword">print</span> <span class="highlight-literal">"Minimum deviation = {0}   pointA({1}, {2}, {3}), pointB({4}, {5}, {6})"</span>.format(
    mind, minDistPtA.X, minDistPtA.Y, minDistPtA.Z, minDistPtB.X, minDistPtB.Y, minDistPtB.Z)
  <span class="highlight-keyword">print</span> <span class="highlight-literal">"Maximum deviation = {0}   pointA({1}, {2}, {3}), pointB({4}, {5}, {6})"</span>.format(
    maxd, maxDistPtA.X, maxDistPtA.Y, maxDistPtA.Z, maxDistPtB.X, maxDistPtB.Y, maxDistPtB.Z)

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_DocObjects_Tables_ObjectTable.htm">ObjectTable Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_DocObjects_Tables_ObjectTable_UnselectAll.htm">UnselectAll Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_DocObjects_Tables.htm">Rhino.DocObjects.Tables Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>