<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Interval.Mid Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Mid property" /><meta name="System.Keywords" content="Interval.Mid property" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Interval.Mid" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Interval.get_Mid" /><meta name="Microsoft.Help.Id" content="P:Rhino.Geometry.Interval.Mid" /><meta name="Description" content="Gets the average of T0 and T1." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="P_Rhino_Geometry_Interval_Mid" /><meta name="guid" content="P_Rhino_Geometry_Interval_Mid" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_Interval.htm" title="Interval Structure" tocid="T_Rhino_Geometry_Interval">Interval Structure</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_Rhino_Geometry_Interval.htm" title="Interval Properties" tocid="Properties_T_Rhino_Geometry_Interval">Interval Properties</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_IsDecreasing.htm" title="IsDecreasing Property " tocid="P_Rhino_Geometry_Interval_IsDecreasing">IsDecreasing Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_IsIncreasing.htm" title="IsIncreasing Property " tocid="P_Rhino_Geometry_Interval_IsIncreasing">IsIncreasing Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_IsSingleton.htm" title="IsSingleton Property " tocid="P_Rhino_Geometry_Interval_IsSingleton">IsSingleton Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_IsValid.htm" title="IsValid Property " tocid="P_Rhino_Geometry_Interval_IsValid">IsValid Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_Item.htm" title="Item Property " tocid="P_Rhino_Geometry_Interval_Item">Item Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_Length.htm" title="Length Property " tocid="P_Rhino_Geometry_Interval_Length">Length Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_Max.htm" title="Max Property " tocid="P_Rhino_Geometry_Interval_Max">Max Property </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_Mid.htm" title="Mid Property " tocid="P_Rhino_Geometry_Interval_Mid">Mid Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_Min.htm" title="Min Property " tocid="P_Rhino_Geometry_Interval_Min">Min Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_T0.htm" title="T0 Property " tocid="P_Rhino_Geometry_Interval_T0">T0 Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_T1.htm" title="T1 Property " tocid="P_Rhino_Geometry_Interval_T1">T1 Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Interval_Unset.htm" title="Unset Property " tocid="P_Rhino_Geometry_Interval_Unset">Unset Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Interval<span id="LST8D051368_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8D051368_0?cpp=::|nu=.");</script>Mid Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Gets the average of T0 and T1.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">double</span> <span class="identifier">Mid</span> { <span class="keyword">get</span>; }</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">ReadOnly</span> <span class="keyword">Property</span> <span class="identifier">Mid</span> <span class="keyword">As</span> <span class="identifier">Double</span>
	<span class="keyword">Get</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">Double</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.Linq;
<span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.Input.Custom;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ExtendCurveCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csExtendCurve"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      ObjRef[] boundary_obj_refs;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select boundary objects"</span>, <span class="highlight-keyword">false</span>, ObjectType.AnyObject, <span class="highlight-keyword">out</span> boundary_obj_refs);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">if</span> (boundary_obj_refs == <span class="highlight-keyword">null</span> || boundary_obj_refs.Length == <span class="highlight-number">0</span>)
        <span class="highlight-keyword">return</span> Result.Nothing;

      <span class="highlight-keyword">var</span> gc = <span class="highlight-keyword">new</span> GetObject();
      gc.SetCommandPrompt(<span class="highlight-literal">"Select curve to extend"</span>);
      gc.GeometryFilter = ObjectType.Curve;
      gc.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve;
      gc.Get();
      <span class="highlight-keyword">if</span> (gc.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gc.CommandResult();
      <span class="highlight-keyword">var</span> curve_obj_ref = gc.Object(<span class="highlight-number">0</span>);

      <span class="highlight-keyword">var</span> curve = curve_obj_ref.Curve();
      <span class="highlight-keyword">if</span> (curve == <span class="highlight-keyword">null</span>) <span class="highlight-keyword">return</span> Result.Failure;
      <span class="highlight-keyword">double</span> t;
      <span class="highlight-keyword">if</span> (!curve.ClosestPoint(curve_obj_ref.SelectionPoint(), <span class="highlight-keyword">out</span> t))
        <span class="highlight-keyword">return</span> Result.Failure;
      <span class="highlight-keyword">var</span> curve_end = t &lt;= curve.Domain.Mid ? CurveEnd.Start : CurveEnd.End;

      <span class="highlight-keyword">var</span> geometry = boundary_obj_refs.Select(obj=&gt; obj.Geometry());
      <span class="highlight-keyword">var</span> extended_curve = curve.Extend(curve_end, CurveExtensionStyle.Line, geometry);
      <span class="highlight-keyword">if</span> (extended_curve != <span class="highlight-keyword">null</span> &amp;&amp; extended_curve.IsValid)
      {
        <span class="highlight-keyword">if</span> (!doc.Objects.Replace(curve_obj_ref.ObjectId, extended_curve))
          <span class="highlight-keyword">return</span> Result.Failure;
        doc.Views.Redraw();
      }
      <span class="highlight-keyword">else</span>
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"No boundary object was intersected so curve not extended"</span>);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System.Linq
<span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Input
<span class="highlight-keyword">Imports</span> Rhino.Input.Custom

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> ExtendCurveCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbExtendCurve"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> boundary_obj_refs <span class="highlight-keyword">As</span> ObjRef() = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select boundary objects"</span>, <span class="highlight-keyword">False</span>, ObjectType.AnyObject, boundary_obj_refs)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> boundary_obj_refs <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> boundary_obj_refs.Length = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> gc = <span class="highlight-keyword">New</span> GetObject()
      gc.SetCommandPrompt(<span class="highlight-literal">"Select curve to extend"</span>)
      gc.GeometryFilter = ObjectType.Curve
      gc.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve
      gc.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gc.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gc.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> curve_obj_ref = gc.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>)

      <span class="highlight-keyword">Dim</span> curve = curve_obj_ref.Curve()
      <span class="highlight-keyword">If</span> curve <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> t <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> curve.ClosestPoint(curve_obj_ref.SelectionPoint(), t) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> curve_end = <span class="highlight-keyword">If</span>(t &lt;= curve.Domain.Mid, CurveEnd.Start, CurveEnd.[<span class="highlight-keyword">End</span>])

      <span class="highlight-keyword">Dim</span> geometry = boundary_obj_refs.[<span class="highlight-keyword">Select</span>](<span class="highlight-keyword">Function</span>(obj) obj.Geometry())
      <span class="highlight-keyword">Dim</span> extended_curve = curve.Extend(curve_end, CurveExtensionStyle.Line, geometry)
      <span class="highlight-keyword">If</span> extended_curve <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> extended_curve.IsValid <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> doc.Objects.Replace(curve_obj_ref.ObjectId, extended_curve) <span class="highlight-keyword">Then</span>
          <span class="highlight-keyword">Return</span> Result.Failure
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        doc.Views.Redraw()
      <span class="highlight-keyword">Else</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"No boundary object was intersected so curve not extended"</span>)
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> Rhino <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.DocObjects <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Commands <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input.Custom <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> RunCommand():

  rc, boundary_obj_refs = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select boundary objects"</span>, False, ObjectType.AnyObject)
  <span class="highlight-keyword">if</span> rc &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> rc
  <span class="highlight-keyword">if</span> boundary_obj_refs == None <span class="highlight-keyword">or</span> boundary_obj_refs.Length == <span class="highlight-number">0</span>:
    <span class="highlight-keyword">return</span> Result.Nothing

  gc = GetObject()
  gc.SetCommandPrompt(<span class="highlight-literal">"Select curve to extend"</span>)
  gc.GeometryFilter = ObjectType.Curve
  gc.GeometryAttributeFilter = GeometryAttributeFilter.OpenCurve
  gc.Get()
  <span class="highlight-keyword">if</span> gc.CommandResult() &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> gc.CommandResult()
  curve_obj_ref = gc.Object(<span class="highlight-number">0</span>)

  curve = curve_obj_ref.Curve()
  <span class="highlight-keyword">if</span> curve == None: <span class="highlight-keyword">return</span> Result.Failure
  b, t = curve.ClosestPoint(curve_obj_ref.SelectionPoint())
  <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> b: <span class="highlight-keyword">return</span> Result.Failure
  curve_end = CurveEnd.Start <span class="highlight-keyword">if</span> t &lt;= curve.Domain.Mid <span class="highlight-keyword">else</span> CurveEnd.End

  geometry = [obj.Geometry() <span class="highlight-keyword">for</span> obj <span class="highlight-keyword">in</span> boundary_obj_refs]
  extended_curve = curve.Extend(curve_end, CurveExtensionStyle.Line, geometry)
  <span class="highlight-keyword">if</span> extended_curve &lt;&gt; None <span class="highlight-keyword">and</span> extended_curve.IsValid:
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> doc.Objects.Replace(curve_obj_ref.ObjectId, extended_curve):
      <span class="highlight-keyword">return</span> Result.Failure
    doc.Views.Redraw()
    <span class="highlight-keyword">return</span> Result.Success
  <span class="highlight-keyword">else</span>:
    RhinoApp.WriteLine(<span class="highlight-literal">"No boundary object was intersected so curve not extended"</span>)
    <span class="highlight-keyword">return</span> Result.Nothing

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Interval.htm">Interval Structure</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>