<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ObjectAttributes.RemoveDisplayModeOverride Method (Guid)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride(System.Guid)" /><meta name="Description" content="By default, objects are drawn using the display mode of the viewport that the object is being drawn in. Setting a specific display mode, instructs Rhino to always use that display mode, regardless of the viewport's mode." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.DocObjects" /><meta name="file" content="M_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride_1" /><meta name="guid" content="M_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride_1" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_DocObjects.htm" title="Rhino.DocObjects" tocid="N_Rhino_DocObjects">Rhino.DocObjects</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_DocObjects_ObjectAttributes.htm" title="ObjectAttributes Class" tocid="T_Rhino_DocObjects_ObjectAttributes">ObjectAttributes Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_DocObjects_ObjectAttributes.htm" title="ObjectAttributes Methods" tocid="Methods_T_Rhino_DocObjects_ObjectAttributes">ObjectAttributes Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride.htm" title="RemoveDisplayModeOverride Method " tocid="Overload_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride">RemoveDisplayModeOverride Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride.htm" title="RemoveDisplayModeOverride Method " tocid="M_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride">RemoveDisplayModeOverride Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride_1.htm" title="RemoveDisplayModeOverride Method (Guid)" tocid="M_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride_1">RemoveDisplayModeOverride Method (Guid)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>ObjectAttributes<span id="LST8B01BE19_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8B01BE19_0?cpp=::|nu=.");</script>RemoveDisplayModeOverride Method (Guid)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            By default, objects are drawn using the display mode of the viewport that
            the object is being drawn in. Setting a specific display mode, instructs
            Rhino to always use that display mode, regardless of the viewport's mode.
            This function resets an object to use the viewport's display mode.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_DocObjects.htm">Rhino.DocObjects</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">RemoveDisplayModeOverride</span>(
	<span class="identifier">Guid</span> <span class="parameter">rhinoViewportId</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">RemoveDisplayModeOverride</span> ( 
	<span class="parameter">rhinoViewportId</span> <span class="keyword">As</span> <span class="identifier">Guid</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">rhinoViewportId</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.guid" target="_blank">System<span id="LST8B01BE19_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8B01BE19_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Guid</a><br />viewport that display mode overrides should be cleared from.</dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.DocObjects;

<span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result ObjectDisplayMode(Rhino.RhinoDoc doc)
  {
    <span class="highlight-keyword">const</span> ObjectType filter = ObjectType.Mesh | ObjectType.Brep;
    ObjRef objref;
    Result rc = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select mesh or surface"</span>, <span class="highlight-keyword">true</span>, filter, <span class="highlight-keyword">out</span> objref);
    <span class="highlight-keyword">if</span> (rc != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> rc;
    Guid viewportId = doc.Views.ActiveView.ActiveViewportID;

    ObjectAttributes attr = objref.Object().Attributes;
    <span class="highlight-keyword">if</span> (attr.HasDisplayModeOverride(viewportId))
    {
      RhinoApp.WriteLine(<span class="highlight-literal">"Removing display mode override from object"</span>);
      attr.RemoveDisplayModeOverride(viewportId);
    }
    <span class="highlight-keyword">else</span>
    {
      Rhino.Display.DisplayModeDescription[] modes = Rhino.Display.DisplayModeDescription.GetDisplayModes();
      Rhino.Display.DisplayModeDescription mode = <span class="highlight-keyword">null</span>;
      <span class="highlight-keyword">if</span> (modes.Length == <span class="highlight-number">1</span>)
        mode = modes[<span class="highlight-number">0</span>];
      <span class="highlight-keyword">else</span>
      {
        Rhino.Input.Custom.GetOption go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetOption();
        go.SetCommandPrompt(<span class="highlight-literal">"Select display mode"</span>);
        <span class="highlight-keyword">string</span>[] str_modes = <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[modes.Length];
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; modes.Length; i++)
          str_modes[i] = modes[i].EnglishName.Replace(<span class="highlight-literal">" "</span>, <span class="highlight-literal">""</span>).Replace(<span class="highlight-literal">"-"</span>, <span class="highlight-literal">""</span>);
        go.AddOptionList(<span class="highlight-literal">"DisplayMode"</span>, str_modes, <span class="highlight-number">0</span>);
        <span class="highlight-keyword">if</span> (go.Get() == Rhino.Input.GetResult.Option)
          mode = modes[go.Option().CurrentListOptionIndex];
      }
      <span class="highlight-keyword">if</span> (mode == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Rhino.Commands.Result.Cancel;
      attr.SetDisplayModeOverride(mode, viewportId);
    }
    doc.Objects.ModifyAttributes(objref, attr, <span class="highlight-keyword">false</span>);
    doc.Views.Redraw();
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.DocObjects

<span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> ObjectDisplayMode(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> rc <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Const</span> filter <span class="highlight-keyword">As</span> ObjectType = ObjectType.Mesh <span class="highlight-keyword">Or</span> ObjectType.Brep
    <span class="highlight-keyword">Dim</span> objref <span class="highlight-keyword">As</span> ObjRef = <span class="highlight-keyword">Nothing</span>
    rc = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select mesh or surface"</span>, <span class="highlight-keyword">True</span>, filter, objref)
    <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> rc
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Dim</span> viewportId <span class="highlight-keyword">As</span> Guid = doc.Views.ActiveView.ActiveViewportID

    <span class="highlight-keyword">Dim</span> attr <span class="highlight-keyword">As</span> ObjectAttributes = objref.[<span class="highlight-keyword">Object</span>]().Attributes
    <span class="highlight-keyword">If</span> attr.HasDisplayModeOverride(viewportId) <span class="highlight-keyword">Then</span>
      RhinoApp.WriteLine(<span class="highlight-literal">"Removing display mode override from object"</span>)
      attr.RemoveDisplayModeOverride(viewportId)
    <span class="highlight-keyword">Else</span>
      <span class="highlight-keyword">Dim</span> modes <span class="highlight-keyword">As</span> Rhino.Display.DisplayModeDescription() = Rhino.Display.DisplayModeDescription.GetDisplayModes()
      <span class="highlight-keyword">Dim</span> mode <span class="highlight-keyword">As</span> Rhino.Display.DisplayModeDescription = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">If</span> modes.Length = <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
        mode = modes(<span class="highlight-number">0</span>)
      <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Dim</span> go <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetOption()
        go.SetCommandPrompt(<span class="highlight-literal">"Select display mode"</span>)
        <span class="highlight-keyword">Dim</span> str_modes <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">String</span>(modes.Length - <span class="highlight-number">1</span>) {}
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> modes.Length - <span class="highlight-number">1</span>
          str_modes(i) = modes(i).EnglishName.Replace(<span class="highlight-literal">" "</span>, <span class="highlight-literal">""</span>).Replace(<span class="highlight-literal">"-"</span>, <span class="highlight-literal">""</span>)
        <span class="highlight-keyword">Next</span>
        go.AddOptionList(<span class="highlight-literal">"DisplayMode"</span>, str_modes, <span class="highlight-number">0</span>)
        <span class="highlight-keyword">If</span> go.[<span class="highlight-keyword">Get</span>]() = Rhino.Input.GetResult.[<span class="highlight-keyword">Option</span>] <span class="highlight-keyword">Then</span>
          mode = modes(go.[<span class="highlight-keyword">Option</span>]().CurrentListOptionIndex)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> mode <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Cancel
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      attr.SetDisplayModeOverride(mode, viewportId)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    doc.Objects.ModifyAttributes(objref, attr, <span class="highlight-keyword">False</span>)
    doc.Views.Redraw()
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> ObjectDisplayMode():
    filter = Rhino.DocObjects.ObjectType.Brep | Rhino.DocObjects.ObjectType.Mesh
    rc, objref = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"Select mesh or surface"</span>, True, filter)
    <span class="highlight-keyword">if</span> rc != Rhino.Commands.Result.Success: <span class="highlight-keyword">return</span> rc;
    viewportId = scriptcontext.doc.Views.ActiveView.ActiveViewportID

    attr = objref.Object().Attributes
    <span class="highlight-keyword">if</span> attr.HasDisplayModeOverride(viewportId):
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"Removing display mode override from object"</span>
        attr.RemoveDisplayModeOverride(viewportId)
    <span class="highlight-keyword">else</span>:
        modes = Rhino.Display.DisplayModeDescription.GetDisplayModes()
        mode = None
        <span class="highlight-keyword">if</span> len(modes) == <span class="highlight-number">1</span>:
            mode = modes[<span class="highlight-number">0</span>]
        <span class="highlight-keyword">else</span>:
            go = Rhino.Input.Custom.GetOption()
            go.SetCommandPrompt(<span class="highlight-literal">"Select display mode"</span>)
            str_modes = []
            <span class="highlight-keyword">for</span> m <span class="highlight-keyword">in</span> modes:
                s = m.EnglishName.replace(<span class="highlight-literal">" "</span>,<span class="highlight-literal">""</span>).replace(<span class="highlight-literal">"-"</span>,<span class="highlight-literal">""</span>)
                str_modes.append(s)
            go.AddOptionList(<span class="highlight-literal">"DisplayMode"</span>, str_modes, <span class="highlight-number">0</span>)
            <span class="highlight-keyword">if</span> go.Get()==Rhino.Input.GetResult.Option:
                mode = modes[go.Option().CurrentListOptionIndex]
        <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> mode: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Cancel
        attr.SetDisplayModeOverride(mode, viewportId)
    scriptcontext.doc.Objects.ModifyAttributes(objref, attr, False)
    scriptcontext.doc.Views.Redraw()


<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    ObjectDisplayMode()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_DocObjects_ObjectAttributes.htm">ObjectAttributes Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_DocObjects_ObjectAttributes_RemoveDisplayModeOverride.htm">RemoveDisplayModeOverride Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_DocObjects.htm">Rhino.DocObjects Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>