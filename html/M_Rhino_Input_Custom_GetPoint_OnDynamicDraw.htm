<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>GetPoint.OnDynamicDraw Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="OnDynamicDraw method" /><meta name="System.Keywords" content="GetPoint.OnDynamicDraw method" /><meta name="Microsoft.Help.F1" content="Rhino.Input.Custom.GetPoint.OnDynamicDraw" /><meta name="Microsoft.Help.Id" content="M:Rhino.Input.Custom.GetPoint.OnDynamicDraw(Rhino.Input.Custom.GetPointDrawEventArgs)" /><meta name="Description" content="Default calls the DynamicDraw event." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Input.Custom" /><meta name="file" content="M_Rhino_Input_Custom_GetPoint_OnDynamicDraw" /><meta name="guid" content="M_Rhino_Input_Custom_GetPoint_OnDynamicDraw" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Input_Custom.htm" title="Rhino.Input.Custom" tocid="N_Rhino_Input_Custom">Rhino.Input.Custom</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Input_Custom_GetPoint.htm" title="GetPoint Class" tocid="T_Rhino_Input_Custom_GetPoint">GetPoint Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Input_Custom_GetPoint.htm" title="GetPoint Methods" tocid="Methods_T_Rhino_Input_Custom_GetPoint">GetPoint Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_AddConstructionPoint.htm" title="AddConstructionPoint Method " tocid="M_Rhino_Input_Custom_GetPoint_AddConstructionPoint">AddConstructionPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_AddConstructionPoints.htm" title="AddConstructionPoints Method " tocid="M_Rhino_Input_Custom_GetPoint_AddConstructionPoints">AddConstructionPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_AddSnapPoint.htm" title="AddSnapPoint Method " tocid="M_Rhino_Input_Custom_GetPoint_AddSnapPoint">AddSnapPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_AddSnapPoints.htm" title="AddSnapPoints Method " tocid="M_Rhino_Input_Custom_GetPoint_AddSnapPoints">AddSnapPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_ClearConstraints.htm" title="ClearConstraints Method " tocid="M_Rhino_Input_Custom_GetPoint_ClearConstraints">ClearConstraints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_ClearConstructionPoints.htm" title="ClearConstructionPoints Method " tocid="M_Rhino_Input_Custom_GetPoint_ClearConstructionPoints">ClearConstructionPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_ClearSnapPoints.htm" title="ClearSnapPoints Method " tocid="M_Rhino_Input_Custom_GetPoint_ClearSnapPoints">ClearSnapPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_Custom_GetPoint_Constrain.htm" title="Constrain Method " tocid="Overload_Rhino_Input_Custom_GetPoint_Constrain">Constrain Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_ConstrainDistanceFromBasePoint.htm" title="ConstrainDistanceFromBasePoint Method " tocid="M_Rhino_Input_Custom_GetPoint_ConstrainDistanceFromBasePoint">ConstrainDistanceFromBasePoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_ConstrainToConstructionPlane.htm" title="ConstrainToConstructionPlane Method " tocid="M_Rhino_Input_Custom_GetPoint_ConstrainToConstructionPlane">ConstrainToConstructionPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_ConstrainToTargetPlane.htm" title="ConstrainToTargetPlane Method " tocid="M_Rhino_Input_Custom_GetPoint_ConstrainToTargetPlane">ConstrainToTargetPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_ConstrainToVirtualCPlaneIntersection.htm" title="ConstrainToVirtualCPlaneIntersection Method " tocid="M_Rhino_Input_Custom_GetPoint_ConstrainToVirtualCPlaneIntersection">ConstrainToVirtualCPlaneIntersection Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_DrawLineFromPoint.htm" title="DrawLineFromPoint Method " tocid="M_Rhino_Input_Custom_GetPoint_DrawLineFromPoint">DrawLineFromPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_EnableCurveSnapArrow.htm" title="EnableCurveSnapArrow Method " tocid="M_Rhino_Input_Custom_GetPoint_EnableCurveSnapArrow">EnableCurveSnapArrow Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_EnableCurveSnapPerpBar.htm" title="EnableCurveSnapPerpBar Method " tocid="M_Rhino_Input_Custom_GetPoint_EnableCurveSnapPerpBar">EnableCurveSnapPerpBar Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_EnableCurveSnapTangentBar.htm" title="EnableCurveSnapTangentBar Method " tocid="M_Rhino_Input_Custom_GetPoint_EnableCurveSnapTangentBar">EnableCurveSnapTangentBar Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_EnableDrawLineFromPoint.htm" title="EnableDrawLineFromPoint Method " tocid="M_Rhino_Input_Custom_GetPoint_EnableDrawLineFromPoint">EnableDrawLineFromPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_EnableNoRedrawOnExit.htm" title="EnableNoRedrawOnExit Method " tocid="M_Rhino_Input_Custom_GetPoint_EnableNoRedrawOnExit">EnableNoRedrawOnExit Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_EnableObjectSnapCursors.htm" title="EnableObjectSnapCursors Method " tocid="M_Rhino_Input_Custom_GetPoint_EnableObjectSnapCursors">EnableObjectSnapCursors Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_EnableSnapToCurves.htm" title="EnableSnapToCurves Method " tocid="M_Rhino_Input_Custom_GetPoint_EnableSnapToCurves">EnableSnapToCurves Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_Custom_GetPoint_Get.htm" title="Get Method " tocid="Overload_Rhino_Input_Custom_GetPoint_Get">Get Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_GetConstructionPoints.htm" title="GetConstructionPoints Method " tocid="M_Rhino_Input_Custom_GetPoint_GetConstructionPoints">GetConstructionPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_GetPlanarConstraint.htm" title="GetPlanarConstraint Method " tocid="M_Rhino_Input_Custom_GetPoint_GetPlanarConstraint">GetPlanarConstraint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_GetSnapPoints.htm" title="GetSnapPoints Method " tocid="M_Rhino_Input_Custom_GetPoint_GetSnapPoints">GetSnapPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_InterruptMouseMove.htm" title="InterruptMouseMove Method " tocid="M_Rhino_Input_Custom_GetPoint_InterruptMouseMove">InterruptMouseMove Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_OnDynamicDraw.htm" title="OnDynamicDraw Method " tocid="M_Rhino_Input_Custom_GetPoint_OnDynamicDraw">OnDynamicDraw Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_OnMouseDown.htm" title="OnMouseDown Method " tocid="M_Rhino_Input_Custom_GetPoint_OnMouseDown">OnMouseDown Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_OnMouseMove.htm" title="OnMouseMove Method " tocid="M_Rhino_Input_Custom_GetPoint_OnMouseMove">OnMouseMove Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_OnPostDrawObjects.htm" title="OnPostDrawObjects Method " tocid="M_Rhino_Input_Custom_GetPoint_OnPostDrawObjects">OnPostDrawObjects Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PermitConstraintOptions.htm" title="PermitConstraintOptions Method " tocid="M_Rhino_Input_Custom_GetPoint_PermitConstraintOptions">PermitConstraintOptions Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PermitElevatorMode.htm" title="PermitElevatorMode Method " tocid="M_Rhino_Input_Custom_GetPoint_PermitElevatorMode">PermitElevatorMode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PermitFromOption.htm" title="PermitFromOption Method " tocid="M_Rhino_Input_Custom_GetPoint_PermitFromOption">PermitFromOption Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PermitObjectSnap.htm" title="PermitObjectSnap Method " tocid="M_Rhino_Input_Custom_GetPoint_PermitObjectSnap">PermitObjectSnap Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PermitOrthoSnap.htm" title="PermitOrthoSnap Method " tocid="M_Rhino_Input_Custom_GetPoint_PermitOrthoSnap">PermitOrthoSnap Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PermitTabMode.htm" title="PermitTabMode Method " tocid="M_Rhino_Input_Custom_GetPoint_PermitTabMode">PermitTabMode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PointOnBrep.htm" title="PointOnBrep Method " tocid="M_Rhino_Input_Custom_GetPoint_PointOnBrep">PointOnBrep Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PointOnCurve.htm" title="PointOnCurve Method " tocid="M_Rhino_Input_Custom_GetPoint_PointOnCurve">PointOnCurve Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PointOnObject.htm" title="PointOnObject Method " tocid="M_Rhino_Input_Custom_GetPoint_PointOnObject">PointOnObject Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_PointOnSurface.htm" title="PointOnSurface Method " tocid="M_Rhino_Input_Custom_GetPoint_PointOnSurface">PointOnSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_SetBasePoint.htm" title="SetBasePoint Method " tocid="M_Rhino_Input_Custom_GetPoint_SetBasePoint">SetBasePoint Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_SetCursor.htm" title="SetCursor Method " tocid="M_Rhino_Input_Custom_GetPoint_SetCursor">SetCursor Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_TryGetBasePoint.htm" title="TryGetBasePoint Method " tocid="M_Rhino_Input_Custom_GetPoint_TryGetBasePoint">TryGetBasePoint Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>GetPoint<span id="LST2DA6FD41_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2DA6FD41_0?cpp=::|nu=.");</script>OnDynamicDraw Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">Default calls the DynamicDraw event.</div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="identifier">OnDynamicDraw</span>(
	<span class="identifier">GetPointDrawEventArgs</span> <span class="parameter">e</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Protected</span> <span class="keyword">Overridable</span> <span class="keyword">Sub</span> <span class="identifier">OnDynamicDraw</span> ( 
	<span class="parameter">e</span> <span class="keyword">As</span> <span class="identifier">GetPointDrawEventArgs</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">e</span></dt><dd>Type: <a href="T_Rhino_Input_Custom_GetPointDrawEventArgs.htm">Rhino.Input.Custom<span id="LST2DA6FD41_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST2DA6FD41_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>GetPointDrawEventArgs</a><br />Current argument for the event.</dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','cs','1','2');return false;">C#</a></div><div id="ID0EBBABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBABA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Input.Custom;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> GetPointDynamicDrawCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csGetPointDynamicDraw"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-keyword">var</span> gp = <span class="highlight-keyword">new</span> GetPoint();
      gp.SetCommandPrompt(<span class="highlight-literal">"Center point"</span>);
      gp.Get();
      <span class="highlight-keyword">if</span> (gp.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gp.CommandResult();
      <span class="highlight-keyword">var</span> center_point = gp.Point();
      <span class="highlight-keyword">if</span> (center_point == Point3d.Unset)
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-keyword">var</span> gcp = <span class="highlight-keyword">new</span> GetCircleRadiusPoint(center_point);
      gcp.SetCommandPrompt(<span class="highlight-literal">"Radius"</span>);
      gcp.ConstrainToConstructionPlane(<span class="highlight-keyword">false</span>);
      gcp.SetBasePoint(center_point, <span class="highlight-keyword">true</span>);
      gcp.DrawLineFromPoint(center_point, <span class="highlight-keyword">true</span>);
      gcp.Get();
      <span class="highlight-keyword">if</span> (gcp.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gcp.CommandResult();

      <span class="highlight-keyword">var</span> radius = center_point.DistanceTo(gcp.Point());
      <span class="highlight-keyword">var</span> cplane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane();
      doc.Objects.AddCircle(<span class="highlight-keyword">new</span> Circle(cplane, center_point, radius));
      doc.Views.Redraw();
      <span class="highlight-keyword">return</span> Result.Success;
    }
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> GetCircleRadiusPoint : GetPoint
  {
    <span class="highlight-keyword">private</span> Point3d m_center_point;

    <span class="highlight-keyword">public</span> GetCircleRadiusPoint(Point3d centerPoint)
    {
      m_center_point = centerPoint;
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnDynamicDraw(GetPointDrawEventArgs e)
    {
      <span class="highlight-keyword">base</span>.OnDynamicDraw(e);
      <span class="highlight-keyword">var</span> cplane = e.RhinoDoc.Views.ActiveView.ActiveViewport.ConstructionPlane();
      <span class="highlight-keyword">var</span> radius = m_center_point.DistanceTo(e.CurrentPoint);
      <span class="highlight-keyword">var</span> circle = <span class="highlight-keyword">new</span> Circle(cplane, m_center_point, radius);
      e.Display.DrawCircle(circle, System.Drawing.Color.Black);
    }
  }
}</pre></div><div id="ID0EBBABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Input.Custom

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> GetPointDynamicDrawCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbGetPointDynamicDraw"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> gp = <span class="highlight-keyword">New</span> GetPoint()
      gp.SetCommandPrompt(<span class="highlight-literal">"Center point"</span>)
      gp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> center_point = gp.Point()
      <span class="highlight-keyword">If</span> center_point = Point3d.Unset <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> gcp = <span class="highlight-keyword">New</span> GetCircleRadiusPoint(center_point)
      gcp.SetCommandPrompt(<span class="highlight-literal">"Radius"</span>)
      gcp.ConstrainToConstructionPlane(<span class="highlight-keyword">False</span>)
      gcp.SetBasePoint(center_point, <span class="highlight-keyword">True</span>)
      gcp.DrawLineFromPoint(center_point, <span class="highlight-keyword">True</span>)
      gcp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gcp.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gcp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> radius = center_point.DistanceTo(gcp.Point())
      <span class="highlight-keyword">Dim</span> cplane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane()
      doc.Objects.AddCircle(<span class="highlight-keyword">New</span> Circle(cplane, center_point, radius))
      doc.Views.Redraw()
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>

  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> GetCircleRadiusPoint
    <span class="highlight-keyword">Inherits</span> GetPoint
    <span class="highlight-keyword">Private</span> m_center_point <span class="highlight-keyword">As</span> Point3d

    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>(centerPoint <span class="highlight-keyword">As</span> Point3d)
      m_center_point = centerPoint
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> OnDynamicDraw(e <span class="highlight-keyword">As</span> GetPointDrawEventArgs)
      <span class="highlight-keyword">MyBase</span>.OnDynamicDraw(e)
      <span class="highlight-keyword">Dim</span> cplane = e.RhinoDoc.Views.ActiveView.ActiveViewport.ConstructionPlane()
      <span class="highlight-keyword">Dim</span> radius = m_center_point.DistanceTo(e.CurrentPoint)
      <span class="highlight-keyword">Dim</span> circle = <span class="highlight-keyword">New</span> Circle(cplane, m_center_point, radius)
      e.Display.DrawCircle(circle, System.Drawing.Color.Black)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBABA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> Rhino <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Commands <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input.Custom <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc
<span class="highlight-keyword">from</span> System.Drawing <span class="highlight-keyword">import</span> *

<span class="highlight-keyword">def</span> RunCommand():
  gp = GetPoint()
  gp.SetCommandPrompt(<span class="highlight-literal">"Center point"</span>)
  gp.Get()
  <span class="highlight-keyword">if</span> gp.CommandResult() &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> gp.CommandResult()
  center_point = gp.Point()
  <span class="highlight-keyword">if</span> center_point == Point3d.Unset:
    <span class="highlight-keyword">return</span> Result.Failure

  gcp = GetCircleRadiusPoint(center_point)
  gcp.SetCommandPrompt(<span class="highlight-literal">"Radius"</span>)
  gcp.ConstrainToConstructionPlane(False)
  gcp.SetBasePoint(center_point, True)
  gcp.DrawLineFromPoint(center_point, True)
  gcp.Get()
  <span class="highlight-keyword">if</span> gcp.CommandResult() &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> gcp.CommandResult()

  radius = center_point.DistanceTo(gcp.Point())
  cplane = doc.Views.ActiveView.ActiveViewport.ConstructionPlane()
  doc.Objects.AddCircle(Circle(cplane, center_point, radius))
  doc.Views.Redraw()
  <span class="highlight-keyword">return</span> Result.Success

<span class="highlight-keyword">class</span> GetCircleRadiusPoint (GetPoint):
  <span class="highlight-keyword">def</span> __init__(self, centerPoint):
    self.m_center_point = centerPoint

  <span class="highlight-keyword">def</span> OnDynamicDraw(self, e):
    cplane = e.RhinoDoc.Views.ActiveView.ActiveViewport.ConstructionPlane()
    radius = self.m_center_point.DistanceTo(e.CurrentPoint)
    circle = Circle(cplane, self.m_center_point, radius)
    e.Display.DrawCircle(circle, Color.Black)

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
    RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Input_Custom_GetPoint.htm">GetPoint Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>