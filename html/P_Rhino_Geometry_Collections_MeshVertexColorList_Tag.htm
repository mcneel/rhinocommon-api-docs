<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>MeshVertexColorList.Tag Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Tag property" /><meta name="System.Keywords" content="MeshVertexColorList.Tag property" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Collections.MeshVertexColorList.Tag" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Collections.MeshVertexColorList.get_Tag" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Collections.MeshVertexColorList.set_Tag" /><meta name="Microsoft.Help.Id" content="P:Rhino.Geometry.Collections.MeshVertexColorList.Tag" /><meta name="Description" content="Gets or sets a mapping information for the mesh associated with these vertex colors." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry.Collections" /><meta name="file" content="P_Rhino_Geometry_Collections_MeshVertexColorList_Tag" /><meta name="guid" content="P_Rhino_Geometry_Collections_MeshVertexColorList_Tag" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry_Collections.htm" title="Rhino.Geometry.Collections" tocid="N_Rhino_Geometry_Collections">Rhino.Geometry.Collections</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_Collections_MeshVertexColorList.htm" title="MeshVertexColorList Class" tocid="T_Rhino_Geometry_Collections_MeshVertexColorList">MeshVertexColorList Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_Rhino_Geometry_Collections_MeshVertexColorList.htm" title="MeshVertexColorList Properties" tocid="Properties_T_Rhino_Geometry_Collections_MeshVertexColorList">MeshVertexColorList Properties</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Collections_MeshVertexColorList_Capacity.htm" title="Capacity Property " tocid="P_Rhino_Geometry_Collections_MeshVertexColorList_Capacity">Capacity Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Collections_MeshVertexColorList_Count.htm" title="Count Property " tocid="P_Rhino_Geometry_Collections_MeshVertexColorList_Count">Count Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Collections_MeshVertexColorList_Item.htm" title="Item Property " tocid="P_Rhino_Geometry_Collections_MeshVertexColorList_Item">Item Property </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Geometry_Collections_MeshVertexColorList_Tag.htm" title="Tag Property " tocid="P_Rhino_Geometry_Collections_MeshVertexColorList_Tag">Tag Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>MeshVertexColorList<span id="LST60EEBB46_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST60EEBB46_0?cpp=::|nu=.");</script>Tag Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Gets or sets a mapping information for the mesh associated with these vertex colors.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry_Collections.htm">Rhino.Geometry.Collections</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">MappingTag</span> <span class="identifier">Tag</span> { <span class="keyword">get</span>; <span class="keyword">set</span>; }</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="identifier">Tag</span> <span class="keyword">As</span> <span class="identifier">MappingTag</span>
	<span class="keyword">Get</span>
	<span class="keyword">Set</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="T_Rhino_Render_MappingTag.htm">MappingTag</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBACBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBACBA','cs','1','2');return false;">C#</a></div><div id="ID0EBACBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBACBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBACBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBACBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Geometry;


[System.Runtime.InteropServices.Guid(<span class="highlight-literal">"62dd8eec-5cce-42c7-9d80-8b01fc169b81"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AnalysisModeOnCommand : Rhino.Commands.Command
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"cs_analysismode_on"</span>; } }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)
  {
    <span class="highlight-comment">// make sure our custom visual analysis mode is registered</span>
    <span class="highlight-keyword">var</span> zmode = Rhino.Display.VisualAnalysisMode.Register(<span class="highlight-keyword">typeof</span>(ZAnalysisMode));

    <span class="highlight-keyword">const</span> ObjectType filter = Rhino.DocObjects.ObjectType.Surface | Rhino.DocObjects.ObjectType.PolysrfFilter | Rhino.DocObjects.ObjectType.Mesh;
    Rhino.DocObjects.ObjRef[] objs;
    <span class="highlight-keyword">var</span> rc = Rhino.Input.RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select objects for Z analysis"</span>, <span class="highlight-keyword">false</span>, filter, <span class="highlight-keyword">out</span> objs);
    <span class="highlight-keyword">if</span> (rc != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> rc;

    <span class="highlight-keyword">int</span> count = <span class="highlight-number">0</span>;
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; objs.Length; i++)
    {
      <span class="highlight-keyword">var</span> obj = objs[i].Object();

      <span class="highlight-comment">// see if this object is alreay in Z analysis mode</span>
      <span class="highlight-keyword">if</span> (obj.InVisualAnalysisMode(zmode))
        <span class="highlight-keyword">continue</span>;

      <span class="highlight-keyword">if</span> (obj.EnableVisualAnalysisMode(zmode, <span class="highlight-keyword">true</span>))
        count++;
    }
    doc.Views.Redraw();
    RhinoApp.WriteLine(<span class="highlight-literal">"{0} objects were put into Z-Analysis mode."</span>, count);
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}

[System.Runtime.InteropServices.Guid(<span class="highlight-literal">"0A8CE87D-A8CB-4A41-9DE2-5B3957436AEE"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AnalysisModeOffCommand : Rhino.Commands.Command
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"cs_analysismode_off"</span>; } }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)
  {
    <span class="highlight-keyword">var</span> zmode = Rhino.Display.VisualAnalysisMode.Find(<span class="highlight-keyword">typeof</span>(ZAnalysisMode));
    <span class="highlight-comment">// If zmode is null, we've never registered the mode so we know it hasn't been used</span>
    <span class="highlight-keyword">if</span> (zmode != <span class="highlight-keyword">null</span>)
    {
      <span class="highlight-keyword">foreach</span> (Rhino.DocObjects.RhinoObject obj <span class="highlight-keyword">in</span> doc.Objects)
      {
        obj.EnableVisualAnalysisMode(zmode, <span class="highlight-keyword">false</span>);
      }
      doc.Views.Redraw();
    }
    RhinoApp.WriteLine(<span class="highlight-literal">"Z-Analysis is off."</span>);
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}


<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// This simple example provides a false color based on the world z-coordinate.</span>
<span class="highlight-comment">/// For details, see the implementation of the FalseColor() function.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ZAnalysisMode : Rhino.Display.VisualAnalysisMode
{
  Interval m_z_range = <span class="highlight-keyword">new</span> Interval(<span class="highlight-number">-10</span>,<span class="highlight-number">10</span>);
  Interval m_hue_range = <span class="highlight-keyword">new</span> Interval(<span class="highlight-number">0</span>,<span class="highlight-number">4</span>*Math.PI / <span class="highlight-number">3</span>);
  <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> <span class="highlight-keyword">bool</span> m_show_isocurves = <span class="highlight-keyword">true</span>;

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> Name { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"Z-Analysis"</span>; } }
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> Rhino.Display.VisualAnalysisMode.AnalysisStyle Style { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> AnalysisStyle.FalseColor; } }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">bool</span> ObjectSupportsAnalysisMode(Rhino.DocObjects.RhinoObject obj)
  {
    <span class="highlight-keyword">if</span> (obj <span class="highlight-keyword">is</span> Rhino.DocObjects.MeshObject || obj <span class="highlight-keyword">is</span> Rhino.DocObjects.BrepObject)
      <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
  }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> UpdateVertexColors(Rhino.DocObjects.RhinoObject obj, Mesh[] meshes)
  {
    <span class="highlight-comment">// A "mapping tag" is used to determine if the colors need to be set</span>
    Rhino.Render.MappingTag mt = GetMappingTag(obj.RuntimeSerialNumber);

    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> mi = <span class="highlight-number">0</span>; mi &lt; meshes.Length; mi++)
    {
      <span class="highlight-keyword">var</span> mesh = meshes[mi];
      <span class="highlight-keyword">if</span>( mesh.VertexColors.Tag.Id != <span class="highlight-keyword">this</span>.Id )
      {
        <span class="highlight-comment">// The mesh's mapping tag is different from ours. Either the mesh has</span>
        <span class="highlight-comment">// no false colors, has false colors set by another analysis mode, has</span>
        <span class="highlight-comment">// false colors set using different m_z_range[]/m_hue_range[] values, or</span>
        <span class="highlight-comment">// the mesh has been moved.  In any case, we need to set the false</span>
        <span class="highlight-comment">// colors to the ones we want.</span>
        System.Drawing.Color[] colors = <span class="highlight-keyword">new</span> System.Drawing.Color[mesh.Vertices.Count];
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; mesh.Vertices.Count; i++)
        {
          <span class="highlight-keyword">double</span> z = mesh.Vertices[i].Z;
          colors[i] = FalseColor(z);
        }
        mesh.VertexColors.SetColors(colors);
        <span class="highlight-comment">// set the mesh's color tag </span>
        mesh.VertexColors.Tag = mt;
      }
    }
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">bool</span> ShowIsoCurves
  {
    <span class="highlight-keyword">get</span>
    {
      <span class="highlight-comment">// Most shaded analysis modes that work on breps have the option of</span>
      <span class="highlight-comment">// showing or hiding isocurves.  Run the built-in Rhino ZebraAnalysis</span>
      <span class="highlight-comment">// to see how Rhino handles the user interface.  If controlling</span>
      <span class="highlight-comment">// iso-curve visability is a feature you want to support, then provide</span>
      <span class="highlight-comment">// user interface to set this member variable.</span>
      <span class="highlight-keyword">return</span> m_show_isocurves; 
    }
  }

  <span class="highlight-comment">/// &lt;summary&gt;</span>
  <span class="highlight-comment">/// Returns a mapping tag that is used to detect when a mesh's colors need to</span>
  <span class="highlight-comment">/// be set.</span>
  <span class="highlight-comment">/// &lt;/summary&gt;</span>
  <span class="highlight-comment">/// &lt;returns&gt;&lt;/returns&gt;</span>
  Rhino.Render.MappingTag GetMappingTag(<span class="highlight-keyword">uint</span> serialNumber)
  {
    Rhino.Render.MappingTag mt = <span class="highlight-keyword">new</span> Rhino.Render.MappingTag();
    mt.Id = <span class="highlight-keyword">this</span>.Id;

    <span class="highlight-comment">// Since the false colors that are shown will change if the mesh is</span>
    <span class="highlight-comment">// transformed, we have to initialize the transformation.</span>
    mt.MeshTransform = Transform.Identity;

    <span class="highlight-comment">// This is a 32 bit CRC or the information used to set the false colors.</span>
    <span class="highlight-comment">// For this example, the m_z_range and m_hue_range intervals control the</span>
    <span class="highlight-comment">// colors, so we calculate their crc.</span>
    <span class="highlight-keyword">uint</span> crc = RhinoMath.CRC32(serialNumber, m_z_range.T0);
    crc = RhinoMath.CRC32(crc, m_z_range.T1);
    crc = RhinoMath.CRC32(crc, m_hue_range.T0);
    crc = RhinoMath.CRC32(crc, m_hue_range.T1);
    mt.MappingCRC = crc;
    <span class="highlight-keyword">return</span> mt;
  }

  System.Drawing.Color FalseColor(<span class="highlight-keyword">double</span> z)
  {
    <span class="highlight-comment">// Simple example of one way to change a number into a color.</span>
    <span class="highlight-keyword">double</span> s = m_z_range.NormalizedParameterAt(z);
    s = Rhino.RhinoMath.Clamp(s, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>);
    <span class="highlight-keyword">return</span> System.Drawing.Color.FromArgb((<span class="highlight-keyword">int</span>)(s * <span class="highlight-number">255</span>), <span class="highlight-number">0</span>, <span class="highlight-number">0</span>);
  }

}</pre></div><div id="ID0EBACBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Geometry


&lt;System.Runtime.InteropServices.Guid(<span class="highlight-literal">"62dd8eec-5cce-42c7-9d80-8b01fc169b81"</span>)&gt; _
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> AnalysisModeOnCommand
  <span class="highlight-keyword">Inherits</span> Rhino.Commands.Command
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
    <span class="highlight-keyword">Get</span>
      <span class="highlight-keyword">Return</span> <span class="highlight-literal">"cs_analysismode_on"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

  <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> Rhino.Commands.RunMode) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' make sure our custom visual analysis mode is registered</span>
    <span class="highlight-keyword">Dim</span> zmode = Rhino.Display.VisualAnalysisMode.Register(<span class="highlight-keyword">GetType</span>(ZAnalysisMode))

    <span class="highlight-keyword">Const</span> filter <span class="highlight-keyword">As</span> ObjectType = Rhino.DocObjects.ObjectType.Surface <span class="highlight-keyword">Or</span> Rhino.DocObjects.ObjectType.PolysrfFilter <span class="highlight-keyword">Or</span> Rhino.DocObjects.ObjectType.Mesh
    <span class="highlight-keyword">Dim</span> objs <span class="highlight-keyword">As</span> Rhino.DocObjects.ObjRef() = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">Dim</span> rc = Rhino.Input.RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select objects for Z analysis"</span>, <span class="highlight-keyword">False</span>, filter, objs)
    <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> rc
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> count <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> objs.Length - <span class="highlight-number">1</span>
      <span class="highlight-keyword">Dim</span> obj = objs(i).[<span class="highlight-keyword">Object</span>]()

      <span class="highlight-comment">' see if this object is alreay in Z analysis mode</span>
      <span class="highlight-keyword">If</span> obj.InVisualAnalysisMode(zmode) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">If</span> obj.EnableVisualAnalysisMode(zmode, <span class="highlight-keyword">True</span>) <span class="highlight-keyword">Then</span>
        count += <span class="highlight-number">1</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>
    doc.Views.Redraw()
    RhinoApp.WriteLine(<span class="highlight-literal">"{0} objects were put into Z-Analysis mode."</span>, count)
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>

&lt;System.Runtime.InteropServices.Guid(<span class="highlight-literal">"0A8CE87D-A8CB-4A41-9DE2-5B3957436AEE"</span>)&gt; _
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> AnalysisModeOffCommand
  <span class="highlight-keyword">Inherits</span> Rhino.Commands.Command
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
    <span class="highlight-keyword">Get</span>
      <span class="highlight-keyword">Return</span> <span class="highlight-literal">"cs_analysismode_off"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

  <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> Rhino.Commands.RunMode) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> zmode = Rhino.Display.VisualAnalysisMode.Find(<span class="highlight-keyword">GetType</span>(ZAnalysisMode))
    <span class="highlight-comment">' If zmode is null, we've never registered the mode so we know it hasn't been used</span>
    <span class="highlight-keyword">If</span> zmode <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> obj <span class="highlight-keyword">As</span> Rhino.DocObjects.RhinoObject <span class="highlight-keyword">In</span> doc.Objects
        obj.EnableVisualAnalysisMode(zmode, <span class="highlight-keyword">False</span>)
      <span class="highlight-keyword">Next</span>
      doc.Views.Redraw()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    RhinoApp.WriteLine(<span class="highlight-literal">"Z-Analysis is off."</span>)
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>


<span class="highlight-comment">''' &lt;summary&gt;</span>
<span class="highlight-comment">''' This simple example provides a false color based on the world z-coordinate.</span>
<span class="highlight-comment">''' For details, see the implementation of the FalseColor() function.</span>
<span class="highlight-comment">''' &lt;/summary&gt;</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> ZAnalysisMode
  <span class="highlight-keyword">Inherits</span> Rhino.Display.VisualAnalysisMode
  <span class="highlight-keyword">Private</span> m_z_range <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Interval(<span class="highlight-number">-10</span>, <span class="highlight-number">10</span>)
  <span class="highlight-keyword">Private</span> m_hue_range <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Interval(<span class="highlight-number">0</span>, <span class="highlight-number">4</span> * Math.PI / <span class="highlight-number">3</span>)
  <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> m_show_isocurves <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">True</span>

  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> Name() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
    <span class="highlight-keyword">Get</span>
      <span class="highlight-keyword">Return</span> <span class="highlight-literal">"Z-Analysis"</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> Style() <span class="highlight-keyword">As</span> Rhino.Display.VisualAnalysisMode.AnalysisStyle
    <span class="highlight-keyword">Get</span>
      <span class="highlight-keyword">Return</span> AnalysisStyle.FalseColor
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> ObjectSupportsAnalysisMode(obj <span class="highlight-keyword">As</span> Rhino.DocObjects.RhinoObject) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> obj <span class="highlight-keyword">Is</span> Rhino.DocObjects.MeshObject <span class="highlight-keyword">OrElse</span> <span class="highlight-keyword">TypeOf</span> obj <span class="highlight-keyword">Is</span> Rhino.DocObjects.BrepObject <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> <span class="highlight-keyword">True</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">False</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

  <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> UpdateVertexColors(obj <span class="highlight-keyword">As</span> Rhino.DocObjects.RhinoObject, meshes <span class="highlight-keyword">As</span> Mesh())
    <span class="highlight-comment">' A "mapping tag" is used to determine if the colors need to be set</span>
    <span class="highlight-keyword">Dim</span> mt <span class="highlight-keyword">As</span> Rhino.Render.MappingTag = GetMappingTag(obj.RuntimeSerialNumber)

    <span class="highlight-keyword">For</span> mi <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> meshes.Length - <span class="highlight-number">1</span>
      <span class="highlight-keyword">Dim</span> mesh = meshes(mi)
      <span class="highlight-keyword">If</span> mesh.VertexColors.Tag.Id &lt;&gt; <span class="highlight-keyword">Me</span>.Id <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' The mesh's mapping tag is different from ours. Either the mesh has</span>
        <span class="highlight-comment">' no false colors, has false colors set by another analysis mode, has</span>
        <span class="highlight-comment">' false colors set using different m_z_range[]/m_hue_range[] values, or</span>
        <span class="highlight-comment">' the mesh has been moved.  In any case, we need to set the false</span>
        <span class="highlight-comment">' colors to the ones we want.</span>
        <span class="highlight-keyword">Dim</span> colors <span class="highlight-keyword">As</span> System.Drawing.Color() = <span class="highlight-keyword">New</span> System.Drawing.Color(mesh.Vertices.Count - <span class="highlight-number">1</span>) {}
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> mesh.Vertices.Count - <span class="highlight-number">1</span>
          <span class="highlight-keyword">Dim</span> z <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = mesh.Vertices(i).Z
          colors(i) = FalseColor(z)
        <span class="highlight-keyword">Next</span>
        mesh.VertexColors.SetColors(colors)
        <span class="highlight-comment">' set the mesh's color tag </span>
        mesh.VertexColors.Tag = mt
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> ShowIsoCurves() <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
    <span class="highlight-keyword">Get</span>
      <span class="highlight-comment">' Most shaded analysis modes that work on breps have the option of</span>
      <span class="highlight-comment">' showing or hiding isocurves.  Run the built-in Rhino ZebraAnalysis</span>
      <span class="highlight-comment">' to see how Rhino handles the user interface.  If controlling</span>
      <span class="highlight-comment">' iso-curve visability is a feature you want to support, then provide</span>
      <span class="highlight-comment">' user interface to set this member variable.</span>
      <span class="highlight-keyword">Return</span> m_show_isocurves
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

  <span class="highlight-comment">''' &lt;summary&gt;</span>
  <span class="highlight-comment">''' Returns a mapping tag that is used to detect when a mesh's colors need to</span>
  <span class="highlight-comment">''' be set.</span>
  <span class="highlight-comment">''' &lt;/summary&gt;</span>
  <span class="highlight-comment">''' &lt;returns&gt;&lt;/returns&gt;</span>
  <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> GetMappingTag(serialNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">UInteger</span>) <span class="highlight-keyword">As</span> Rhino.Render.MappingTag
    <span class="highlight-keyword">Dim</span> mt <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Render.MappingTag()
    mt.Id = <span class="highlight-keyword">Me</span>.Id

    <span class="highlight-comment">' Since the false colors that are shown will change if the mesh is</span>
    <span class="highlight-comment">' transformed, we have to initialize the transformation.</span>
    mt.MeshTransform = Transform.Identity

    <span class="highlight-comment">' This is a 32 bit CRC or the information used to set the false colors.</span>
    <span class="highlight-comment">' For this example, the m_z_range and m_hue_range intervals control the</span>
    <span class="highlight-comment">' colors, so we calculate their crc.</span>
    <span class="highlight-keyword">Dim</span> crc <span class="highlight-keyword">As</span> <span class="highlight-keyword">UInteger</span> = RhinoMath.CRC32(serialNumber, m_z_range.T0)
    crc = RhinoMath.CRC32(crc, m_z_range.T1)
    crc = RhinoMath.CRC32(crc, m_hue_range.T0)
    crc = RhinoMath.CRC32(crc, m_hue_range.T1)
    mt.MappingCRC = crc
    <span class="highlight-keyword">Return</span> mt
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

  <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> FalseColor(z <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>) <span class="highlight-keyword">As</span> System.Drawing.Color
    <span class="highlight-comment">' Simple example of one way to change a number into a color.</span>
    <span class="highlight-keyword">Dim</span> s <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = m_z_range.NormalizedParameterAt(z)
    s = Rhino.RhinoMath.Clamp(s, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>)
    <span class="highlight-keyword">Return</span> System.Drawing.Color.FromArgb(<span class="highlight-keyword">CInt</span>(Math.Truncate(s * <span class="highlight-number">255</span>)), <span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBACBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Collections_MeshVertexColorList.htm">MeshVertexColorList Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry_Collections.htm">Rhino.Geometry.Collections Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>