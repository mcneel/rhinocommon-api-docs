<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>HatchPatternTable.Find Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Find method" /><meta name="System.Keywords" content="HatchPatternTable.Find method" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.Tables.HatchPatternTable.Find" /><meta name="Microsoft.Help.Id" content="M:Rhino.DocObjects.Tables.HatchPatternTable.Find(System.String,System.Boolean)" /><meta name="Description" content="Finds the hatch pattern with a given name. Search ignores case." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.DocObjects.Tables" /><meta name="file" content="M_Rhino_DocObjects_Tables_HatchPatternTable_Find" /><meta name="guid" content="M_Rhino_DocObjects_Tables_HatchPatternTable_Find" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_DocObjects_Tables.htm" title="Rhino.DocObjects.Tables" tocid="N_Rhino_DocObjects_Tables">Rhino.DocObjects.Tables</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_DocObjects_Tables_HatchPatternTable.htm" title="HatchPatternTable Class" tocid="T_Rhino_DocObjects_Tables_HatchPatternTable">HatchPatternTable Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_DocObjects_Tables_HatchPatternTable.htm" title="HatchPatternTable Methods" tocid="Methods_T_Rhino_DocObjects_Tables_HatchPatternTable">HatchPatternTable Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_Tables_HatchPatternTable_Add.htm" title="Add Method " tocid="M_Rhino_DocObjects_Tables_HatchPatternTable_Add">Add Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_DocObjects_Tables_HatchPatternTable_Delete.htm" title="Delete Method " tocid="Overload_Rhino_DocObjects_Tables_HatchPatternTable_Delete">Delete Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_Tables_HatchPatternTable_Find.htm" title="Find Method " tocid="M_Rhino_DocObjects_Tables_HatchPatternTable_Find">Find Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_Tables_HatchPatternTable_FindIndex.htm" title="FindIndex Method " tocid="M_Rhino_DocObjects_Tables_HatchPatternTable_FindIndex">FindIndex Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_Tables_HatchPatternTable_FindName.htm" title="FindName Method " tocid="M_Rhino_DocObjects_Tables_HatchPatternTable_FindName">FindName Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_DocObjects_Tables_HatchPatternTable_FindNameHash.htm" title="FindNameHash Method " tocid="M_Rhino_DocObjects_Tables_HatchPatternTable_FindNameHash">FindNameHash Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_DocObjects_Tables_HatchPatternTable_Rename.htm" title="Rename Method " tocid="Overload_Rhino_DocObjects_Tables_HatchPatternTable_Rename">Rename Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>HatchPatternTable<span id="LST1B6DF1D9_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1B6DF1D9_0?cpp=::|nu=.");</script>Find Method </h1></td></tr></table><span class="introStyle"></span> <p><strong>Note: This API is now obsolete.</strong></p><div class="summary">
            Finds the hatch pattern with a given name. Search ignores case.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_DocObjects_Tables.htm">Rhino.DocObjects.Tables</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">ObsoleteAttribute</span>("ignoreDeleted is now ignored. Items are removed permanently now. Use FindName.")]
<span class="keyword">public</span> <span class="identifier">int</span> <span class="identifier">Find</span>(
	<span class="identifier">string</span> <span class="parameter">name</span>,
	<span class="identifier">bool</span> <span class="parameter">ignoreDeleted</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">ObsoleteAttribute</span>("ignoreDeleted is now ignored. Items are removed permanently now. Use FindName.")&gt;
<span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">Find</span> ( 
	<span class="parameter">name</span> <span class="keyword">As</span> <span class="identifier">String</span>,
	<span class="parameter">ignoreDeleted</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>
) <span class="keyword">As</span> <span class="identifier">Integer</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">name</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.string" target="_blank">System<span id="LST1B6DF1D9_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1B6DF1D9_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br />The name of the hatch patter to be found.</dd><dt><span class="parameter">ignoreDeleted</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank">System<span id="LST1B6DF1D9_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1B6DF1D9_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Boolean</a><br />true means don't search deleted hatch patterns.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">Int32</a><br />Index of the hatch pattern with the given name. -1 if no hatch pattern found.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBCBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBCBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBCBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result HatchCurve(Rhino.RhinoDoc doc)
  {
    <span class="highlight-keyword">var</span> go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    go.SetCommandPrompt(<span class="highlight-literal">"Select closed planar curve"</span>);
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;
    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve;
    go.SubObjectSelect = <span class="highlight-keyword">false</span>;
    go.Get();
    <span class="highlight-keyword">if</span>( go.CommandResult() != Rhino.Commands.Result.Success )
      <span class="highlight-keyword">return</span> go.CommandResult();

    <span class="highlight-keyword">var</span> curve = go.Object(<span class="highlight-number">0</span>).Curve();
    <span class="highlight-keyword">if</span>( curve==<span class="highlight-keyword">null</span> || !curve.IsClosed || !curve.IsPlanar() )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    <span class="highlight-keyword">string</span> hatch_name = doc.HatchPatterns[doc.HatchPatterns.CurrentHatchPatternIndex].Name;
    <span class="highlight-keyword">var</span> rc = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Hatch pattern"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> hatch_name);
    <span class="highlight-keyword">if</span>( rc!= Rhino.Commands.Result.Success )
      <span class="highlight-keyword">return</span> rc;
    hatch_name = hatch_name.Trim();
    <span class="highlight-keyword">if</span>( <span class="highlight-keyword">string</span>.IsNullOrWhiteSpace(hatch_name) )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    <span class="highlight-keyword">int</span> index = doc.HatchPatterns.Find(hatch_name, <span class="highlight-keyword">true</span>);
    <span class="highlight-keyword">if</span>( index &lt; <span class="highlight-number">0</span> )
    {
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Hatch pattern does not exist."</span>);
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Nothing;
    }

    <span class="highlight-keyword">var</span> hatches = Rhino.Geometry.Hatch.Create( curve, index, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>);
    <span class="highlight-keyword">for</span>( <span class="highlight-keyword">int</span> i=<span class="highlight-number">0</span>; i&lt;hatches.Length; i++ )
      doc.Objects.AddHatch(hatches[i]);
    <span class="highlight-keyword">if</span>( hatches.Length&gt;<span class="highlight-number">0</span> )
      doc.Views.Redraw();
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBCBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> HatchCurve(doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-keyword">Dim</span> go = <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select closed planar curve"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GeometryAttributeFilter = Rhino.Input.[Custom].GeometryAttributeFilter.ClosedCurve
    go.SubObjectSelect = <span class="highlight-keyword">False</span>
    go.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> curve = go.<span class="highlight-keyword">Object</span>(<span class="highlight-number">0</span>).Curve()
    <span class="highlight-keyword">If</span> curve <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> <span class="highlight-keyword">Not</span> curve.IsClosed <span class="highlight-keyword">OrElse</span> <span class="highlight-keyword">Not</span> curve.IsPlanar() <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> hatch_name <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = doc.HatchPatterns(doc.HatchPatterns.CurrentHatchPatternIndex).Name
    <span class="highlight-keyword">Dim</span> rc = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Hatch pattern"</span>, <span class="highlight-keyword">True</span>, hatch_name)
    <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> rc
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    hatch_name = hatch_name.Trim()
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">String</span>.IsNullOrWhiteSpace(hatch_name) <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.<span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Dim</span> index <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = doc.HatchPatterns.Find(hatch_name, <span class="highlight-keyword">True</span>)
    <span class="highlight-keyword">If</span> index &lt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Hatch pattern does not exist."</span>)
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.<span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> hatches = Rhino.Geometry.Hatch.Create(curve, index, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>)
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> hatches.Length - <span class="highlight-number">1</span>
      doc.Objects.AddHatch(hatches(i))
    <span class="highlight-keyword">Next</span>
    <span class="highlight-keyword">If</span> hatches.Length &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
      doc.Views.Redraw()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBCBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAACBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAACBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> HatchCurve():
    go = Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select closed planar curve"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GeometryAttributeFilter = Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve
    go.SubObjectSelect = False
    go.Get()
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success: <span class="highlight-keyword">return</span>

    curve = go.Object(<span class="highlight-number">0</span>).Curve()
    <span class="highlight-keyword">if</span> (<span class="highlight-keyword">not</span> curve <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> curve.IsClosed <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> curve.IsPlanar()): <span class="highlight-keyword">return</span>

    hatch_name = scriptcontext.doc.HatchPatterns[scriptcontext.doc.HatchPatterns.CurrentHatchPatternIndex].Name
    rc, hatch_name = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Hatch pattern"</span>, True, hatch_name)
    <span class="highlight-keyword">if</span> rc!=Rhino.Commands.Result.Success <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> hatch_name: <span class="highlight-keyword">return</span>

    index = scriptcontext.doc.HatchPatterns.Find(hatch_name, True)
    <span class="highlight-keyword">if</span> index&lt;<span class="highlight-number">0</span>:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"Hatch pattern does not exist."</span>
        <span class="highlight-keyword">return</span>

    hatches = Rhino.Geometry.Hatch.Create(curve, index, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>)
    <span class="highlight-keyword">for</span> hatch <span class="highlight-keyword">in</span> hatches:
        scriptcontext.doc.Objects.AddHatch(hatch)
    <span class="highlight-keyword">if</span> hatches: scriptcontext.doc.Views.Redraw()

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    HatchCurve()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_DocObjects_Tables_HatchPatternTable.htm">HatchPatternTable Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_DocObjects_Tables.htm">Rhino.DocObjects.Tables Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.16.22067.13000 (Last updated: 3/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>