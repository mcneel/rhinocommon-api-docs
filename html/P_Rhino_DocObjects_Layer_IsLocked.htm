<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Layer.IsLocked Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="IsLocked property" /><meta name="System.Keywords" content="Layer.IsLocked property" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.Layer.IsLocked" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.Layer.get_IsLocked" /><meta name="Microsoft.Help.F1" content="Rhino.DocObjects.Layer.set_IsLocked" /><meta name="Microsoft.Help.Id" content="P:Rhino.DocObjects.Layer.IsLocked" /><meta name="Description" content="Gets or sets a value indicating the locked state of this layer." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.DocObjects" /><meta name="file" content="P_Rhino_DocObjects_Layer_IsLocked" /><meta name="guid" content="P_Rhino_DocObjects_Layer_IsLocked" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_DocObjects.htm" title="Rhino.DocObjects" tocid="N_Rhino_DocObjects">Rhino.DocObjects</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_DocObjects_Layer.htm" title="Layer Class" tocid="T_Rhino_DocObjects_Layer">Layer Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_Rhino_DocObjects_Layer.htm" title="Layer Properties" tocid="Properties_T_Rhino_DocObjects_Layer">Layer Properties</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_Color.htm" title="Color Property " tocid="P_Rhino_DocObjects_Layer_Color">Color Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_ComponentStatus.htm" title="ComponentStatus Property " tocid="P_Rhino_DocObjects_Layer_ComponentStatus">ComponentStatus Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_ComponentType.htm" title="ComponentType Property " tocid="P_Rhino_DocObjects_Layer_ComponentType">ComponentType Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_FullPath.htm" title="FullPath Property " tocid="P_Rhino_DocObjects_Layer_FullPath">FullPath Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_Id.htm" title="Id Property " tocid="P_Rhino_DocObjects_Layer_Id">Id Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_IgesLevel.htm" title="IgesLevel Property " tocid="P_Rhino_DocObjects_Layer_IgesLevel">IgesLevel Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_IsDeleted.htm" title="IsDeleted Property " tocid="P_Rhino_DocObjects_Layer_IsDeleted">IsDeleted Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_IsExpanded.htm" title="IsExpanded Property " tocid="P_Rhino_DocObjects_Layer_IsExpanded">IsExpanded Property </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_IsLocked.htm" title="IsLocked Property " tocid="P_Rhino_DocObjects_Layer_IsLocked">IsLocked Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_IsReference.htm" title="IsReference Property " tocid="P_Rhino_DocObjects_Layer_IsReference">IsReference Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_IsVisible.htm" title="IsVisible Property " tocid="P_Rhino_DocObjects_Layer_IsVisible">IsVisible Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_LayerIndex.htm" title="LayerIndex Property " tocid="P_Rhino_DocObjects_Layer_LayerIndex">LayerIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_LinetypeIndex.htm" title="LinetypeIndex Property " tocid="P_Rhino_DocObjects_Layer_LinetypeIndex">LinetypeIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_Name.htm" title="Name Property " tocid="P_Rhino_DocObjects_Layer_Name">Name Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_ParentLayerId.htm" title="ParentLayerId Property " tocid="P_Rhino_DocObjects_Layer_ParentLayerId">ParentLayerId Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_PathSeparator.htm" title="PathSeparator Property " tocid="P_Rhino_DocObjects_Layer_PathSeparator">PathSeparator Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_PlotColor.htm" title="PlotColor Property " tocid="P_Rhino_DocObjects_Layer_PlotColor">PlotColor Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_PlotWeight.htm" title="PlotWeight Property " tocid="P_Rhino_DocObjects_Layer_PlotWeight">PlotWeight Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_RenderMaterial.htm" title="RenderMaterial Property " tocid="P_Rhino_DocObjects_Layer_RenderMaterial">RenderMaterial Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_RenderMaterialIndex.htm" title="RenderMaterialIndex Property " tocid="P_Rhino_DocObjects_Layer_RenderMaterialIndex">RenderMaterialIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_SortIndex.htm" title="SortIndex Property " tocid="P_Rhino_DocObjects_Layer_SortIndex">SortIndex Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_DocObjects_Layer_UserStringCount.htm" title="UserStringCount Property " tocid="P_Rhino_DocObjects_Layer_UserStringCount">UserStringCount Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Layer<span id="LST9BD9F6BC_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST9BD9F6BC_0?cpp=::|nu=.");</script>IsLocked Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Gets or sets a value indicating the locked state of this layer.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_DocObjects.htm">Rhino.DocObjects</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">bool</span> <span class="identifier">IsLocked</span> { <span class="keyword">get</span>; <span class="keyword">set</span>; }</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="identifier">IsLocked</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>
	<span class="keyword">Get</span>
	<span class="keyword">Set</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank">Boolean</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Linq;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> LockLayerCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csLockLayer"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-keyword">string</span> layer_name = <span class="highlight-literal">""</span>;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetString(<span class="highlight-literal">"Name of layer to lock"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> layer_name);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">if</span> (String.IsNullOrWhiteSpace(layer_name))
        <span class="highlight-keyword">return</span> Result.Nothing;

      <span class="highlight-comment">// because of sublayers it's possible that mone than one layer has the same name</span>
      <span class="highlight-comment">// so simply calling doc.Layers.Find(layerName) isn't good enough.  If "layerName" returns</span>
      <span class="highlight-comment">// more than one layer then present them to the user and let him decide.</span>
      <span class="highlight-keyword">var</span> matching_layers = (<span class="highlight-keyword">from</span> layer <span class="highlight-keyword">in</span> doc.Layers
                             <span class="highlight-keyword">where</span> layer.Name == layer_name
                             <span class="highlight-keyword">select</span> layer).ToList&lt;Rhino.DocObjects.Layer&gt;();

      Rhino.DocObjects.Layer layer_to_lock = <span class="highlight-keyword">null</span>;
      <span class="highlight-keyword">if</span> (matching_layers.Count == <span class="highlight-number">0</span>)
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Layer '{0}' does not exist."</span>, layer_name);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }
      <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (matching_layers.Count == <span class="highlight-number">1</span>)
      {
        layer_to_lock = matching_layers[<span class="highlight-number">0</span>];
      }
      <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (matching_layers.Count &gt; <span class="highlight-number">1</span>)
      {
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; matching_layers.Count; i++)
        {
          RhinoApp.WriteLine(<span class="highlight-literal">"({0}) {1}"</span>, i<span class="highlight-number">+1</span>, matching_layers[i].FullPath.Replace(<span class="highlight-literal">"::"</span>, <span class="highlight-literal">"-&gt;"</span>));
        }
        <span class="highlight-keyword">int</span> selected_layer = <span class="highlight-number">-1</span>;
        rc = RhinoGet.GetInteger(<span class="highlight-literal">"which layer?"</span>, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">ref</span> selected_layer);
        <span class="highlight-keyword">if</span> (rc != Result.Success)
          <span class="highlight-keyword">return</span> rc;
        <span class="highlight-keyword">if</span> (selected_layer &gt; <span class="highlight-number">0</span> &amp;&amp; selected_layer &lt;= matching_layers.Count)
          layer_to_lock = matching_layers[selected_layer - <span class="highlight-number">1</span>];
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-keyword">if</span> (layer_to_lock == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Nothing;

      <span class="highlight-keyword">if</span> (!layer_to_lock.IsLocked)
      {
        layer_to_lock.IsLocked = <span class="highlight-keyword">true</span>;
        layer_to_lock.CommitChanges();
        <span class="highlight-keyword">return</span> Result.Success;
      }
      <span class="highlight-keyword">else</span>
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"layer {0} is already locked."</span>, layer_to_lock.FullPath);
        <span class="highlight-keyword">return</span> Result.Nothing;
      } 
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> System.Linq

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> LockLayerCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbLockLayer"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> layerName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">""</span>
      <span class="highlight-keyword">Dim</span> rc = Rhino.Input.RhinoGet.GetString(<span class="highlight-literal">"Name of layer to lock"</span>, <span class="highlight-keyword">True</span>, layerName)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> [<span class="highlight-keyword">String</span>].IsNullOrWhiteSpace(layerName) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">' because of sublayers it's possible that mone than one layer has the same name</span>
      <span class="highlight-comment">' so simply calling doc.Layers.Find(layerName) isn't good enough.  If "layerName" returns</span>
      <span class="highlight-comment">' more than one layer then present them to the user and let him decide.</span>
      <span class="highlight-keyword">Dim</span> matchingLayers = (From layer <span class="highlight-keyword">In</span> doc.Layers Where layer.Name = layerName <span class="highlight-keyword">Select</span> layer).ToList()

      <span class="highlight-keyword">Dim</span> layerToLock <span class="highlight-keyword">As</span> Rhino.DocObjects.Layer = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">If</span> matchingLayers.Count = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine([<span class="highlight-keyword">String</span>].Format(<span class="highlight-literal">"Layer "</span><span class="highlight-literal">"{0}"</span><span class="highlight-literal">" does not exist."</span>, layerName))
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">ElseIf</span> matchingLayers.Count = <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
        layerToLock = matchingLayers(<span class="highlight-number">0</span>)
      <span class="highlight-keyword">ElseIf</span> matchingLayers.Count &gt; <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> matchingLayers.Count - <span class="highlight-number">1</span>
          RhinoApp.WriteLine([<span class="highlight-keyword">String</span>].Format(<span class="highlight-literal">"({0}) {1}"</span>, i + <span class="highlight-number">1</span>, matchingLayers(i).FullPath.Replace(<span class="highlight-literal">"::"</span>, <span class="highlight-literal">"-&gt;"</span>)))
        <span class="highlight-keyword">Next</span>
        <span class="highlight-keyword">Dim</span> selectedLayer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">-1</span>
        rc = Rhino.Input.RhinoGet.GetInteger(<span class="highlight-literal">"which layer?"</span>, <span class="highlight-keyword">True</span>, selectedLayer)
        <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
          <span class="highlight-keyword">Return</span> rc
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">If</span> selectedLayer &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">AndAlso</span> selectedLayer &lt;= matchingLayers.Count <span class="highlight-keyword">Then</span>
          layerToLock = matchingLayers(selectedLayer - <span class="highlight-number">1</span>)
        <span class="highlight-keyword">Else</span>
          <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">If</span> layerToLock <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.<span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> layerToLock.IsLocked <span class="highlight-keyword">Then</span>
        layerToLock.IsLocked = <span class="highlight-keyword">True</span>
        layerToLock.CommitChanges()
        <span class="highlight-keyword">Return</span> Result.Success
      <span class="highlight-keyword">Else</span>
        RhinoApp.WriteLine([<span class="highlight-keyword">String</span>].Format(<span class="highlight-literal">"layer {0} is already locked."</span>, layerToLock.FullPath))
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> lock():
    layerName = rs.GetString(<span class="highlight-literal">"Name of layer to lock"</span>)

    matchingLayers = [layer <span class="highlight-keyword">for</span> layer <span class="highlight-keyword">in</span> doc.Layers <span class="highlight-keyword">if</span> layer.Name == layerName]

    layerToLock = None
    <span class="highlight-keyword">if</span> len(matchingLayers) == <span class="highlight-number">0</span>:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"Layer \"{0}\" does not exist."</span>.format(layerName)
    <span class="highlight-keyword">elif</span> len(matchingLayers) == <span class="highlight-number">1</span>:
        layerToLock = matchingLayers[<span class="highlight-number">0</span>]
    <span class="highlight-keyword">elif</span> len(matchingLayers) &gt; <span class="highlight-number">1</span>:
        i = <span class="highlight-number">0</span>;
        <span class="highlight-keyword">for</span> layer <span class="highlight-keyword">in</span> matchingLayers:
            <span class="highlight-keyword">print</span> <span class="highlight-literal">"({0}) {1}"</span>.format(i<span class="highlight-number">+1</span>, matchingLayers[i].FullPath.replace(<span class="highlight-literal">"::"</span>, <span class="highlight-literal">"-&gt;"</span>))
            i += <span class="highlight-number">1</span>

        selectedLayer = rs.GetInteger(<span class="highlight-literal">"which layer?"</span>, <span class="highlight-number">-1</span>, <span class="highlight-number">1</span>, len(matchingLayers))
        <span class="highlight-keyword">if</span> selectedLayer == None:
            <span class="highlight-keyword">return</span>
        layerToLock = matchingLayers[selectedLayer - <span class="highlight-number">1</span>]

    <span class="highlight-keyword">if</span> layerToLock.IsLocked:
        <span class="highlight-keyword">print</span> <span class="highlight-literal">"layer {0} is already locked."</span>.format(layerToLock.FullPath)
    <span class="highlight-keyword">else</span>:
        layerToLock.IsLocked = True
        layerToLock.CommitChanges()

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
    lock()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_DocObjects_Layer.htm">Layer Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_DocObjects.htm">Rhino.DocObjects Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>