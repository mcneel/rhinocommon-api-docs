<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>SurfaceCurvature.Direction Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Direction method" /><meta name="System.Keywords" content="SurfaceCurvature.Direction method" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.SurfaceCurvature.Direction" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.SurfaceCurvature.Direction(System.Int32)" /><meta name="Description" content="Gets the principal curvature direction vector." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_SurfaceCurvature_Direction" /><meta name="guid" content="M_Rhino_Geometry_SurfaceCurvature_Direction" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_SurfaceCurvature.htm" title="SurfaceCurvature Class" tocid="T_Rhino_Geometry_SurfaceCurvature">SurfaceCurvature Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_SurfaceCurvature.htm" title="SurfaceCurvature Methods" tocid="Methods_T_Rhino_Geometry_SurfaceCurvature">SurfaceCurvature Methods</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_SurfaceCurvature_Direction.htm" title="Direction Method " tocid="M_Rhino_Geometry_SurfaceCurvature_Direction">Direction Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_SurfaceCurvature_Kappa.htm" title="Kappa Method " tocid="M_Rhino_Geometry_SurfaceCurvature_Kappa">Kappa Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_SurfaceCurvature_OsculatingCircle.htm" title="OsculatingCircle Method " tocid="M_Rhino_Geometry_SurfaceCurvature_OsculatingCircle">OsculatingCircle Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>SurfaceCurvature<span id="LST218E791B_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST218E791B_0?cpp=::|nu=.");</script>Direction Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Gets the principal curvature direction vector.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">Vector3d</span> <span class="identifier">Direction</span>(
	<span class="identifier">int</span> <span class="parameter">direction</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">Direction</span> ( 
	<span class="parameter">direction</span> <span class="keyword">As</span> <span class="identifier">Integer</span>
) <span class="keyword">As</span> <span class="identifier">Vector3d</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">direction</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">System<span id="LST218E791B_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST218E791B_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />Direction index, valid values are 0 and 1.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="T_Rhino_Geometry_Vector3d.htm">Vector3d</a><br />The specified direction vector.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.Commands;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> PrincipalCurvatureCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csPrincipalCurvature"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      ObjRef obj_ref;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetOneObject(<span class="highlight-literal">"Select surface for curvature measurement"</span>, <span class="highlight-keyword">true</span>, 
        ObjectType.Surface, <span class="highlight-keyword">out</span> obj_ref);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">var</span> surface = obj_ref.Surface();

      <span class="highlight-keyword">var</span> gp = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetPoint();
      gp.SetCommandPrompt(<span class="highlight-literal">"Select point on surface for curvature measurement"</span>);
      gp.Constrain(surface, <span class="highlight-keyword">false</span>);
      gp.Get();
      <span class="highlight-keyword">if</span> (gp.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gp.CommandResult();
      <span class="highlight-keyword">var</span> point_on_surface = gp.Point();

      <span class="highlight-keyword">double</span> u, v;
      <span class="highlight-keyword">if</span> (!surface.ClosestPoint(point_on_surface, <span class="highlight-keyword">out</span> u, <span class="highlight-keyword">out</span> v))
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-keyword">var</span> surface_curvature = surface.CurvatureAt(u, v);
      <span class="highlight-keyword">if</span> (surface_curvature == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      RhinoApp.WriteLine(<span class="highlight-literal">"Surface curvature evaluation at parameter: ({0}, {1})"</span>, u, v);

      RhinoApp.WriteLine(<span class="highlight-literal">"  3-D Point: ({0}, {1}, {2})"</span>,
        surface_curvature.Point.X,
        surface_curvature.Point.Y,
        surface_curvature.Point.Z);

      RhinoApp.WriteLine(<span class="highlight-literal">"  3-D Normal: ({0}, {1}, {2})"</span>,
        surface_curvature.Normal.X,
        surface_curvature.Normal.Y,
        surface_curvature.Normal.Z);

      RhinoApp.WriteLine(<span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"  Maximum principal curvature: {0} ({1}, {2}, {3})"</span>, 
        surface_curvature.Kappa(<span class="highlight-number">0</span>), 
        surface_curvature.Direction(<span class="highlight-number">0</span>).X, 
        surface_curvature.Direction(<span class="highlight-number">0</span>).Y, 
        surface_curvature.Direction(<span class="highlight-number">0</span>).Z));

      RhinoApp.WriteLine(<span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"  Minimum principal curvature: {0} ({1}, {2}, {3})"</span>, 
        surface_curvature.Kappa(<span class="highlight-number">1</span>), 
        surface_curvature.Direction(<span class="highlight-number">1</span>).X, 
        surface_curvature.Direction(<span class="highlight-number">1</span>).Y, 
        surface_curvature.Direction(<span class="highlight-number">1</span>).Z));

      RhinoApp.WriteLine(<span class="highlight-literal">"  Gaussian curvature: {0}"</span>, surface_curvature.Gaussian);
      RhinoApp.WriteLine(<span class="highlight-literal">"  Mean curvature: {0}"</span>, surface_curvature.Mean);

      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.Input
<span class="highlight-keyword">Imports</span> Rhino.Commands

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> PrincipalCurvatureCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbPrincipalCurvature"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> obj_ref <span class="highlight-keyword">As</span> ObjRef = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc = RhinoGet.GetOneObject(<span class="highlight-literal">"Select surface for curvature measurement"</span>, <span class="highlight-keyword">True</span>,
                                     ObjectType.Surface, obj_ref)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> surface = obj_ref.Surface()

      <span class="highlight-keyword">Dim</span> gp = <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetPoint()
      gp.SetCommandPrompt(<span class="highlight-literal">"Select point on surface for curvature measurement"</span>)
      gp.Constrain(surface, <span class="highlight-keyword">False</span>)
      gp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> point_on_surface = gp.Point()

      <span class="highlight-keyword">Dim</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>, v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> surface.ClosestPoint(point_on_surface, u, v) <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> surface_curvature = surface.CurvatureAt(u, v)
      <span class="highlight-keyword">If</span> surface_curvature <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      RhinoApp.WriteLine(<span class="highlight-literal">"Surface curvature evaluation at parameter: ({0}, {1})"</span>, u, v)

      RhinoApp.WriteLine(<span class="highlight-literal">"  3-D Point: {0}"</span>, surface_curvature.Point)
      RhinoApp.WriteLine(<span class="highlight-literal">"  3-D Normal: {0}"</span>, surface_curvature.Normal)
      RhinoApp.WriteLine(<span class="highlight-literal">"  Maximum principal curvature: {0} ({1})"</span>, surface_curvature.Kappa(<span class="highlight-number">0</span>), surface_curvature.Direction(<span class="highlight-number">0</span>))
      RhinoApp.WriteLine(<span class="highlight-literal">"  Minimum principal curvature: {0} ({1})"</span>, surface_curvature.Kappa(<span class="highlight-number">1</span>), surface_curvature.Direction(<span class="highlight-number">1</span>))
      RhinoApp.WriteLine(<span class="highlight-literal">"  Gaussian curvature: {0}"</span>, surface_curvature.Gaussian)
      RhinoApp.WriteLine(<span class="highlight-literal">"  Mean curvature: {0}"</span>, surface_curvature.Mean)
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs

surface_id,_,_,_,_,_ = rs.GetSurfaceObject(<span class="highlight-literal">"Select surface for curvature measurement"</span>)
point = rs.GetPointOnSurface(surface_id, 
    <span class="highlight-literal">"Select point on surface for curvature measurement"</span>)
u,v = rs.SurfaceClosestPoint(surface_id, point)

<span class="highlight-comment">#point, normal, kappa_u, direction_u, kappa_v, direction_v, gaussian, mean =</span>
surface_curvature = rs.SurfaceCurvature(surface_id, (u,v))

point, normal, kappa_u, direction_u, kappa_v, direction_v, gaussian, mean = surface_curvature

<span class="highlight-keyword">print</span> <span class="highlight-literal">"Surface curvature evaluation at parameter: ({0}, {1})"</span>.format(u,v)

<span class="highlight-keyword">print</span> <span class="highlight-literal">"  3-D Point: ({0}, {1}, {2})"</span>.format(point.X, point.Y, point.Z)

<span class="highlight-keyword">print</span> <span class="highlight-literal">"  3-D Normal: ({0}, {1}, {2})"</span>.format(normal.X, normal.Y, normal.Z)

<span class="highlight-keyword">print</span> <span class="highlight-literal">"  Maximum principal curvature: {0} ({1}, {2}, {3})"</span>.format(
  kappa_u, direction_u.X, direction_u.Y, direction_u.Z)

<span class="highlight-keyword">print</span> <span class="highlight-literal">"  Minimum principal curvature: {0} ({1}, {2}, {3})"</span>.format(
  kappa_v, direction_v.X, direction_v.Y, direction_v.Z)

<span class="highlight-keyword">print</span> <span class="highlight-literal">"  Gaussian curvature: {0}"</span>.format(gaussian)
<span class="highlight-keyword">print</span> <span class="highlight-literal">"  Mean curvature: {0}"</span>.format(mean)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_SurfaceCurvature.htm">SurfaceCurvature Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.16.22067.13000 (Last updated: 3/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>