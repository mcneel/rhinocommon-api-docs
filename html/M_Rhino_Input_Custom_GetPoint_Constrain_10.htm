<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>GetPoint.Constrain Method (Surface, Boolean)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Surface,System.Boolean)" /><meta name="Description" content="Constrains the picked point to lie on a surface." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Input.Custom" /><meta name="file" content="M_Rhino_Input_Custom_GetPoint_Constrain_10" /><meta name="guid" content="M_Rhino_Input_Custom_GetPoint_Constrain_10" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Input_Custom.htm" title="Rhino.Input.Custom" tocid="N_Rhino_Input_Custom">Rhino.Input.Custom</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Input_Custom_GetPoint.htm" title="GetPoint Class" tocid="T_Rhino_Input_Custom_GetPoint">GetPoint Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Input_Custom_GetPoint.htm" title="GetPoint Methods" tocid="Methods_T_Rhino_Input_Custom_GetPoint">GetPoint Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_Custom_GetPoint_Constrain.htm" title="Constrain Method " tocid="Overload_Rhino_Input_Custom_GetPoint_Constrain">Constrain Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain.htm" title="Constrain Method (Arc)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain">Constrain Method (Arc)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_2.htm" title="Constrain Method (Circle)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_2">Constrain Method (Circle)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_4.htm" title="Constrain Method (Cylinder)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_4">Constrain Method (Cylinder)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_5.htm" title="Constrain Method (Line)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_5">Constrain Method (Line)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_9.htm" title="Constrain Method (Sphere)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_9">Constrain Method (Sphere)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_3.htm" title="Constrain Method (Curve, Boolean)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_3">Constrain Method (Curve, Boolean)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_6.htm" title="Constrain Method (Mesh, Boolean)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_6">Constrain Method (Mesh, Boolean)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_7.htm" title="Constrain Method (Plane, Boolean)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_7">Constrain Method (Plane, Boolean)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_8.htm" title="Constrain Method (Point3d, Point3d)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_8">Constrain Method (Point3d, Point3d)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_10.htm" title="Constrain Method (Surface, Boolean)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_10">Constrain Method (Surface, Boolean)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetPoint_Constrain_1.htm" title="Constrain Method (Brep, Int32, Int32, Boolean)" tocid="M_Rhino_Input_Custom_GetPoint_Constrain_1">Constrain Method (Brep, Int32, Int32, Boolean)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>GetPoint<span id="LST3B866695_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3B866695_0?cpp=::|nu=.");</script>Constrain Method (Surface, Boolean)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">Constrains the picked point to lie on a surface.</div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">bool</span> <span class="identifier">Constrain</span>(
	<span class="identifier">Surface</span> <span class="parameter">surface</span>,
	<span class="identifier">bool</span> <span class="parameter">allowPickingPointOffObject</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">Constrain</span> ( 
	<span class="parameter">surface</span> <span class="keyword">As</span> <span class="identifier">Surface</span>,
	<span class="parameter">allowPickingPointOffObject</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>
) <span class="keyword">As</span> <span class="identifier">Boolean</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">surface</span></dt><dd>Type: <a href="T_Rhino_Geometry_Surface.htm">Rhino.Geometry<span id="LST3B866695_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3B866695_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Surface</a><br />A surface to use as constraint.</dd><dt><span class="parameter">allowPickingPointOffObject</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank">System<span id="LST3B866695_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST3B866695_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Boolean</a><br />
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank">Boolean</a><br />true if constraint could be applied.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result OrientOnSrf(Rhino.RhinoDoc doc)
  {
    <span class="highlight-comment">// Select objects to orient</span>
    Rhino.Input.Custom.GetObject go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    go.SetCommandPrompt(<span class="highlight-literal">"Select objects to orient"</span>);
    go.SubObjectSelect = <span class="highlight-keyword">false</span>;
    go.GroupSelect = <span class="highlight-keyword">true</span>;
    go.GetMultiple(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>);
    <span class="highlight-keyword">if</span> (go.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> go.CommandResult();

    <span class="highlight-comment">// Point to orient from</span>
    Rhino.Input.Custom.GetPoint gp = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetPoint();
    gp.SetCommandPrompt(<span class="highlight-literal">"Point to orient from"</span>);
    gp.Get();
    <span class="highlight-keyword">if</span> (gp.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> gp.CommandResult();

    <span class="highlight-comment">// Define source plane</span>
    Rhino.Display.RhinoView view = gp.View();
    <span class="highlight-keyword">if</span> (view == <span class="highlight-keyword">null</span>)
    {
      view = doc.Views.ActiveView;
      <span class="highlight-keyword">if</span> (view == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;
    }
    Rhino.Geometry.Plane source_plane = view.ActiveViewport.ConstructionPlane();
    source_plane.Origin = gp.Point();

    <span class="highlight-comment">// Surface to orient on</span>
    Rhino.Input.Custom.GetObject gs = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    gs.SetCommandPrompt(<span class="highlight-literal">"Surface to orient on"</span>);
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface;
    gs.SubObjectSelect = <span class="highlight-keyword">true</span>;
    gs.DeselectAllBeforePostSelect = <span class="highlight-keyword">false</span>;
    gs.OneByOnePostSelect = <span class="highlight-keyword">true</span>;
    gs.Get();
    <span class="highlight-keyword">if</span> (gs.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> gs.CommandResult();

    Rhino.DocObjects.ObjRef objref = gs.Object(<span class="highlight-number">0</span>);
    <span class="highlight-comment">// get selected surface object</span>
    Rhino.DocObjects.RhinoObject obj = objref.Object();
    <span class="highlight-keyword">if</span> (obj == <span class="highlight-keyword">null</span>)
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;
    <span class="highlight-comment">// get selected surface (face)</span>
    Rhino.Geometry.Surface surface = objref.Surface();
    <span class="highlight-keyword">if</span> (surface == <span class="highlight-keyword">null</span>)
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;
    <span class="highlight-comment">// Unselect surface</span>
    obj.Select(<span class="highlight-keyword">false</span>);

    <span class="highlight-comment">// Point on surface to orient to</span>
    gp.SetCommandPrompt(<span class="highlight-literal">"Point on surface to orient to"</span>);
    gp.Constrain(surface, <span class="highlight-keyword">false</span>);
    gp.Get();
    <span class="highlight-keyword">if</span> (gp.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> gp.CommandResult();

    <span class="highlight-comment">// Do transformation</span>
    Rhino.Commands.Result rc = Rhino.Commands.Result.Failure;
    <span class="highlight-keyword">double</span> u, v;
    <span class="highlight-keyword">if</span> (surface.ClosestPoint(gp.Point(), <span class="highlight-keyword">out</span> u, <span class="highlight-keyword">out</span> v))
    {
      Rhino.Geometry.Plane target_plane;
      <span class="highlight-keyword">if</span> (surface.FrameAt(u, v, <span class="highlight-keyword">out</span> target_plane))
      {
        <span class="highlight-comment">// Build transformation</span>
        Rhino.Geometry.Transform xform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane);

        <span class="highlight-comment">// Do the transformation. In this example, we will copy the original objects</span>
        <span class="highlight-keyword">const</span> <span class="highlight-keyword">bool</span> delete_original = <span class="highlight-keyword">false</span>;
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; go.ObjectCount; i++)
          doc.Objects.Transform(go.Object(i), xform, delete_original);

        doc.Views.Redraw();
        rc = Rhino.Commands.Result.Success;
      }
    }
    <span class="highlight-keyword">return</span> rc;
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> OrientOnSrf(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' Select objects to orient</span>
    <span class="highlight-keyword">Dim</span> go <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select objects to orient"</span>)
    go.SubObjectSelect = <span class="highlight-keyword">False</span>
    go.GroupSelect = <span class="highlight-keyword">True</span>
    go.GetMultiple(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Point to orient from</span>
    <span class="highlight-keyword">Dim</span> gp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"Point to orient from"</span>)
    gp.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> gp.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Define source plane</span>
    <span class="highlight-keyword">Dim</span> view <span class="highlight-keyword">As</span> Rhino.Display.RhinoView = gp.View()
    <span class="highlight-keyword">If</span> view <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      view = doc.Views.ActiveView
      <span class="highlight-keyword">If</span> view <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Dim</span> source_plane <span class="highlight-keyword">As</span> Rhino.Geometry.Plane = view.ActiveViewport.ConstructionPlane()
    source_plane.Origin = gp.Point()

    <span class="highlight-comment">' Surface to orient on</span>
    <span class="highlight-keyword">Dim</span> gs <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    gs.SetCommandPrompt(<span class="highlight-literal">"Surface to orient on"</span>)
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface
    gs.SubObjectSelect = <span class="highlight-keyword">True</span>
    gs.DeselectAllBeforePostSelect = <span class="highlight-keyword">False</span>
    gs.OneByOnePostSelect = <span class="highlight-keyword">True</span>
    gs.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> gs.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> gs.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> objref <span class="highlight-keyword">As</span> Rhino.DocObjects.ObjRef = gs.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>)
    <span class="highlight-comment">' get selected surface object</span>
    <span class="highlight-keyword">Dim</span> obj <span class="highlight-keyword">As</span> Rhino.DocObjects.RhinoObject = objref.[<span class="highlight-keyword">Object</span>]()
    <span class="highlight-keyword">If</span> obj <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-comment">' get selected surface (face)</span>
    <span class="highlight-keyword">Dim</span> surface <span class="highlight-keyword">As</span> Rhino.Geometry.Surface = objref.Surface()
    <span class="highlight-keyword">If</span> surface <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-comment">' Unselect surface</span>
    obj.[<span class="highlight-keyword">Select</span>](<span class="highlight-keyword">False</span>)

    <span class="highlight-comment">' Point on surface to orient to</span>
    gp.SetCommandPrompt(<span class="highlight-literal">"Point on surface to orient to"</span>)
    gp.Constrain(surface, <span class="highlight-keyword">False</span>)
    gp.<span class="highlight-keyword">Get</span>()
    <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> gp.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Do transformation</span>
    <span class="highlight-keyword">Dim</span> rc <span class="highlight-keyword">As</span> Rhino.Commands.Result = Rhino.Commands.Result.Failure
    <span class="highlight-keyword">Dim</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>, v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
    <span class="highlight-keyword">If</span> surface.ClosestPoint(gp.Point(), u, v) <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Dim</span> target_plane <span class="highlight-keyword">As</span> Rhino.Geometry.Plane
      <span class="highlight-keyword">If</span> surface.FrameAt(u, v, target_plane) <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Build transformation</span>
        <span class="highlight-keyword">Dim</span> xform <span class="highlight-keyword">As</span> Rhino.Geometry.Transform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane)

        <span class="highlight-comment">' Do the transformation. In this example, we will copy the original objects</span>
        <span class="highlight-keyword">Const</span> delete_original <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> go.ObjectCount - <span class="highlight-number">1</span>
          doc.Objects.Transform(go.[<span class="highlight-keyword">Object</span>](i), xform, delete_original)
        <span class="highlight-keyword">Next</span>

        doc.Views.Redraw()
        rc = Rhino.Commands.Result.Success
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> rc
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext
<span class="highlight-keyword">import</span> System.Guid

<span class="highlight-keyword">def</span> OrientOnSrf():
    <span class="highlight-comment"># Select objects to orient</span>
    go = Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select objects to orient"</span>)
    go.SubObjectSelect = False
    go.GroupSelect = True
    go.GetMultiple(<span class="highlight-number">1</span>, <span class="highlight-number">0</span>)
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> go.CommandResult()

    <span class="highlight-comment"># Point to orient from</span>
    gp = Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"Point to orient from"</span>)
    gp.Get()
    <span class="highlight-keyword">if</span> gp.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> gp.CommandResult()

    <span class="highlight-comment"># Define source plane</span>
    view = gp.View()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> view:
        view = doc.Views.ActiveView
        <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> view: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    source_plane = view.ActiveViewport.ConstructionPlane()
    source_plane.Origin = gp.Point()

    <span class="highlight-comment"># Surface to orient on</span>
    gs = Rhino.Input.Custom.GetObject()
    gs.SetCommandPrompt(<span class="highlight-literal">"Surface to orient on"</span>)
    gs.GeometryFilter = Rhino.DocObjects.ObjectType.Surface
    gs.SubObjectSelect = True
    gs.DeselectAllBeforePostSelect = False
    gs.OneByOnePostSelect = True
    gs.Get()
    <span class="highlight-keyword">if</span> gs.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> gs.CommandResult()

    objref = gs.Object(<span class="highlight-number">0</span>)
    <span class="highlight-comment"># get selected surface object</span>
    obj = objref.Object()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> obj: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure
    <span class="highlight-comment"># get selected surface (face)</span>
    surface = objref.Surface()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> surface: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure
    <span class="highlight-comment"># Unselect surface</span>
    obj.Select(False)

    <span class="highlight-comment"># Point on surface to orient to</span>
    gp.SetCommandPrompt(<span class="highlight-literal">"Point on surface to orient to"</span>)
    gp.Constrain(surface, False)
    gp.Get()
    <span class="highlight-keyword">if</span> gp.CommandResult()!=Rhino.Commands.Result.Success:
        <span class="highlight-keyword">return</span> gp.CommandResult()

    <span class="highlight-comment"># Do transformation</span>
    rc = Rhino.Commands.Result.Failure
    getrc, u, v = surface.ClosestPoint(gp.Point())
    <span class="highlight-keyword">if</span> getrc:
        getrc, target_plane = surface.FrameAt(u,v)
        <span class="highlight-keyword">if</span> getrc:
            <span class="highlight-comment"># Build transformation</span>
            xform = Rhino.Geometry.Transform.PlaneToPlane(source_plane, target_plane)
            <span class="highlight-comment"># Do the transformation. In this example, we will copy the original objects</span>
            delete_original = False
            <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(go.ObjectCount):
                rhobj = go.Object(i)
                scriptcontext.doc.Objects.Transform(rhobj, xform, delete_original)
            scriptcontext.doc.Views.Redraw()
            rc = Rhino.Commands.Result.Success
    <span class="highlight-keyword">return</span> rc


<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    OrientOnSrf()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Input_Custom_GetPoint.htm">GetPoint Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Input_Custom_GetPoint_Constrain.htm">Constrain Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>