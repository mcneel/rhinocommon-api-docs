<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Point3f.DistanceTo Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="DistanceTo method" /><meta name="System.Keywords" content="Point3f.DistanceTo method" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Point3f.DistanceTo" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Point3f.DistanceTo(Rhino.Geometry.Point3f)" /><meta name="Description" content="Computes the distance between two points." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_Point3f_DistanceTo" /><meta name="guid" content="M_Rhino_Geometry_Point3f_DistanceTo" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_Point3f.htm" title="Point3f Structure" tocid="T_Rhino_Geometry_Point3f">Point3f Structure</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_Point3f.htm" title="Point3f Methods" tocid="Methods_T_Rhino_Geometry_Point3f">Point3f Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Point3f_CompareTo.htm" title="CompareTo Method " tocid="M_Rhino_Geometry_Point3f_CompareTo">CompareTo Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Point3f_DistanceTo.htm" title="DistanceTo Method " tocid="M_Rhino_Geometry_Point3f_DistanceTo">DistanceTo Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Point3f_DistanceToSquared.htm" title="DistanceToSquared Method " tocid="M_Rhino_Geometry_Point3f_DistanceToSquared">DistanceToSquared Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Point3f_EpsilonEquals.htm" title="EpsilonEquals Method " tocid="M_Rhino_Geometry_Point3f_EpsilonEquals">EpsilonEquals Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_Point3f_Equals.htm" title="Equals Method " tocid="Overload_Rhino_Geometry_Point3f_Equals">Equals Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Point3f_GetHashCode.htm" title="GetHashCode Method " tocid="M_Rhino_Geometry_Point3f_GetHashCode">GetHashCode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Point3f_Subtract.htm" title="Subtract Method " tocid="M_Rhino_Geometry_Point3f_Subtract">Subtract Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_Point3f_ToString.htm" title="ToString Method " tocid="Overload_Rhino_Geometry_Point3f_ToString">ToString Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Point3f_Transform.htm" title="Transform Method " tocid="M_Rhino_Geometry_Point3f_Transform">Transform Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Point3f<span id="LST4E5C568D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4E5C568D_0?cpp=::|nu=.");</script>DistanceTo Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Computes the distance between two points.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">double</span> <span class="identifier">DistanceTo</span>(
	<span class="identifier">Point3f</span> <span class="parameter">other</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">DistanceTo</span> ( 
	<span class="parameter">other</span> <span class="keyword">As</span> <span class="identifier">Point3f</span>
) <span class="keyword">As</span> <span class="identifier">Double</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">other</span></dt><dd>Type: <a href="T_Rhino_Geometry_Point3f.htm">Rhino.Geometry<span id="LST4E5C568D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST4E5C568D_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Point3f</a><br />Other point for distance measurement.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">Double</a><br />The length of the line between this and the other point; or 0 if any of the points is not valid.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result IntersectCurves(Rhino.RhinoDoc doc)
  {
    <span class="highlight-comment">// Select two curves to intersect</span>
    <span class="highlight-keyword">var</span> go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetObject();
    go.SetCommandPrompt(<span class="highlight-literal">"Select two curves"</span>);
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve;
    go.GetMultiple(<span class="highlight-number">2</span>, <span class="highlight-number">2</span>);
    <span class="highlight-keyword">if</span> (go.CommandResult() != Rhino.Commands.Result.Success)
      <span class="highlight-keyword">return</span> go.CommandResult();

    <span class="highlight-comment">// Validate input</span>
    <span class="highlight-keyword">var</span> curveA = go.Object(<span class="highlight-number">0</span>).Curve();
    <span class="highlight-keyword">var</span> curveB = go.Object(<span class="highlight-number">1</span>).Curve();
    <span class="highlight-keyword">if</span> (curveA == <span class="highlight-keyword">null</span> || curveB == <span class="highlight-keyword">null</span>)
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    <span class="highlight-comment">// Calculate the intersection</span>
    <span class="highlight-keyword">const</span> <span class="highlight-keyword">double</span> intersection_tolerance = <span class="highlight-number">0.001</span>;
    <span class="highlight-keyword">const</span> <span class="highlight-keyword">double</span> overlap_tolerance = <span class="highlight-number">0.0</span>;
    <span class="highlight-keyword">var</span> events = Rhino.Geometry.Intersect.Intersection.CurveCurve(curveA, curveB, intersection_tolerance, overlap_tolerance);

    <span class="highlight-comment">// Process the results</span>
    <span class="highlight-keyword">if</span> (events != <span class="highlight-keyword">null</span>)
    {
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; events.Count; i++)
      {
        <span class="highlight-keyword">var</span> ccx_event = events[i];
        doc.Objects.AddPoint(ccx_event.PointA);
        <span class="highlight-keyword">if</span> (ccx_event.PointA.DistanceTo(ccx_event.PointB) &gt; <span class="highlight-keyword">double</span>.Epsilon)
        {
          doc.Objects.AddPoint(ccx_event.PointB);
          doc.Objects.AddLine(ccx_event.PointA, ccx_event.PointB);
        }
      }
      doc.Views.Redraw();
    }
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> IntersectCurves(doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' Select two curves to intersect</span>
    <span class="highlight-keyword">Dim</span> go = <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select two curves"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GetMultiple(<span class="highlight-number">2</span>, <span class="highlight-number">2</span>)
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Validate input</span>
    <span class="highlight-keyword">Dim</span> curveA = go.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>).Curve()
    <span class="highlight-keyword">Dim</span> curveB = go.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">1</span>).Curve()
    <span class="highlight-keyword">If</span> curveA <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> curveB <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Calculate the intersection</span>
    <span class="highlight-keyword">Const</span> intersection_tolerance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">0.001</span>
    <span class="highlight-keyword">Const</span> overlap_tolerance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">0.0</span>
    <span class="highlight-keyword">Dim</span> events = Rhino.Geometry.Intersect.Intersection.CurveCurve(curveA, curveB, intersection_tolerance, overlap_tolerance)

    <span class="highlight-comment">' Process the results</span>
    <span class="highlight-keyword">If</span> events <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> events.Count - <span class="highlight-number">1</span>
        <span class="highlight-keyword">Dim</span> ccx_event = events(i)
        doc.Objects.AddPoint(ccx_event.PointA)
        <span class="highlight-keyword">If</span> ccx_event.PointA.DistanceTo(ccx_event.PointB) &gt; <span class="highlight-keyword">Double</span>.Epsilon <span class="highlight-keyword">Then</span>
          doc.Objects.AddPoint(ccx_event.PointB)
          doc.Objects.AddLine(ccx_event.PointA, ccx_event.PointB)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Next</span>
      doc.Views.Redraw()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> IntersectCurves():
    <span class="highlight-comment"># Select two curves to intersect</span>
    go = Rhino.Input.Custom.GetObject()
    go.SetCommandPrompt(<span class="highlight-literal">"Select two curves"</span>)
    go.GeometryFilter = Rhino.DocObjects.ObjectType.Curve
    go.GetMultiple(<span class="highlight-number">2</span>, <span class="highlight-number">2</span>)
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success: <span class="highlight-keyword">return</span>

    <span class="highlight-comment"># Validate input</span>
    curveA = go.Object(<span class="highlight-number">0</span>).Curve()
    curveB = go.Object(<span class="highlight-number">1</span>).Curve()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> curveA <span class="highlight-keyword">or</span> <span class="highlight-keyword">not</span> curveB: <span class="highlight-keyword">return</span>

    <span class="highlight-comment"># Calculate the intersection</span>
    intersection_tolerance = <span class="highlight-number">0.001</span>
    overlap_tolerance = <span class="highlight-number">0.0</span>
    events = Rhino.Geometry.Intersect.Intersection.CurveCurve(curveA, curveB, intersection_tolerance, overlap_tolerance)

    <span class="highlight-comment"># Process the results</span>
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> events: <span class="highlight-keyword">return</span>
    <span class="highlight-keyword">for</span> ccx_event <span class="highlight-keyword">in</span> events:
        scriptcontext.doc.Objects.AddPoint(ccx_event.PointA)
        <span class="highlight-keyword">if</span> ccx_event.PointA.DistanceTo(ccx_event.PointB) &gt; float.Epsilon:
            scriptcontext.doc.Objects.AddPoint(ccx_event.PointB)
            scriptcontext.doc.Objects.AddLine(ccx_event.PointA, ccx_event.PointB)
    scriptcontext.doc.Views.Redraw()

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    IntersectCurves()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Point3f.htm">Point3f Structure</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>