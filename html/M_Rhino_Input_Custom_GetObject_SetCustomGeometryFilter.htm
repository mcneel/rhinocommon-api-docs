<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>GetObject.SetCustomGeometryFilter Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="SetCustomGeometryFilter method" /><meta name="System.Keywords" content="GetObject.SetCustomGeometryFilter method" /><meta name="Microsoft.Help.F1" content="Rhino.Input.Custom.GetObject.SetCustomGeometryFilter" /><meta name="Microsoft.Help.Id" content="M:Rhino.Input.Custom.GetObject.SetCustomGeometryFilter(Rhino.Input.Custom.GetObjectGeometryFilter)" /><meta name="Description" content="Set filter callback function that will be called by the CustomGeometryFilter" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Input.Custom" /><meta name="file" content="M_Rhino_Input_Custom_GetObject_SetCustomGeometryFilter" /><meta name="guid" content="M_Rhino_Input_Custom_GetObject_SetCustomGeometryFilter" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Input_Custom.htm" title="Rhino.Input.Custom" tocid="N_Rhino_Input_Custom">Rhino.Input.Custom</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Input_Custom_GetObject.htm" title="GetObject Class" tocid="T_Rhino_Input_Custom_GetObject">GetObject Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Input_Custom_GetObject.htm" title="GetObject Methods" tocid="Methods_T_Rhino_Input_Custom_GetObject">GetObject Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_ActiveGetObject.htm" title="ActiveGetObject Method " tocid="M_Rhino_Input_Custom_GetObject_ActiveGetObject">ActiveGetObject Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_AppendToPickList.htm" title="AppendToPickList Method " tocid="M_Rhino_Input_Custom_GetObject_AppendToPickList">AppendToPickList Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_ClearObjects.htm" title="ClearObjects Method " tocid="M_Rhino_Input_Custom_GetObject_ClearObjects">ClearObjects Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_CustomGeometryFilter.htm" title="CustomGeometryFilter Method " tocid="M_Rhino_Input_Custom_GetObject_CustomGeometryFilter">CustomGeometryFilter Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_DisablePreSelect.htm" title="DisablePreSelect Method " tocid="M_Rhino_Input_Custom_GetObject_DisablePreSelect">DisablePreSelect Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnableClearObjectsOnEntry.htm" title="EnableClearObjectsOnEntry Method " tocid="M_Rhino_Input_Custom_GetObject_EnableClearObjectsOnEntry">EnableClearObjectsOnEntry Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnableHighlight.htm" title="EnableHighlight Method " tocid="M_Rhino_Input_Custom_GetObject_EnableHighlight">EnableHighlight Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnableIgnoreGrips.htm" title="EnableIgnoreGrips Method " tocid="M_Rhino_Input_Custom_GetObject_EnableIgnoreGrips">EnableIgnoreGrips Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnablePostSelect.htm" title="EnablePostSelect Method " tocid="M_Rhino_Input_Custom_GetObject_EnablePostSelect">EnablePostSelect Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnablePreSelect.htm" title="EnablePreSelect Method " tocid="M_Rhino_Input_Custom_GetObject_EnablePreSelect">EnablePreSelect Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnablePressEnterWhenDonePrompt.htm" title="EnablePressEnterWhenDonePrompt Method " tocid="M_Rhino_Input_Custom_GetObject_EnablePressEnterWhenDonePrompt">EnablePressEnterWhenDonePrompt Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnableSelPrevious.htm" title="EnableSelPrevious Method " tocid="M_Rhino_Input_Custom_GetObject_EnableSelPrevious">EnableSelPrevious Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_EnableUnselectObjectsOnExit.htm" title="EnableUnselectObjectsOnExit Method " tocid="M_Rhino_Input_Custom_GetObject_EnableUnselectObjectsOnExit">EnableUnselectObjectsOnExit Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_Get.htm" title="Get Method " tocid="M_Rhino_Input_Custom_GetObject_Get">Get Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_GetMultiple.htm" title="GetMultiple Method " tocid="M_Rhino_Input_Custom_GetObject_GetMultiple">GetMultiple Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_Object.htm" title="Object Method " tocid="M_Rhino_Input_Custom_GetObject_Object">Object Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_Objects.htm" title="Objects Method " tocid="M_Rhino_Input_Custom_GetObject_Objects">Objects Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_PassesGeometryAttributeFilter.htm" title="PassesGeometryAttributeFilter Method " tocid="M_Rhino_Input_Custom_GetObject_PassesGeometryAttributeFilter">PassesGeometryAttributeFilter Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_SetCustomGeometryFilter.htm" title="SetCustomGeometryFilter Method " tocid="M_Rhino_Input_Custom_GetObject_SetCustomGeometryFilter">SetCustomGeometryFilter Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_Custom_GetObject_SetPressEnterWhenDonePrompt.htm" title="SetPressEnterWhenDonePrompt Method " tocid="M_Rhino_Input_Custom_GetObject_SetPressEnterWhenDonePrompt">SetPressEnterWhenDonePrompt Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>GetObject<span id="LST100F658D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST100F658D_0?cpp=::|nu=.");</script>SetCustomGeometryFilter Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Set filter callback function that will be called by the CustomGeometryFilter
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">SetCustomGeometryFilter</span>(
	<span class="identifier">GetObjectGeometryFilter</span> <span class="parameter">filter</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">SetCustomGeometryFilter</span> ( 
	<span class="parameter">filter</span> <span class="keyword">As</span> <span class="identifier">GetObjectGeometryFilter</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">filter</span></dt><dd>Type: <a href="T_Rhino_Input_Custom_GetObjectGeometryFilter.htm">Rhino.Input.Custom<span id="LST100F658D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST100F658D_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>GetObjectGeometryFilter</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="filter"/&gt; documentation for "M:Rhino.Input.Custom.GetObject.SetCustomGeometryFilter(Rhino.Input.Custom.GetObjectGeometryFilter)"]</p></dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Input.Custom;
<span class="highlight-keyword">using</span> Rhino.DocObjects;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CustomGeometryFilterCommand : Command
  {
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">double</span> m_tolerance;
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csCustomGeometryFilter"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      m_tolerance = doc.ModelAbsoluteTolerance;

      <span class="highlight-comment">// only use a custom geometry filter if no simpler filter does the job</span>

      <span class="highlight-comment">// only curves</span>
      <span class="highlight-keyword">var</span> gc = <span class="highlight-keyword">new</span> GetObject();
      gc.SetCommandPrompt(<span class="highlight-literal">"select curve"</span>);
      gc.GeometryFilter = ObjectType.Curve;
      gc.DisablePreSelect();
      gc.SubObjectSelect = <span class="highlight-keyword">false</span>;
      gc.Get();
      <span class="highlight-keyword">if</span> (gc.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gc.CommandResult();
      <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == gc.Object(<span class="highlight-number">0</span>).Curve())
        <span class="highlight-keyword">return</span> Result.Failure;
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"curve was selected"</span>);

      <span class="highlight-comment">// only closed curves</span>
      <span class="highlight-keyword">var</span> gcc = <span class="highlight-keyword">new</span> GetObject();
      gcc.SetCommandPrompt(<span class="highlight-literal">"select closed curve"</span>);
      gcc.GeometryFilter = ObjectType.Curve;
      gcc.GeometryAttributeFilter = GeometryAttributeFilter.ClosedCurve;
      gcc.DisablePreSelect();
      gcc.SubObjectSelect = <span class="highlight-keyword">false</span>;
      gcc.Get();
      <span class="highlight-keyword">if</span> (gcc.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gcc.CommandResult();
      <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == gcc.Object(<span class="highlight-number">0</span>).Curve())
        <span class="highlight-keyword">return</span> Result.Failure;
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"closed curve was selected"</span>);

      <span class="highlight-comment">// only circles with a radius of 10</span>
      <span class="highlight-keyword">var</span> gcc10 = <span class="highlight-keyword">new</span> GetObject();
      gcc10.SetCommandPrompt(<span class="highlight-literal">"select circle with radius of 10"</span>);
      gc.GeometryFilter = ObjectType.Curve;
      gcc10.SetCustomGeometryFilter(CircleWithRadiusOf10GeometryFilter); <span class="highlight-comment">// custom geometry filter</span>
      gcc10.DisablePreSelect();
      gcc10.SubObjectSelect = <span class="highlight-keyword">false</span>;
      gcc10.Get();
      <span class="highlight-keyword">if</span> (gcc10.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gcc10.CommandResult();
      <span class="highlight-keyword">if</span> (<span class="highlight-keyword">null</span> == gcc10.Object(<span class="highlight-number">0</span>).Curve())
        <span class="highlight-keyword">return</span> Result.Failure;
      RhinoApp.WriteLine(<span class="highlight-literal">"circle with radius of 10 was selected"</span>);

      <span class="highlight-keyword">return</span> Result.Success;
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">bool</span> CircleWithRadiusOf10GeometryFilter (Rhino.DocObjects.RhinoObject rhObject, GeometryBase geometry,
      ComponentIndex componentIndex)
    {
      <span class="highlight-keyword">bool</span> is_circle_with_radius_of10 = <span class="highlight-keyword">false</span>;
      Circle circle;
      <span class="highlight-keyword">if</span> (geometry <span class="highlight-keyword">is</span> Curve &amp;&amp; (geometry <span class="highlight-keyword">as</span> Curve).TryGetCircle(<span class="highlight-keyword">out</span> circle))
        is_circle_with_radius_of10 = circle.Radius &lt;= <span class="highlight-number">10.0</span> + m_tolerance &amp;&amp; circle.Radius &gt;= <span class="highlight-number">10.0</span> - m_tolerance;
      <span class="highlight-keyword">return</span> is_circle_with_radius_of10;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Input.Custom
<span class="highlight-keyword">Imports</span> Rhino.DocObjects

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> CustomGeometryFilterCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Private</span> _tolerance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbCustomGeometryFilter"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      _tolerance = doc.ModelAbsoluteTolerance

      <span class="highlight-comment">' only use a custom geometry filter if no simpler filter does the job</span>

      <span class="highlight-comment">' only curves</span>
      <span class="highlight-keyword">Dim</span> gc = <span class="highlight-keyword">New</span> GetObject()
      gc.SetCommandPrompt(<span class="highlight-literal">"select curve"</span>)
      gc.GeometryFilter = ObjectType.Curve
      gc.DisablePreSelect()
      gc.SubObjectSelect = <span class="highlight-keyword">False</span>
      gc.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gc.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gc.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> gc.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>).Curve() <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"curve was selected"</span>)

      <span class="highlight-comment">' only closed curves</span>
      <span class="highlight-keyword">Dim</span> gcc = <span class="highlight-keyword">New</span> GetObject()
      gcc.SetCommandPrompt(<span class="highlight-literal">"select closed curve"</span>)
      gcc.GeometryFilter = ObjectType.Curve
      gcc.GeometryAttributeFilter = GeometryAttributeFilter.ClosedCurve
      gcc.DisablePreSelect()
      gcc.SubObjectSelect = <span class="highlight-keyword">False</span>
      gcc.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gcc.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gcc.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> gcc.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>).Curve() <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"closed curve was selected"</span>)

      <span class="highlight-comment">' only circles with a radius of 10</span>
      <span class="highlight-keyword">Dim</span> gcc10 = <span class="highlight-keyword">New</span> GetObject()
      gcc10.SetCommandPrompt(<span class="highlight-literal">"select circle with radius of 10"</span>)
      gc.GeometryFilter = ObjectType.Curve
      gcc10.SetCustomGeometryFilter(<span class="highlight-keyword">AddressOf</span> CircleWithRadiusOf10GeometryFilter)
      <span class="highlight-comment">' custom geometry filter</span>
      gcc10.DisablePreSelect()
      gcc10.SubObjectSelect = <span class="highlight-keyword">False</span>
      gcc10.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gcc10.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gcc10.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">If</span> gcc10.[<span class="highlight-keyword">Object</span>](<span class="highlight-number">0</span>).Curve() <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"circle with radius of 10 was selected"</span>)

      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Function</span> CircleWithRadiusOf10GeometryFilter(rhObject <span class="highlight-keyword">As</span> Rhino.DocObjects.RhinoObject, geometry <span class="highlight-keyword">As</span> GeometryBase, componentIndex <span class="highlight-keyword">As</span> ComponentIndex) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>
      <span class="highlight-keyword">Dim</span> isCircleWithRadiusOf10 <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
      <span class="highlight-keyword">Dim</span> circle <span class="highlight-keyword">As</span> Circle
      <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> geometry <span class="highlight-keyword">Is</span> Curve <span class="highlight-keyword">AndAlso</span> <span class="highlight-keyword">TryCast</span>(geometry, Curve).TryGetCircle(circle) <span class="highlight-keyword">Then</span>
        isCircleWithRadiusOf10 = circle.Radius &lt;= <span class="highlight-number">10.0</span> + _tolerance <span class="highlight-keyword">AndAlso</span> circle.Radius &gt;= <span class="highlight-number">10.0</span> - _tolerance
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Return</span> isCircleWithRadiusOf10
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">import</span> Rhino

<span class="highlight-keyword">def</span> circleWithRadiusOf10GeometryFilter (rhObject, geometry, componentIndex):
  isCircleWithRadiusOf10 = False
  c = rs.coercecurve(geometry)
  <span class="highlight-keyword">if</span> c:
    b, circle = c.TryGetCircle()
  <span class="highlight-keyword">if</span> b:
    isCircleWithRadiusOf10 = circle.Radius &lt;= <span class="highlight-number">10.0</span> + Rhino.RhinoMath.ZeroTolerance <span class="highlight-keyword">and</span> circle.Radius &gt;= <span class="highlight-number">10.0</span> - Rhino.RhinoMath.ZeroTolerance
  <span class="highlight-keyword">return</span> isCircleWithRadiusOf10

<span class="highlight-keyword">def</span> RunCommand():
  <span class="highlight-comment"># only use a custom geometry filter if no simpler filter does the job</span>

  <span class="highlight-comment"># for curves - only a simple filter is needed</span>
  <span class="highlight-keyword">if</span> rs.GetObject(<span class="highlight-literal">"select curve"</span>, rs.filter.curve): <span class="highlight-comment">#Rhino.DocObjects.ObjectType.Curve):</span>
    <span class="highlight-keyword">print</span> <span class="highlight-literal">"curve vas selected"</span>

  <span class="highlight-comment"># for circles with a radius of 10 - a custom geometry filter is needed</span>
  <span class="highlight-keyword">if</span> rs.GetObject(<span class="highlight-literal">"select circle with radius of 10"</span>, rs.filter.curve, False, False, circleWithRadiusOf10GeometryFilter):
      <span class="highlight-keyword">print</span> <span class="highlight-literal">"circle with radius of 10 was selected"</span>

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Input_Custom_GetObject.htm">GetObject Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>