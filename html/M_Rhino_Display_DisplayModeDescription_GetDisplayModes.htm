<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>DisplayModeDescription.GetDisplayModes Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="GetDisplayModes method" /><meta name="System.Keywords" content="DisplayModeDescription.GetDisplayModes method" /><meta name="Microsoft.Help.F1" content="Rhino.Display.DisplayModeDescription.GetDisplayModes" /><meta name="Microsoft.Help.Id" content="M:Rhino.Display.DisplayModeDescription.GetDisplayModes" /><meta name="Description" content="Gets all display mode descriptions that Rhino currently knows about." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Display" /><meta name="file" content="M_Rhino_Display_DisplayModeDescription_GetDisplayModes" /><meta name="guid" content="M_Rhino_Display_DisplayModeDescription_GetDisplayModes" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Display.htm" title="Rhino.Display" tocid="N_Rhino_Display">Rhino.Display</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Display_DisplayModeDescription.htm" title="DisplayModeDescription Class" tocid="T_Rhino_Display_DisplayModeDescription">DisplayModeDescription Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Display_DisplayModeDescription.htm" title="DisplayModeDescription Methods" tocid="Methods_T_Rhino_Display_DisplayModeDescription">DisplayModeDescription Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Display_DisplayModeDescription_AddDisplayMode.htm" title="AddDisplayMode Method " tocid="Overload_Rhino_Display_DisplayModeDescription_AddDisplayMode">AddDisplayMode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_CopyDisplayMode.htm" title="CopyDisplayMode Method " tocid="M_Rhino_Display_DisplayModeDescription_CopyDisplayMode">CopyDisplayMode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_DeleteDiplayMode.htm" title="DeleteDiplayMode Method " tocid="M_Rhino_Display_DisplayModeDescription_DeleteDiplayMode">DeleteDiplayMode Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_DeleteDisplayMode.htm" title="DeleteDisplayMode Method " tocid="M_Rhino_Display_DisplayModeDescription_DeleteDisplayMode">DeleteDisplayMode Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Display_DisplayModeDescription_Dispose.htm" title="Dispose Method " tocid="Overload_Rhino_Display_DisplayModeDescription_Dispose">Dispose Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_ExportToFile.htm" title="ExportToFile Method " tocid="M_Rhino_Display_DisplayModeDescription_ExportToFile">ExportToFile Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_Finalize.htm" title="Finalize Method " tocid="M_Rhino_Display_DisplayModeDescription_Finalize">Finalize Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_FindByName.htm" title="FindByName Method " tocid="M_Rhino_Display_DisplayModeDescription_FindByName">FindByName Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_GetDisplayMode.htm" title="GetDisplayMode Method " tocid="M_Rhino_Display_DisplayModeDescription_GetDisplayMode">GetDisplayMode Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_GetDisplayModes.htm" title="GetDisplayModes Method " tocid="M_Rhino_Display_DisplayModeDescription_GetDisplayModes">GetDisplayModes Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_ImportFromFile.htm" title="ImportFromFile Method " tocid="M_Rhino_Display_DisplayModeDescription_ImportFromFile">ImportFromFile Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Display_DisplayModeDescription_UpdateDisplayMode.htm" title="UpdateDisplayMode Method " tocid="M_Rhino_Display_DisplayModeDescription_UpdateDisplayMode">UpdateDisplayMode Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>DisplayModeDescription<span id="LST98AB3F45_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST98AB3F45_0?cpp=::|nu=.");</script>GetDisplayModes Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Gets all display mode descriptions that Rhino currently knows about.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Display.htm">Rhino.Display</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">DisplayModeDescription</span>[] <span class="identifier">GetDisplayModes</span>()</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">GetDisplayModes</span> <span class="keyword">As</span> <span class="identifier">DisplayModeDescription</span>()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Return Value</h4>Type: <span id="LST98AB3F45_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST98AB3F45_1?cpp=array&lt;");</script><a href="T_Rhino_Display_DisplayModeDescription.htm">DisplayModeDescription</a><span id="LST98AB3F45_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST98AB3F45_2?cpp=&gt;|vb=()|nu=[]");</script><br />
            Copies of all of the display mode descriptions. If you want to modify
            these descriptions, you must call UpdateDisplayMode or AddDisplayMode.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> Rhino.Display;

<span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-comment">// The following example code demonstrates how to modify advanced display settings using</span>
  <span class="highlight-comment">// the Rhino SDK. In this example, a display mode's mesh wireframe thickness (in pixels)</span>
  <span class="highlight-comment">// will be modified.</span>
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result AdvancedDisplay(Rhino.RhinoDoc doc)
  {
    <span class="highlight-comment">// Use the display attributes manager to build a list of display modes.</span>
    <span class="highlight-comment">// Note, these are copies of the originals...</span>
    DisplayModeDescription[] display_modes = DisplayModeDescription.GetDisplayModes();
    <span class="highlight-keyword">if</span>( display_modes==<span class="highlight-keyword">null</span> || display_modes.Length&lt;<span class="highlight-number">1</span> )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    <span class="highlight-comment">// Construct an options picker so the user can pick which</span>
    <span class="highlight-comment">// display mode they want modified</span>
    Rhino.Input.Custom.GetOption go = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetOption();
    go.SetCommandPrompt(<span class="highlight-literal">"Display mode to modify mesh thickness"</span>);
    List&lt;<span class="highlight-keyword">int</span>&gt; opt_list = <span class="highlight-keyword">new</span> List&lt;<span class="highlight-keyword">int</span>&gt;();

    <span class="highlight-keyword">for</span>( <span class="highlight-keyword">int</span> i=<span class="highlight-number">0</span>; i&lt;display_modes.Length; i++ )
    {
      <span class="highlight-keyword">string</span> english_name = display_modes[i].EnglishName;
      english_name = english_name.Replace(<span class="highlight-literal">"_"</span>, <span class="highlight-literal">""</span>);
      english_name = english_name.Replace(<span class="highlight-literal">" "</span>, <span class="highlight-literal">""</span>);
      english_name = english_name.Replace(<span class="highlight-literal">"-"</span>, <span class="highlight-literal">""</span>);
      english_name = english_name.Replace(<span class="highlight-literal">","</span>, <span class="highlight-literal">""</span>);
      english_name = english_name.Replace(<span class="highlight-literal">"."</span>, <span class="highlight-literal">""</span>);
      <span class="highlight-keyword">int</span> index = go.AddOption(english_name);
      opt_list.Add(index);
    }

    <span class="highlight-comment">// Get the command option</span>
    go.Get();
    <span class="highlight-keyword">if</span>( go.CommandResult() != Rhino.Commands.Result.Success )
      <span class="highlight-keyword">return</span> go.CommandResult();

    <span class="highlight-keyword">int</span> selected_index = go.Option().Index;
    DisplayModeDescription selected_description = <span class="highlight-keyword">null</span>;
    <span class="highlight-keyword">for</span>( <span class="highlight-keyword">int</span> i=<span class="highlight-number">0</span>; i&lt;opt_list.Count; i++ )
    {
      <span class="highlight-keyword">if</span>( opt_list[i]==selected_index )
      {
        selected_description = display_modes[i];
        <span class="highlight-keyword">break</span>;
      }
    }

    <span class="highlight-comment">// Validate...</span>
    <span class="highlight-keyword">if</span>( selected_description==<span class="highlight-keyword">null</span> )
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure;

    <span class="highlight-comment">// Modify the desired display mode. In this case, we</span>
    <span class="highlight-comment">// will just set the mesh wireframe thickness to zero.</span>
    selected_description.DisplayAttributes.MeshSpecificAttributes.MeshWireThickness = <span class="highlight-number">0</span>;
    <span class="highlight-comment">// Use the display attributes manager to update the display mode.</span>
    DisplayModeDescription.UpdateDisplayMode(selected_description);

    <span class="highlight-comment">// Force the document to regenerate.</span>
    doc.Views.Redraw();
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> System.Collections.Generic
<span class="highlight-keyword">Imports</span> Rhino.Display

<span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-comment">' The following example demonstrates how to modify advanced display settings using</span>
  <span class="highlight-comment">' RhinoCommon. In this example, a display mode's mesh wireframe thickness (in pixels)</span>
  <span class="highlight-comment">' will be modified.</span>
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> AdvancedDisplay(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' Use the display attributes manager to build a list of display modes.</span>
    <span class="highlight-comment">' Note, these are copies of the originals...</span>
    <span class="highlight-keyword">Dim</span> display_modes <span class="highlight-keyword">As</span> DisplayModeDescription() = DisplayModeDescription.GetDisplayModes()
    <span class="highlight-keyword">If</span> display_modes <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> display_modes.Length &lt; <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Construct an options picker so the user can pick which</span>
    <span class="highlight-comment">' display mode they want modified</span>
    <span class="highlight-keyword">Dim</span> go <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetOption()
    go.SetCommandPrompt(<span class="highlight-literal">"Display mode to modify mesh thickness"</span>)
    <span class="highlight-keyword">Dim</span> opt_list <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> <span class="highlight-keyword">Integer</span>)()

    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> display_modes.Length - <span class="highlight-number">1</span>
      <span class="highlight-keyword">Dim</span> english_name <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = display_modes(i).EnglishName
      english_name = english_name.Replace(<span class="highlight-literal">"_"</span>, <span class="highlight-literal">""</span>)
      english_name = english_name.Replace(<span class="highlight-literal">" "</span>, <span class="highlight-literal">""</span>)
      english_name = english_name.Replace(<span class="highlight-literal">"-"</span>, <span class="highlight-literal">""</span>)
      english_name = english_name.Replace(<span class="highlight-literal">","</span>, <span class="highlight-literal">""</span>)
      english_name = english_name.Replace(<span class="highlight-literal">"."</span>, <span class="highlight-literal">""</span>)
      <span class="highlight-keyword">Dim</span> index <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = go.AddOption(english_name)
      opt_list.Add(index)
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">' Get the command option</span>
    go.[<span class="highlight-keyword">Get</span>]()
    <span class="highlight-keyword">If</span> go.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> go.CommandResult()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Dim</span> selected_index <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = go.[<span class="highlight-keyword">Option</span>]().Index
    <span class="highlight-keyword">Dim</span> selected_description <span class="highlight-keyword">As</span> DisplayModeDescription = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> opt_list.Count - <span class="highlight-number">1</span>
      <span class="highlight-keyword">If</span> opt_list(i) = selected_index <span class="highlight-keyword">Then</span>
        selected_description = display_modes(i)
        <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">For</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">Next</span>

    <span class="highlight-comment">' Validate...</span>
    <span class="highlight-keyword">If</span> selected_description <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Failure
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-comment">' Modify the desired display mode. In this case, we</span>
    <span class="highlight-comment">' will just set the mesh wireframe thickness to zero.</span>
    selected_description.DisplayAttributes.MeshSpecificAttributes.MeshWireThickness = <span class="highlight-number">0</span>
    <span class="highlight-comment">' Use the display attributes manager to update the display mode.</span>
    DisplayModeDescription.UpdateDisplayMode(selected_description)

    <span class="highlight-comment">' Force the document to regenerate.</span>
    doc.Views.Redraw()
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-comment"># The following example demonstrates how to modify advanced display settings</span>
<span class="highlight-comment"># using RhinoCommon. In this example, a display mode's mesh wireframe thickness</span>
<span class="highlight-comment"># (in pixels) will be modified.</span>
<span class="highlight-keyword">def</span> AdvancedDisplay():
    <span class="highlight-comment"># Use the display attributes manager to build a list of display modes.</span>
    <span class="highlight-comment"># Note, these are copies of the originals...</span>
    display_modes = Rhino.Display.DisplayModeDescription.GetDisplayModes()
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> display_modes: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    <span class="highlight-comment"># Construct an options picker so the user can pick which</span>
    <span class="highlight-comment"># display mode they want modified</span>
    go = Rhino.Input.Custom.GetOption()
    go.SetCommandPrompt(<span class="highlight-literal">"Display mode to modify mesh thickness"</span>)
    opt_list = []
    <span class="highlight-keyword">for</span> i, mode <span class="highlight-keyword">in</span> enumerate(display_modes):
        english_name = mode.EnglishName
        english_name = english_name.translate(None, <span class="highlight-literal">"_ -,."</span>)
        opt_list.append( go.AddOption(english_name) )

    <span class="highlight-comment"># Get the command option</span>
    go.Get()
    <span class="highlight-keyword">if</span> go.CommandResult()!=Rhino.Commands.Result.Success:
      <span class="highlight-keyword">return</span> go.CommandResult();

    selected_index = go.Option().Index
    selected_description = None
    <span class="highlight-keyword">for</span> i,option <span class="highlight-keyword">in</span> enumerate(opt_list):
        <span class="highlight-keyword">if</span> option==selected_index:
            selected_description = display_modes[i]
            <span class="highlight-keyword">break</span>
    <span class="highlight-comment"># Validate...</span>
    <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> selected_description: <span class="highlight-keyword">return</span> Rhino.Commands.Result.Failure

    <span class="highlight-comment"># Modify the desired display mode. In this case, we</span>
    <span class="highlight-comment"># will just set the mesh wireframe thickness to zero.</span>
    selected_description.DisplayAttributes.MeshSpecificAttributes.MeshWireThickness = <span class="highlight-number">0</span>
    <span class="highlight-comment"># Use the display attributes manager to update the display mode.</span>
    Rhino.Display.DisplayModeDescription.UpdateDisplayMode(selected_description)
    <span class="highlight-comment"># Force the document to regenerate.</span>
    scriptcontext.doc.Views.Redraw()
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    AdvancedDisplay()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Display_DisplayModeDescription.htm">DisplayModeDescription Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Display.htm">Rhino.Display Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>