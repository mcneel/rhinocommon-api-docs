<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>NurbsSurface.Create Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Create method" /><meta name="System.Keywords" content="NurbsSurface.Create method" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.NurbsSurface.Create" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.NurbsSurface.Create(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)" /><meta name="Description" content="Constructs a new NURBS surface with internal uninitialized arrays." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_NurbsSurface_Create" /><meta name="guid" content="M_Rhino_Geometry_NurbsSurface_Create" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_NurbsSurface.htm" title="NurbsSurface Class" tocid="T_Rhino_Geometry_NurbsSurface">NurbsSurface Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_NurbsSurface.htm" title="NurbsSurface Methods" tocid="Methods_T_Rhino_Geometry_NurbsSurface">NurbsSurface Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_ConvertSpanToBezier.htm" title="ConvertSpanToBezier Method " tocid="M_Rhino_Geometry_NurbsSurface_ConvertSpanToBezier">ConvertSpanToBezier Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CopyFrom.htm" title="CopyFrom Method " tocid="M_Rhino_Geometry_NurbsSurface_CopyFrom">CopyFrom Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_Create.htm" title="Create Method " tocid="M_Rhino_Geometry_NurbsSurface_Create">Create Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateCurveOnSurface.htm" title="CreateCurveOnSurface Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateCurveOnSurface">CreateCurveOnSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateCurveOnSurfacePoints.htm" title="CreateCurveOnSurfacePoints Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateCurveOnSurfacePoints">CreateCurveOnSurfacePoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateFromCone.htm" title="CreateFromCone Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateFromCone">CreateFromCone Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_NurbsSurface_CreateFromCorners.htm" title="CreateFromCorners Method " tocid="Overload_Rhino_Geometry_NurbsSurface_CreateFromCorners">CreateFromCorners Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateFromCylinder.htm" title="CreateFromCylinder Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateFromCylinder">CreateFromCylinder Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateFromPlane.htm" title="CreateFromPlane Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateFromPlane">CreateFromPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateFromPoints.htm" title="CreateFromPoints Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateFromPoints">CreateFromPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateFromSphere.htm" title="CreateFromSphere Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateFromSphere">CreateFromSphere Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateFromTorus.htm" title="CreateFromTorus Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateFromTorus">CreateFromTorus Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_NurbsSurface_CreateNetworkSurface.htm" title="CreateNetworkSurface Method " tocid="Overload_Rhino_Geometry_NurbsSurface_CreateNetworkSurface">CreateNetworkSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateRailRevolvedSurface.htm" title="CreateRailRevolvedSurface Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateRailRevolvedSurface">CreateRailRevolvedSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateRuledSurface.htm" title="CreateRuledSurface Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateRuledSurface">CreateRuledSurface Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateSubDFriendly.htm" title="CreateSubDFriendly Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateSubDFriendly">CreateSubDFriendly Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_CreateThroughPoints.htm" title="CreateThroughPoints Method " tocid="M_Rhino_Geometry_NurbsSurface_CreateThroughPoints">CreateThroughPoints Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_EpsilonEquals.htm" title="EpsilonEquals Method " tocid="M_Rhino_Geometry_NurbsSurface_EpsilonEquals">EpsilonEquals Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_IncreaseDegreeU.htm" title="IncreaseDegreeU Method " tocid="M_Rhino_Geometry_NurbsSurface_IncreaseDegreeU">IncreaseDegreeU Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_IncreaseDegreeV.htm" title="IncreaseDegreeV Method " tocid="M_Rhino_Geometry_NurbsSurface_IncreaseDegreeV">IncreaseDegreeV Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_MakeCompatible.htm" title="MakeCompatible Method " tocid="M_Rhino_Geometry_NurbsSurface_MakeCompatible">MakeCompatible Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_MakeNonRational.htm" title="MakeNonRational Method " tocid="M_Rhino_Geometry_NurbsSurface_MakeNonRational">MakeNonRational Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_MakeRational.htm" title="MakeRational Method " tocid="M_Rhino_Geometry_NurbsSurface_MakeRational">MakeRational Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_NurbsSurface_UVNDirectionsAt.htm" title="UVNDirectionsAt Method " tocid="M_Rhino_Geometry_NurbsSurface_UVNDirectionsAt">UVNDirectionsAt Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>NurbsSurface<span id="LST651D8B12_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST651D8B12_0?cpp=::|nu=.");</script>Create Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Constructs a new NURBS surface with internal uninitialized arrays.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">NurbsSurface</span> <span class="identifier">Create</span>(
	<span class="identifier">int</span> <span class="parameter">dimension</span>,
	<span class="identifier">bool</span> <span class="parameter">isRational</span>,
	<span class="identifier">int</span> <span class="parameter">order0</span>,
	<span class="identifier">int</span> <span class="parameter">order1</span>,
	<span class="identifier">int</span> <span class="parameter">controlPointCount0</span>,
	<span class="identifier">int</span> <span class="parameter">controlPointCount1</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">Create</span> ( 
	<span class="parameter">dimension</span> <span class="keyword">As</span> <span class="identifier">Integer</span>,
	<span class="parameter">isRational</span> <span class="keyword">As</span> <span class="identifier">Boolean</span>,
	<span class="parameter">order0</span> <span class="keyword">As</span> <span class="identifier">Integer</span>,
	<span class="parameter">order1</span> <span class="keyword">As</span> <span class="identifier">Integer</span>,
	<span class="parameter">controlPointCount0</span> <span class="keyword">As</span> <span class="identifier">Integer</span>,
	<span class="parameter">controlPointCount1</span> <span class="keyword">As</span> <span class="identifier">Integer</span>
) <span class="keyword">As</span> <span class="identifier">NurbsSurface</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">dimension</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">System<span id="LST651D8B12_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST651D8B12_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />The number of dimensions.<p>&gt;= 1. This value is usually 3.</p></dd><dt><span class="parameter">isRational</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank">System<span id="LST651D8B12_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST651D8B12_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Boolean</a><br />true to make a rational NURBS.</dd><dt><span class="parameter">order0</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">System<span id="LST651D8B12_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST651D8B12_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />The order in U direction.<p>&gt;= 2.</p></dd><dt><span class="parameter">order1</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">System<span id="LST651D8B12_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST651D8B12_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />The order in V direction.<p>&gt;= 2.</p></dd><dt><span class="parameter">controlPointCount0</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">System<span id="LST651D8B12_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST651D8B12_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />Control point count in U direction.<p>&gt;= order0.</p></dd><dt><span class="parameter">controlPointCount1</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.int32" target="_blank">System<span id="LST651D8B12_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST651D8B12_6?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Int32</a><br />Control point count in V direction.<p>&gt;= order1.</p></dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="T_Rhino_Geometry_NurbsSurface.htm">NurbsSurface</a><br />A new NURBS surface, or null on error.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Geometry;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CreateSurfaceFromPointsAndKnotsCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csCreateSurfaceFromPointsAndKnots"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">bool</span> is_rational = <span class="highlight-keyword">false</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> number_of_dimensions = <span class="highlight-number">3</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> u_degree = <span class="highlight-number">2</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> v_degree = <span class="highlight-number">3</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> u_control_point_count = <span class="highlight-number">3</span>;
      <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> v_control_point_count = <span class="highlight-number">5</span>;

      <span class="highlight-comment">// The knot vectors do NOT have the 2 superfluous knots</span>
      <span class="highlight-comment">// at the start and end of the knot vector.  If you are</span>
      <span class="highlight-comment">// coming from a system that has the 2 superfluous knots,</span>
      <span class="highlight-comment">// just ignore them when creating NURBS surfaces.</span>
      <span class="highlight-keyword">var</span> u_knots = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[u_control_point_count + u_degree - <span class="highlight-number">1</span>];
      <span class="highlight-keyword">var</span> v_knots = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[v_control_point_count + v_degree - <span class="highlight-number">1</span>];

      <span class="highlight-comment">// make up a quadratic knot vector with no interior knots</span>
      u_knots[<span class="highlight-number">0</span>] = u_knots[<span class="highlight-number">1</span>] = <span class="highlight-number">0.0</span>;
      u_knots[<span class="highlight-number">2</span>] = u_knots[<span class="highlight-number">3</span>] = <span class="highlight-number">1.0</span>;

      <span class="highlight-comment">// make up a cubic knot vector with one simple interior knot</span>
      v_knots[<span class="highlight-number">0</span>] = v_knots[<span class="highlight-number">1</span>] = v_knots[<span class="highlight-number">2</span>] = <span class="highlight-number">0.0</span>;
      v_knots[<span class="highlight-number">3</span>] = <span class="highlight-number">1.5</span>;
      v_knots[<span class="highlight-number">4</span>] = v_knots[<span class="highlight-number">5</span>] = v_knots[<span class="highlight-number">6</span>] = <span class="highlight-number">2.0</span>;

      <span class="highlight-comment">// Rational control points can be in either homogeneous</span>
      <span class="highlight-comment">// or euclidean form. Non-rational control points do not</span>
      <span class="highlight-comment">// need to specify a weight.  </span>
      <span class="highlight-keyword">var</span> control_points = <span class="highlight-keyword">new</span> Point3d[u_control_point_count, v_control_point_count];

      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> u = <span class="highlight-number">0</span>; u &lt; u_control_point_count; u++)
      {
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> v = <span class="highlight-number">0</span>; v &lt; v_control_point_count; v++)
        {
          control_points[u,v] = <span class="highlight-keyword">new</span> Point3d(u, v, u-v);
        }
      }

      <span class="highlight-comment">// creates internal uninitialized arrays for </span>
      <span class="highlight-comment">// control points and knots</span>
      <span class="highlight-keyword">var</span> nurbs_surface = NurbsSurface.Create(
        number_of_dimensions,
        is_rational,
        u_degree + <span class="highlight-number">1</span>,
        v_degree + <span class="highlight-number">1</span>,
        u_control_point_count,
        v_control_point_count
        );

      <span class="highlight-comment">// add the knots</span>
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> u = <span class="highlight-number">0</span>;  u &lt; nurbs_surface.KnotsU.Count; u++)
        nurbs_surface.KnotsU[u] = u_knots[u];
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> v = <span class="highlight-number">0</span>; v &lt; nurbs_surface.KnotsV.Count; v++)
        nurbs_surface.KnotsV[v] = v_knots[v];

      <span class="highlight-comment">// add the control points</span>
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> u = <span class="highlight-number">0</span>; u &lt; nurbs_surface.Points.CountU; u++)
      {
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> v = <span class="highlight-number">0</span>; v &lt; nurbs_surface.Points.CountV; v++)
        {
          nurbs_surface.Points.SetControlPoint(u, v, control_points[u, v]);
        }
      }

      <span class="highlight-keyword">if</span> (nurbs_surface.IsValid)
      {
        doc.Objects.AddSurface(nurbs_surface);
        doc.Views.Redraw();
        <span class="highlight-keyword">return</span> Result.Success;
      }
      <span class="highlight-keyword">return</span> Result.Failure;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Geometry

<span class="highlight-keyword">Namespace</span> examples_vb
  &lt;System.Runtime.InteropServices.Guid(<span class="highlight-literal">"652FCBE5-D8DC-4472-AB94-5A70998A3895"</span>)&gt; _
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> CreateSurfaceFromPointsAndKnotsCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbCreateSurfaceFromPointsAndKnots"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Const</span> isRational <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = <span class="highlight-keyword">False</span>
      <span class="highlight-keyword">Const</span> numberOfDimensions <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
      <span class="highlight-keyword">Const</span> uDegree <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">2</span>
      <span class="highlight-keyword">Const</span> vDegree <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
      <span class="highlight-keyword">Const</span> uControlPointCount <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
      <span class="highlight-keyword">Const</span> vControlPointCount <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">5</span>

      <span class="highlight-comment">' The knot vectors do NOT have the 2 superfluous knots</span>
      <span class="highlight-comment">' at the start and end of the knot vector.  If you are</span>
      <span class="highlight-comment">' coming from a system that has the 2 superfluous knots,</span>
      <span class="highlight-comment">' just ignore them when creating NURBS surfaces.</span>
      <span class="highlight-keyword">Dim</span> uKnots = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Double</span>(uControlPointCount + uDegree - <span class="highlight-number">2</span>) {}
      <span class="highlight-keyword">Dim</span> vKnots = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Double</span>(vControlPointCount + vDegree - <span class="highlight-number">2</span>) {}

      <span class="highlight-comment">' make up a quadratic knot vector with no interior knots</span>
      uKnots(<span class="highlight-number">0</span>) = InlineAssignHelper(uKnots(<span class="highlight-number">1</span>), <span class="highlight-number">0.0</span>)
      uKnots(<span class="highlight-number">2</span>) = InlineAssignHelper(uKnots(<span class="highlight-number">3</span>), <span class="highlight-number">1.0</span>)

      <span class="highlight-comment">' make up a cubic knot vector with one simple interior knot</span>
      vKnots(<span class="highlight-number">0</span>) = InlineAssignHelper(vKnots(<span class="highlight-number">1</span>), InlineAssignHelper(vKnots(<span class="highlight-number">2</span>), <span class="highlight-number">0.0</span>))
      vKnots(<span class="highlight-number">3</span>) = <span class="highlight-number">1.5</span>
      vKnots(<span class="highlight-number">4</span>) = InlineAssignHelper(vKnots(<span class="highlight-number">5</span>), InlineAssignHelper(vKnots(<span class="highlight-number">6</span>), <span class="highlight-number">2.0</span>))

      <span class="highlight-comment">' Rational control points can be in either homogeneous</span>
      <span class="highlight-comment">' or euclidean form. Non-rational control points do not</span>
      <span class="highlight-comment">' need to specify a weight.  </span>
      <span class="highlight-keyword">Dim</span> controlPoints = <span class="highlight-keyword">New</span> Point3d(uControlPointCount - <span class="highlight-number">1</span>, vControlPointCount - <span class="highlight-number">1</span>) {}

      <span class="highlight-keyword">For</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> uControlPointCount - <span class="highlight-number">1</span>
        <span class="highlight-keyword">For</span> v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> vControlPointCount - <span class="highlight-number">1</span>
          controlPoints(u, v) = <span class="highlight-keyword">New</span> Point3d(u, v, u - v)
        <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">Next</span>

      <span class="highlight-comment">' creates internal uninitialized arrays for </span>
      <span class="highlight-comment">' control points and knots</span>
      <span class="highlight-keyword">Dim</span> nurbsSurface__1 = NurbsSurface.Create(numberOfDimensions, isRational, uDegree + <span class="highlight-number">1</span>, vDegree + <span class="highlight-number">1</span>, uControlPointCount, vControlPointCount)

      <span class="highlight-comment">' add the knots</span>
      <span class="highlight-keyword">For</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.KnotsU.Count - <span class="highlight-number">1</span>
        nurbsSurface__1.KnotsU(u) = uKnots(u)
      <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">For</span> v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.KnotsV.Count - <span class="highlight-number">1</span>
        nurbsSurface__1.KnotsV(v) = vKnots(v)
      <span class="highlight-keyword">Next</span>

      <span class="highlight-comment">' add the control points</span>
      <span class="highlight-keyword">For</span> u <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.Points.CountU - <span class="highlight-number">1</span>
        <span class="highlight-keyword">For</span> v <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> nurbsSurface__1.Points.CountV - <span class="highlight-number">1</span>
          nurbsSurface__1.Points.SetControlPoint(u, v, controlPoints(u, v))
        <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">Next</span>

      <span class="highlight-keyword">If</span> nurbsSurface__1.IsValid <span class="highlight-keyword">Then</span>
        doc.Objects.AddSurface(nurbsSurface__1)
        doc.Views.Redraw()
        <span class="highlight-keyword">Return</span> Result.Success
      <span class="highlight-keyword">Else</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> InlineAssignHelper(<span class="highlight-keyword">Of</span> T)(<span class="highlight-keyword">ByRef</span> target <span class="highlight-keyword">As</span> T, value <span class="highlight-keyword">As</span> T) <span class="highlight-keyword">As</span> T
      target = value
      <span class="highlight-keyword">Return</span> value
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> Point3d, NurbsSurface, ControlPoint
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> RunCommand():
  bIsRational = False
  dim = <span class="highlight-number">3</span>
  u_degree = <span class="highlight-number">2</span>
  v_degree = <span class="highlight-number">3</span>
  u_cv_count = <span class="highlight-number">3</span>
  v_cv_count = <span class="highlight-number">5</span>

  <span class="highlight-comment"># make up a quadratic knot vector with no interior knots</span>
  u_knot = [<span class="highlight-number">0.0</span>, <span class="highlight-number">0.0</span>, <span class="highlight-number">1.0</span>, <span class="highlight-number">1.0</span>] 

  <span class="highlight-comment"># make up a cubic knot vector with one simple interior knot</span>
  v_knot = [<span class="highlight-number">0.0</span>, <span class="highlight-number">0.0</span>, <span class="highlight-number">0.0</span>, <span class="highlight-number">1.5</span>, <span class="highlight-number">2.0</span>, <span class="highlight-number">2.0</span>, <span class="highlight-number">2.0</span>]

  <span class="highlight-comment"># Rational control points can be in either homogeneous</span>
  <span class="highlight-comment"># or euclidean form. Non-rational control points do not</span>
  <span class="highlight-comment"># need to specify a weight.  </span>
  CV = dict( ((i,j),None) <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">2</span>) <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">3</span>) )
  <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, u_cv_count):
    <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, v_cv_count):
      CV[i,j] = Point3d(i, j, i-j)

  <span class="highlight-comment"># creates internal uninitialized arrays for </span>
  <span class="highlight-comment"># control points and knots</span>
  nurbs_surface = NurbsSurface.Create(
    dim,
    bIsRational,
    u_degree + <span class="highlight-number">1</span>,
    v_degree + <span class="highlight-number">1</span>,
    u_cv_count,
    v_cv_count
    )

  <span class="highlight-comment"># add the knots</span>
  <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.KnotsU.Count):
    nurbs_surface.KnotsU[i] = u_knot[i]
  <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.KnotsV.Count):
    nurbs_surface.KnotsV[j] = v_knot[j]

  <span class="highlight-comment"># add the control points</span>
  <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.Points.CountU):
    <span class="highlight-keyword">for</span> j <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, nurbs_surface.Points.CountV):
      nurbs_surface.Points.SetControlPoint(i, j, ControlPoint(CV[i, j]))

  <span class="highlight-keyword">if</span> nurbs_surface.IsValid:
    doc.Objects.AddSurface(nurbs_surface)
    doc.Views.Redraw()

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_NurbsSurface.htm">NurbsSurface Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.17.22102.05000 (Last updated: 4/21/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>