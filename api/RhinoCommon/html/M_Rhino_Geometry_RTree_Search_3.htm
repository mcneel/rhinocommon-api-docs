<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>RTree.Search Method (Sphere, EventHandler(RTreeEventArgs), Object)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.Sphere,System.EventHandler{Rhino.Geometry.RTreeEventArgs},System.Object)" /><meta name="Description" content="Searches for items in a sphere." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_RTree_Search_3" /><meta name="guid" content="M_Rhino_Geometry_RTree_Search_3" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_RTree.htm" title="RTree Class" tocid="T_Rhino_Geometry_RTree">RTree Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_RTree.htm" title="RTree Methods" tocid="Methods_T_Rhino_Geometry_RTree">RTree Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_RTree_Search.htm" title="Search Method " tocid="Overload_Rhino_Geometry_RTree_Search">Search Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_RTree_Search.htm" title="Search Method (BoundingBox, EventHandler(RTreeEventArgs))" tocid="M_Rhino_Geometry_RTree_Search">Search Method (BoundingBox, EventHandler(RTreeEventArgs))</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_RTree_Search_2.htm" title="Search Method (Sphere, EventHandler(RTreeEventArgs))" tocid="M_Rhino_Geometry_RTree_Search_2">Search Method (Sphere, EventHandler(RTreeEventArgs))</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_RTree_Search_1.htm" title="Search Method (BoundingBox, EventHandler(RTreeEventArgs), Object)" tocid="M_Rhino_Geometry_RTree_Search_1">Search Method (BoundingBox, EventHandler(RTreeEventArgs), Object)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_RTree_Search_3.htm" title="Search Method (Sphere, EventHandler(RTreeEventArgs), Object)" tocid="M_Rhino_Geometry_RTree_Search_3">Search Method (Sphere, EventHandler(RTreeEventArgs), Object)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>RTree<span id="LST239114F5_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_0?cpp=::|nu=.");</script>Search Method (Sphere, EventHandler<span id="LST239114F5_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_1?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>RTreeEventArgs<span id="LST239114F5_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_2?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Object)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Searches for items in a sphere.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">bool</span> <span class="identifier">Search</span>(
	<span class="identifier">Sphere</span> <span class="parameter">sphere</span>,
	<span class="identifier">EventHandler</span>&lt;<span class="identifier">RTreeEventArgs</span>&gt; <span class="parameter">callback</span>,
	<span class="identifier">Object</span> <span class="parameter">tag</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Function</span> <span class="identifier">Search</span> ( 
	<span class="parameter">sphere</span> <span class="keyword">As</span> <span class="identifier">Sphere</span>,
	<span class="parameter">callback</span> <span class="keyword">As</span> <span class="identifier">EventHandler</span>(<span class="keyword">Of</span> <span class="identifier">RTreeEventArgs</span>),
	<span class="parameter">tag</span> <span class="keyword">As</span> <span class="identifier">Object</span>
) <span class="keyword">As</span> <span class="identifier">Boolean</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">sphere</span></dt><dd>Type: <a href="T_Rhino_Geometry_Sphere.htm">Rhino.Geometry<span id="LST239114F5_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Sphere</a><br />bounds used for searching.</dd><dt><span class="parameter">callback</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.eventhandler-1" target="_blank">System<span id="LST239114F5_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>EventHandler</a><span id="LST239114F5_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_5?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script><a href="T_Rhino_Geometry_RTreeEventArgs.htm">RTreeEventArgs</a><span id="LST239114F5_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_6?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script><br />An event handler to be raised when items are found.</dd><dt><span class="parameter">tag</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">System<span id="LST239114F5_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST239114F5_7?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />State to be passed inside the <a href="T_Rhino_Geometry_RTreeEventArgs.htm">RTreeEventArgs</a> Tag property.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.boolean" target="_blank">Boolean</a><br />
            true if entire tree was searched. It is possible no results were found.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Geometry;

<span class="highlight-keyword">namespace</span> examples_cs
{
  [System.Runtime.InteropServices.Guid(<span class="highlight-literal">"0E82E6DA-5335-453A-AC94-2499BBBCBE55"</span>)]
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> RTreeClosestPoint : Rhino.Commands.Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"cs_RtreeClosestPoint"</span>; } }

    <span class="highlight-keyword">void</span> SearchCallback(<span class="highlight-keyword">object</span> sender, RTreeEventArgs e)
    {
      SearchData data = e.Tag <span class="highlight-keyword">as</span> SearchData;
      <span class="highlight-keyword">if</span> (data == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span>;
      data.HitCount = data.HitCount + <span class="highlight-number">1</span>;
      Point3f vertex = data.Mesh.Vertices[e.Id];
      <span class="highlight-keyword">double</span> distance = data.Point.DistanceTo(vertex);
      <span class="highlight-keyword">if</span> (data.Index == <span class="highlight-number">-1</span> || data.Distance &gt; distance)
      {
        <span class="highlight-comment">// shrink the sphere to help improve the test</span>
        e.SearchSphere = <span class="highlight-keyword">new</span> Sphere(data.Point, distance);
        data.Index = e.Id;
        data.Distance = distance;
      }
    }

    <span class="highlight-keyword">class</span> SearchData
    {
      <span class="highlight-keyword">public</span> SearchData(Mesh mesh, Point3d point)
      {
        Point = point;
        Mesh = mesh;
        HitCount = <span class="highlight-number">0</span>;
        Index = <span class="highlight-number">-1</span>;
        Distance = <span class="highlight-number">0</span>;
      }

      <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> HitCount { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
      <span class="highlight-keyword">public</span> Point3d Point { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
      <span class="highlight-keyword">public</span> Mesh Mesh { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
      <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> Index { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
      <span class="highlight-keyword">public</span> <span class="highlight-keyword">double</span> Distance { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Rhino.Commands.Result RunCommand(RhinoDoc doc, Rhino.Commands.RunMode mode)
    {
      Rhino.DocObjects.ObjRef objref;
      <span class="highlight-keyword">var</span> rc = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"select mesh"</span>, <span class="highlight-keyword">false</span>, Rhino.DocObjects.ObjectType.Mesh, <span class="highlight-keyword">out</span> objref);
      <span class="highlight-keyword">if</span> (rc != Rhino.Commands.Result.Success)
        <span class="highlight-keyword">return</span> rc;

      Mesh mesh = objref.Mesh();
      objref.Object().Select(<span class="highlight-keyword">false</span>);
      doc.Views.Redraw();

      <span class="highlight-keyword">using</span> (RTree tree = <span class="highlight-keyword">new</span> RTree())
      {
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; mesh.Vertices.Count; i++)
        {
          <span class="highlight-comment">// we can make a C++ function that just builds an rtree from the</span>
          <span class="highlight-comment">// vertices in one quick shot, but for now...</span>
          tree.Insert(mesh.Vertices[i], i);
        }

        <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>)
        {
          Point3d point;
          rc = Rhino.Input.RhinoGet.GetPoint(<span class="highlight-literal">"test point"</span>, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">out</span> point);
          <span class="highlight-keyword">if</span> (rc != Rhino.Commands.Result.Success)
            <span class="highlight-keyword">break</span>;

          SearchData data = <span class="highlight-keyword">new</span> SearchData(mesh, point);
          <span class="highlight-comment">// Use the first vertex in the mesh to define a start sphere</span>
          <span class="highlight-keyword">double</span> distance = point.DistanceTo(mesh.Vertices[<span class="highlight-number">0</span>]);
          Sphere sphere = <span class="highlight-keyword">new</span> Sphere(point, distance * <span class="highlight-number">1.1</span>);
          <span class="highlight-keyword">if</span> (tree.Search(sphere, SearchCallback, data))
          {
            doc.Objects.AddPoint(mesh.Vertices[data.Index]);
            doc.Views.Redraw();
            RhinoApp.WriteLine(<span class="highlight-literal">"Found point in {0} tests"</span>, data.HitCount);
          }
        }
      }
      <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Geometry

<span class="highlight-keyword">Namespace</span> examples_vb
  &lt;System.Runtime.InteropServices.Guid(<span class="highlight-literal">"B89D4A42-A712-4FA4-9ABF-6BE1FB962D24"</span>)&gt; _
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> RTreeClosestPoint
    <span class="highlight-keyword">Inherits</span> Rhino.Commands.Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vb_RtreeClosestPoint"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> SearchCallback(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> RTreeEventArgs)
      <span class="highlight-keyword">Dim</span> data <span class="highlight-keyword">As</span> SearchData = <span class="highlight-keyword">TryCast</span>(e.Tag, SearchData)
      data.HitCount = data.HitCount + <span class="highlight-number">1</span>
      <span class="highlight-keyword">Dim</span> vertex <span class="highlight-keyword">As</span> Point3f = data.Mesh.Vertices(e.Id)
      <span class="highlight-keyword">Dim</span> distance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = data.Point.DistanceTo(vertex)
      <span class="highlight-keyword">If</span> data.Index = <span class="highlight-number">-1</span> <span class="highlight-keyword">OrElse</span> data.Distance &gt; distance <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' shrink the sphere to help improve the test</span>
        e.SearchSphere = <span class="highlight-keyword">New</span> Sphere(data.Point, distance)
        data.Index = e.Id
        data.Distance = distance
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Class</span> SearchData
      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>(mesh__1 <span class="highlight-keyword">As</span> Mesh, point__2 <span class="highlight-keyword">As</span> Point3d)
        Point = point__2
        Mesh = mesh__1
        HitCount = <span class="highlight-number">0</span>
        Index = <span class="highlight-number">-1</span>
        Distance = <span class="highlight-number">0</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Property</span> HitCount <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Property</span> Point <span class="highlight-keyword">As</span> Point3d
      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Property</span> Mesh <span class="highlight-keyword">As</span> Mesh
      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Property</span> Index <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>
      <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Property</span> Distance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> Rhino.Commands.RunMode) <span class="highlight-keyword">As</span> Rhino.Commands.Result
      <span class="highlight-keyword">Dim</span> objref <span class="highlight-keyword">As</span> Rhino.DocObjects.ObjRef = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc = Rhino.Input.RhinoGet.GetOneObject(<span class="highlight-literal">"select mesh"</span>, <span class="highlight-keyword">False</span>, Rhino.DocObjects.ObjectType.Mesh, objref)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> mesh <span class="highlight-keyword">As</span> Mesh = objref.Mesh()
      objref.<span class="highlight-keyword">Object</span>().<span class="highlight-keyword">Select</span>(<span class="highlight-keyword">False</span>)
      doc.Views.Redraw()

      <span class="highlight-keyword">Using</span> tree <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> RTree()
        <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> mesh.Vertices.Count - <span class="highlight-number">1</span>
          <span class="highlight-comment">' we can make a C++ function that just builds an rtree from the</span>
          <span class="highlight-comment">' vertices in one quick shot, but for now...</span>
          tree.Insert(mesh.Vertices(i), i)
        <span class="highlight-keyword">Next</span>

        <span class="highlight-keyword">Dim</span> point <span class="highlight-keyword">As</span> Point3d
        <span class="highlight-keyword">While</span> <span class="highlight-keyword">True</span>
          rc = Rhino.Input.RhinoGet.GetPoint(<span class="highlight-literal">"test point"</span>, <span class="highlight-keyword">False</span>, point)
          <span class="highlight-keyword">If</span> rc &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
          <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

          <span class="highlight-keyword">Dim</span> data <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> SearchData(mesh, point)
          <span class="highlight-comment">' Use the first vertex in the mesh to define a start sphere</span>
          <span class="highlight-keyword">Dim</span> distance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = point.DistanceTo(mesh.Vertices(<span class="highlight-number">0</span>))
          <span class="highlight-keyword">Dim</span> sphere <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Sphere(point, distance * <span class="highlight-number">1.1</span>)
          <span class="highlight-keyword">If</span> tree.Search(sphere, <span class="highlight-keyword">AddressOf</span> SearchCallback, data) <span class="highlight-keyword">Then</span>
            doc.Objects.AddPoint(mesh.Vertices(data.Index))
            doc.Views.Redraw()
            RhinoApp.WriteLine(<span class="highlight-literal">"Found point in {0} tests"</span>, data.HitCount)
          <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
      <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs

<span class="highlight-comment"># data passed to the RTree's SearchCallback function that</span>
<span class="highlight-comment"># we can use for recording what is going on</span>
<span class="highlight-keyword">class</span> SearchData:
    <span class="highlight-keyword">def</span> __init__(self, mesh, point):
        self.HitCount = <span class="highlight-number">0</span>
        self.Mesh = mesh
        self.Point = point
        self.Index = <span class="highlight-number">-1</span>
        self.Distance = <span class="highlight-number">0</span>


<span class="highlight-keyword">def</span> SearchCallback(sender, e):
    data = e.Tag
    data.HitCount += <span class="highlight-number">1</span>
    vertex = data.Mesh.Vertices[e.Id]
    distance = data.Point.DistanceTo(vertex)
    <span class="highlight-keyword">if</span> data.Index == <span class="highlight-number">-1</span> <span class="highlight-keyword">or</span> data.Distance &gt; distance:
        <span class="highlight-comment"># shrink the sphere to help improve the test</span>
        e.SearchSphere = Rhino.Geometry.Sphere(data.Point, distance)
        data.Index = e.Id
        data.Distance = distance

<span class="highlight-keyword">def</span> RunSearch():
    id = rs.GetObject(<span class="highlight-literal">"select mesh"</span>, rs.filter.mesh)
    mesh = rs.coercemesh(id)
    <span class="highlight-keyword">if</span> mesh:
        rs.UnselectObject(id)
        tree = Rhino.Geometry.RTree()
        <span class="highlight-comment"># I can add a RhinoCommon function that just builds an rtree from the</span>
        <span class="highlight-comment"># vertices in one quick shot, but for now...</span>
        <span class="highlight-keyword">for</span> i,vertex <span class="highlight-keyword">in</span> enumerate(mesh.Vertices): tree.Insert(vertex, i)

        <span class="highlight-keyword">while</span>(True):
            point = rs.GetPoint(<span class="highlight-literal">"test point"</span>)
            <span class="highlight-keyword">if</span> <span class="highlight-keyword">not</span> point: <span class="highlight-keyword">break</span>

            data = SearchData(mesh, point)
            <span class="highlight-comment"># Use the first vertex in the mesh to define a start sphere</span>
            distance = point.DistanceTo(mesh.Vertices[<span class="highlight-number">0</span>])
            sphere = Rhino.Geometry.Sphere(point, distance * <span class="highlight-number">1.1</span>)
            <span class="highlight-keyword">if</span> tree.Search(sphere, SearchCallback, data):
                rs.AddPoint(mesh.Vertices[data.Index])
                <span class="highlight-keyword">print</span> <span class="highlight-literal">"Found point in {0} tests"</span>.format(data.HitCount)

<span class="highlight-keyword">if</span> __name__==<span class="highlight-literal">"__main__"</span>:
    RunSearch()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_RTree.htm">RTree Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Geometry_RTree_Search.htm">Search Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>