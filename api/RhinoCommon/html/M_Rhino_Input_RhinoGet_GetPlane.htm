<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>RhinoGet.GetPlane Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="GetPlane method" /><meta name="System.Keywords" content="RhinoGet.GetPlane method" /><meta name="Microsoft.Help.F1" content="Rhino.Input.RhinoGet.GetPlane" /><meta name="Microsoft.Help.Id" content="M:Rhino.Input.RhinoGet.GetPlane(Rhino.Geometry.Plane@)" /><meta name="Description" content="Gets an oriented infinite plane." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Input" /><meta name="file" content="M_Rhino_Input_RhinoGet_GetPlane" /><meta name="guid" content="M_Rhino_Input_RhinoGet_GetPlane" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Input.htm" title="Rhino.Input" tocid="N_Rhino_Input">Rhino.Input</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Input_RhinoGet.htm" title="RhinoGet Class" tocid="T_Rhino_Input_RhinoGet">RhinoGet Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Input_RhinoGet.htm" title="RhinoGet Methods" tocid="Methods_T_Rhino_Input_RhinoGet">RhinoGet Methods</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_Get2dRectangle.htm" title="Get2dRectangle Method " tocid="M_Rhino_Input_RhinoGet_Get2dRectangle">Get2dRectangle Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetAngle.htm" title="GetAngle Method " tocid="M_Rhino_Input_RhinoGet_GetAngle">GetAngle Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetArc.htm" title="GetArc Method " tocid="M_Rhino_Input_RhinoGet_GetArc">GetArc Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetBool.htm" title="GetBool Method " tocid="M_Rhino_Input_RhinoGet_GetBool">GetBool Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetBox.htm" title="GetBox Method " tocid="Overload_Rhino_Input_RhinoGet_GetBox">GetBox Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetBoxWithCounts.htm" title="GetBoxWithCounts Method " tocid="M_Rhino_Input_RhinoGet_GetBoxWithCounts">GetBoxWithCounts Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetCircle.htm" title="GetCircle Method " tocid="M_Rhino_Input_RhinoGet_GetCircle">GetCircle Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetColor.htm" title="GetColor Method " tocid="M_Rhino_Input_RhinoGet_GetColor">GetColor Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetFileName.htm" title="GetFileName Method " tocid="Overload_Rhino_Input_RhinoGet_GetFileName">GetFileName Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetFileNameScripted.htm" title="GetFileNameScripted Method " tocid="M_Rhino_Input_RhinoGet_GetFileNameScripted">GetFileNameScripted Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetGrip.htm" title="GetGrip Method " tocid="M_Rhino_Input_RhinoGet_GetGrip">GetGrip Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetGrips.htm" title="GetGrips Method " tocid="M_Rhino_Input_RhinoGet_GetGrips">GetGrips Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetHelix.htm" title="GetHelix Method " tocid="M_Rhino_Input_RhinoGet_GetHelix">GetHelix Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetInteger.htm" title="GetInteger Method " tocid="Overload_Rhino_Input_RhinoGet_GetInteger">GetInteger Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetLine.htm" title="GetLine Method " tocid="M_Rhino_Input_RhinoGet_GetLine">GetLine Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetLinearDimension.htm" title="GetLinearDimension Method " tocid="M_Rhino_Input_RhinoGet_GetLinearDimension">GetLinearDimension Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetMeshParameters.htm" title="GetMeshParameters Method " tocid="M_Rhino_Input_RhinoGet_GetMeshParameters">GetMeshParameters Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetMultipleObjects.htm" title="GetMultipleObjects Method " tocid="Overload_Rhino_Input_RhinoGet_GetMultipleObjects">GetMultipleObjects Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetNumber.htm" title="GetNumber Method " tocid="Overload_Rhino_Input_RhinoGet_GetNumber">GetNumber Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetOneObject.htm" title="GetOneObject Method " tocid="Overload_Rhino_Input_RhinoGet_GetOneObject">GetOneObject Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetPlane.htm" title="GetPlane Method " tocid="M_Rhino_Input_RhinoGet_GetPlane">GetPlane Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetPoint.htm" title="GetPoint Method " tocid="M_Rhino_Input_RhinoGet_GetPoint">GetPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetPointOnMesh.htm" title="GetPointOnMesh Method " tocid="Overload_Rhino_Input_RhinoGet_GetPointOnMesh">GetPointOnMesh Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetPolygon.htm" title="GetPolygon Method " tocid="M_Rhino_Input_RhinoGet_GetPolygon">GetPolygon Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetPolyline.htm" title="GetPolyline Method " tocid="M_Rhino_Input_RhinoGet_GetPolyline">GetPolyline Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetPrintWindow.htm" title="GetPrintWindow Method " tocid="M_Rhino_Input_RhinoGet_GetPrintWindow">GetPrintWindow Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_GetRectangle.htm" title="GetRectangle Method " tocid="Overload_Rhino_Input_RhinoGet_GetRectangle">GetRectangle Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetRectangleWithCounts.htm" title="GetRectangleWithCounts Method " tocid="M_Rhino_Input_RhinoGet_GetRectangleWithCounts">GetRectangleWithCounts Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetSpiral.htm" title="GetSpiral Method " tocid="M_Rhino_Input_RhinoGet_GetSpiral">GetSpiral Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetString.htm" title="GetString Method " tocid="M_Rhino_Input_RhinoGet_GetString">GetString Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_GetView.htm" title="GetView Method " tocid="M_Rhino_Input_RhinoGet_GetView">GetView Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_InGet.htm" title="InGet Method " tocid="M_Rhino_Input_RhinoGet_InGet">InGet Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_InGetObject.htm" title="InGetObject Method " tocid="M_Rhino_Input_RhinoGet_InGetObject">InGetObject Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Input_RhinoGet_InGetPoint.htm" title="InGetPoint Method " tocid="M_Rhino_Input_RhinoGet_InGetPoint">InGetPoint Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Input_RhinoGet_StringToCommandOptionName.htm" title="StringToCommandOptionName Method " tocid="Overload_Rhino_Input_RhinoGet_StringToCommandOptionName">StringToCommandOptionName Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>RhinoGet<span id="LSTD6AC836C_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD6AC836C_0?cpp=::|nu=.");</script>GetPlane Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Gets an oriented infinite plane.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Input.htm">Rhino.Input</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Result</span> <span class="identifier">GetPlane</span>(
	<span class="keyword">out</span> <span class="identifier">Plane</span> <span class="parameter">plane</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">GetPlane</span> ( 
	&lt;<span class="identifier">OutAttribute</span>&gt; <span class="keyword">ByRef</span> <span class="parameter">plane</span> <span class="keyword">As</span> <span class="identifier">Plane</span>
) <span class="keyword">As</span> <span class="identifier">Result</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">plane</span></dt><dd>Type: <a href="T_Rhino_Geometry_Plane.htm">Rhino.Geometry<span id="LSTD6AC836C_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD6AC836C_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Plane</a><span id="LSTD6AC836C_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD6AC836C_2?cpp=%");</script><br />The plane result.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <a href="T_Rhino_Commands_Result.htm">Result</a><br /><p>Commands.Result.Success - got plane.</p><p>Commands.Result.Nothing - user pressed enter.</p><p>Commands.Result.Cancel - user cancel number getting.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.Geometry;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SplitBrepsWithPlaneCommand : Rhino.Commands.Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName
    {
      <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csSplitBrepsWithPlane"</span>; }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-comment">//First, collect all the breps to split</span>
      ObjRef[] obj_refs;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select breps to split"</span>, <span class="highlight-keyword">false</span>, ObjectType.Brep, <span class="highlight-keyword">out</span> obj_refs);
      <span class="highlight-keyword">if</span> (rc != Result.Success || obj_refs == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> rc;

      <span class="highlight-comment">// Get the final plane</span>
      Plane plane;
      rc = RhinoGet.GetPlane(<span class="highlight-keyword">out</span> plane);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;

      <span class="highlight-comment">//Iterate over all object references</span>
      <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> obj_ref <span class="highlight-keyword">in</span> obj_refs)
      {
        <span class="highlight-keyword">var</span> brep = obj_ref.Brep();
        <span class="highlight-keyword">var</span> bbox = brep.GetBoundingBox(<span class="highlight-keyword">false</span>);

        <span class="highlight-comment">//Grow the boundingbox in all directions</span>
        <span class="highlight-comment">//If the boundingbox is flat (zero volume or even zero area) </span>
        <span class="highlight-comment">//then the CreateThroughBox method will fail.</span>
        <span class="highlight-keyword">var</span> min_point = bbox.Min;
        min_point.X -= <span class="highlight-number">1.0</span>;
        min_point.Y -= <span class="highlight-number">1.0</span>;
        min_point.Z -= <span class="highlight-number">1.0</span>;
        bbox.Min = min_point;
        <span class="highlight-keyword">var</span> max_point = bbox.Max;
        max_point.X += <span class="highlight-number">1.0</span>;
        max_point.Y += <span class="highlight-number">1.0</span>;
        max_point.Z += <span class="highlight-number">1.0</span>;
        bbox.Max = max_point;

        <span class="highlight-keyword">var</span> plane_surface = PlaneSurface.CreateThroughBox(plane, bbox);
        <span class="highlight-keyword">if</span> (plane_surface == <span class="highlight-keyword">null</span>)
        {
          <span class="highlight-comment">//This is rare, it will most likely not happen unless either the plane or the boundingbox are invalid</span>
          RhinoApp.WriteLine(<span class="highlight-literal">"Cutting plane could not be constructed."</span>);
        }
        <span class="highlight-keyword">else</span>
        {
          <span class="highlight-keyword">var</span> breps = brep.Split(plane_surface.ToBrep(), doc.ModelAbsoluteTolerance);
          <span class="highlight-keyword">if</span> (breps == <span class="highlight-keyword">null</span> || breps.Length == <span class="highlight-number">0</span>)
          {
            RhinoApp.Write(<span class="highlight-literal">"Plane does not intersect brep (id:{0})"</span>, obj_ref.ObjectId);
            <span class="highlight-keyword">continue</span>;
          }
          <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> brep_piece <span class="highlight-keyword">in</span> breps)
          {
            doc.Objects.AddBrep(brep_piece);
          }
          doc.Objects.AddSurface(plane_surface);
          doc.Objects.Delete(obj_ref, <span class="highlight-keyword">false</span>);
        }
      }

      doc.Views.Redraw();
      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> Rhino.Input
<span class="highlight-keyword">Imports</span> Rhino.Geometry

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> SplitBrepsWithPlaneCommand
    <span class="highlight-keyword">Inherits</span> Rhino.Commands.Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbSplitBrepsWithPlane"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-comment">'First, collect all the breps to split</span>
      <span class="highlight-keyword">Dim</span> obj_refs <span class="highlight-keyword">As</span> ObjRef() = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select breps to split"</span>, <span class="highlight-keyword">False</span>, ObjectType.Brep, obj_refs)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">OrElse</span> obj_refs <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">' Get the final plane</span>
      <span class="highlight-keyword">Dim</span> plane <span class="highlight-keyword">As</span> Plane
      rc = RhinoGet.GetPlane(plane)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-comment">'Iterate over all object references</span>
      <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> obj_ref <span class="highlight-keyword">As</span> ObjRef <span class="highlight-keyword">In</span> obj_refs
        <span class="highlight-keyword">Dim</span> brep = obj_ref.Brep()
        <span class="highlight-keyword">Dim</span> bbox = brep.GetBoundingBox(<span class="highlight-keyword">False</span>)

        <span class="highlight-comment">'Grow the boundingbox in all directions</span>
        <span class="highlight-comment">'If the boundingbox is flat (zero volume or even zero area) </span>
        <span class="highlight-comment">'then the CreateThroughBox method will fail.</span>
        <span class="highlight-keyword">Dim</span> min_point = bbox.Min
        min_point.X -= <span class="highlight-number">1.0</span>
        min_point.Y -= <span class="highlight-number">1.0</span>
        min_point.Z -= <span class="highlight-number">1.0</span>
        bbox.Min = min_point
        <span class="highlight-keyword">Dim</span> max_point = bbox.Max
        max_point.X += <span class="highlight-number">1.0</span>
        max_point.Y += <span class="highlight-number">1.0</span>
        max_point.Z += <span class="highlight-number">1.0</span>
        bbox.Max = max_point

        <span class="highlight-keyword">Dim</span> plane_surface = PlaneSurface.CreateThroughBox(plane, bbox)
        <span class="highlight-keyword">If</span> plane_surface <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
          <span class="highlight-comment">'This is rare, it will most likely not happen unless either the plane or the boundingbox are invalid</span>
          RhinoApp.WriteLine(<span class="highlight-literal">"Cutting plane could not be constructed."</span>)
        <span class="highlight-keyword">Else</span>
          <span class="highlight-keyword">Dim</span> breps = brep.Split(plane_surface.ToBrep(), doc.ModelAbsoluteTolerance)
          <span class="highlight-keyword">If</span> breps <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">OrElse</span> breps.Length = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
            RhinoApp.Write(<span class="highlight-literal">"Plane does not intersect brep (id:{0})"</span>, obj_ref.ObjectId)
            <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>
          <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
          <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> brep_piece <span class="highlight-keyword">As</span> Brep <span class="highlight-keyword">In</span> breps
            doc.Objects.AddBrep(brep_piece)
          <span class="highlight-keyword">Next</span>
          doc.Objects.AddSurface(plane_surface)
          doc.Objects.Delete(obj_ref, <span class="highlight-keyword">False</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Next</span>

      doc.Views.Redraw()
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> Rhino <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.DocObjects <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Commands <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> RunCommand():
  <span class="highlight-comment">#First, collect all the breps to split</span>
  rc, obj_refs = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select breps to split"</span>, False, ObjectType.Brep)
  <span class="highlight-keyword">if</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">or</span> obj_refs == None:
    <span class="highlight-keyword">return</span> rc

  <span class="highlight-comment"># Get the final plane</span>
  rc, plane = RhinoGet.GetPlane()
  <span class="highlight-keyword">if</span> rc &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> rc

  <span class="highlight-comment">#Iterate over all object references</span>
  <span class="highlight-keyword">for</span> obj_ref <span class="highlight-keyword">in</span> obj_refs:
    brep = obj_ref.Brep()
    bbox = brep.GetBoundingBox(False)

    <span class="highlight-comment">#Grow the boundingbox in all directions</span>
    <span class="highlight-comment">#If the boundingbox is flat (zero volume or even zero area) </span>
    <span class="highlight-comment">#then the CreateThroughBox method will fail.</span>
    min_point = bbox.Min
    min_point.X -= <span class="highlight-number">1.0</span>
    min_point.Y -= <span class="highlight-number">1.0</span>
    min_point.Z -= <span class="highlight-number">1.0</span>
    bbox.Min = min_point
    max_point = bbox.Max
    max_point.X += <span class="highlight-number">1.0</span>
    max_point.Y += <span class="highlight-number">1.0</span>
    max_point.Z += <span class="highlight-number">1.0</span>
    bbox.Max = max_point

    plane_surface = PlaneSurface.CreateThroughBox(plane, bbox)
    <span class="highlight-keyword">if</span> plane_surface == None:
      <span class="highlight-comment">#This is rare, it will most likely not happen unless either the plane or the boundingbox are invalid</span>
      RhinoApp.WriteLine(<span class="highlight-literal">"Cutting plane could not be constructed."</span>)
    <span class="highlight-keyword">else</span>:
      breps = brep.Split(plane_surface.ToBrep(), doc.ModelAbsoluteTolerance)
      <span class="highlight-keyword">if</span> breps == None <span class="highlight-keyword">or</span> breps.Length == <span class="highlight-number">0</span>:
        RhinoApp.Write(<span class="highlight-literal">"Plane does not intersect brep (id:{0})"</span>, obj_ref.ObjectId)
        <span class="highlight-keyword">continue</span>
      <span class="highlight-keyword">for</span> brep_piece <span class="highlight-keyword">in</span> breps:
        doc.Objects.AddBrep(brep_piece)
      doc.Objects.AddSurface(plane_surface)
      doc.Objects.Delete(obj_ref, False)

  doc.Views.Redraw()
  <span class="highlight-keyword">return</span> Result.Success

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Input_RhinoGet.htm">RhinoGet Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Input.htm">Rhino.Input Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>