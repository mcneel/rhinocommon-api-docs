<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Mesh.CreateContourCurves Method (Mesh, Point3d, Point3d, Double, Double)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Mesh.CreateContourCurves(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Double)" /><meta name="Description" content="Constructs contour curves for a mesh, sectioned along a linear axis." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_Mesh_CreateContourCurves_3" /><meta name="guid" content="M_Rhino_Geometry_Mesh_CreateContourCurves_3" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_Mesh.htm" title="Mesh Class" tocid="T_Rhino_Geometry_Mesh">Mesh Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_Mesh.htm" title="Mesh Methods" tocid="Methods_T_Rhino_Geometry_Mesh">Mesh Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_Mesh_CreateContourCurves.htm" title="CreateContourCurves Method " tocid="Overload_Rhino_Geometry_Mesh_CreateContourCurves">CreateContourCurves Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Mesh_CreateContourCurves.htm" title="CreateContourCurves Method (Mesh, Plane)" tocid="M_Rhino_Geometry_Mesh_CreateContourCurves">CreateContourCurves Method (Mesh, Plane)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Mesh_CreateContourCurves_1.htm" title="CreateContourCurves Method (Mesh, Plane, Double)" tocid="M_Rhino_Geometry_Mesh_CreateContourCurves_1">CreateContourCurves Method (Mesh, Plane, Double)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Mesh_CreateContourCurves_2.htm" title="CreateContourCurves Method (Mesh, Point3d, Point3d, Double)" tocid="M_Rhino_Geometry_Mesh_CreateContourCurves_2">CreateContourCurves Method (Mesh, Point3d, Point3d, Double)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Mesh_CreateContourCurves_3.htm" title="CreateContourCurves Method (Mesh, Point3d, Point3d, Double, Double)" tocid="M_Rhino_Geometry_Mesh_CreateContourCurves_3">CreateContourCurves Method (Mesh, Point3d, Point3d, Double, Double)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Mesh<span id="LST1DBF6CFE_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_0?cpp=::|nu=.");</script>CreateContourCurves Method (Mesh, Point3d, Point3d, Double, Double)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Constructs contour curves for a mesh, sectioned along a linear axis.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 7.13</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Curve</span>[] <span class="identifier">CreateContourCurves</span>(
	<span class="identifier">Mesh</span> <span class="parameter">meshToContour</span>,
	<span class="identifier">Point3d</span> <span class="parameter">contourStart</span>,
	<span class="identifier">Point3d</span> <span class="parameter">contourEnd</span>,
	<span class="identifier">double</span> <span class="parameter">interval</span>,
	<span class="identifier">double</span> <span class="parameter">tolerance</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">CreateContourCurves</span> ( 
	<span class="parameter">meshToContour</span> <span class="keyword">As</span> <span class="identifier">Mesh</span>,
	<span class="parameter">contourStart</span> <span class="keyword">As</span> <span class="identifier">Point3d</span>,
	<span class="parameter">contourEnd</span> <span class="keyword">As</span> <span class="identifier">Point3d</span>,
	<span class="parameter">interval</span> <span class="keyword">As</span> <span class="identifier">Double</span>,
	<span class="parameter">tolerance</span> <span class="keyword">As</span> <span class="identifier">Double</span>
) <span class="keyword">As</span> <span class="identifier">Curve</span>()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">meshToContour</span></dt><dd>Type: <a href="T_Rhino_Geometry_Mesh.htm">Rhino.Geometry<span id="LST1DBF6CFE_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Mesh</a><br />A mesh to contour.</dd><dt><span class="parameter">contourStart</span></dt><dd>Type: <a href="T_Rhino_Geometry_Point3d.htm">Rhino.Geometry<span id="LST1DBF6CFE_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Point3d</a><br />A start point of the contouring axis.</dd><dt><span class="parameter">contourEnd</span></dt><dd>Type: <a href="T_Rhino_Geometry_Point3d.htm">Rhino.Geometry<span id="LST1DBF6CFE_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Point3d</a><br />An end point of the contouring axis.</dd><dt><span class="parameter">interval</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">System<span id="LST1DBF6CFE_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Double</a><br />An interval distance.</dd><dt><span class="parameter">tolerance</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">System<span id="LST1DBF6CFE_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Double</a><br />A tolerance value. If negative, the positive value will be used.
            WARNING! Good tolerance values are in the magnitude of 10^-7, or RhinoMath.SqrtEpsilon*10.
            See comments at <a href="P_Rhino_Geometry_Intersect_Intersection_MeshIntersectionsTolerancesCoefficient.htm">MeshIntersectionsTolerancesCoefficient</a></dd></dl><h4 class="subHeading">Return Value</h4>Type: <span id="LST1DBF6CFE_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_6?cpp=array&lt;");</script><a href="T_Rhino_Geometry_Curve.htm">Curve</a><span id="LST1DBF6CFE_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST1DBF6CFE_7?cpp=&gt;|vb=()|nu=[]");</script><br />An array of curves. This array can be empty.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.Input.Custom;
<span class="highlight-keyword">using</span> Rhino.Commands;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ContourCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csContour"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-keyword">var</span> filter = ObjectType.Surface | ObjectType.PolysrfFilter | ObjectType.Mesh;
      ObjRef[] obj_refs;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select objects to contour"</span>, <span class="highlight-keyword">false</span>, filter, <span class="highlight-keyword">out</span> obj_refs);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;

      <span class="highlight-keyword">var</span> gp = <span class="highlight-keyword">new</span> GetPoint();
      gp.SetCommandPrompt(<span class="highlight-literal">"Contour plane base point"</span>);
      gp.Get();
      <span class="highlight-keyword">if</span> (gp.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gp.CommandResult();
      <span class="highlight-keyword">var</span> base_point = gp.Point();

      gp.DrawLineFromPoint(base_point, <span class="highlight-keyword">true</span>);
      gp.SetCommandPrompt(<span class="highlight-literal">"Direction perpendicular to contour planes"</span>);
      gp.Get();
      <span class="highlight-keyword">if</span> (gp.CommandResult() != Result.Success)
        <span class="highlight-keyword">return</span> gp.CommandResult();
      <span class="highlight-keyword">var</span> end_point = gp.Point();

      <span class="highlight-keyword">if</span> (base_point.DistanceTo(end_point) &lt; RhinoMath.ZeroTolerance)
        <span class="highlight-keyword">return</span> Result.Nothing;

      <span class="highlight-keyword">double</span> distance = <span class="highlight-number">1.0</span>;
      rc = RhinoGet.GetNumber(<span class="highlight-literal">"Distance between contours"</span>, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">ref</span> distance);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;

      <span class="highlight-keyword">var</span> interval = Math.Abs(distance);

      Curve[] curves = <span class="highlight-keyword">null</span>;
      <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> obj_ref <span class="highlight-keyword">in</span> obj_refs)
      {
        <span class="highlight-keyword">var</span> geometry = obj_ref.Geometry();
        <span class="highlight-keyword">if</span> (geometry == <span class="highlight-keyword">null</span>)
          <span class="highlight-keyword">return</span> Result.Failure;

        <span class="highlight-keyword">if</span> (geometry <span class="highlight-keyword">is</span> Brep)
        {
          curves = Brep.CreateContourCurves(geometry <span class="highlight-keyword">as</span> Brep, base_point, end_point, interval);
        }
        <span class="highlight-keyword">else</span>
        {
          curves = Mesh.CreateContourCurves(geometry <span class="highlight-keyword">as</span> Mesh, base_point, end_point, interval);
        }

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> curve <span class="highlight-keyword">in</span> curves)
        {
          <span class="highlight-keyword">var</span> curve_object_id = doc.Objects.AddCurve(curve);
          doc.Objects.Select(curve_object_id);
        }
      }

      <span class="highlight-keyword">if</span> (curves != <span class="highlight-keyword">null</span>)
        doc.Views.Redraw();
      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> Rhino.Input
<span class="highlight-keyword">Imports</span> Rhino.Input.Custom
<span class="highlight-keyword">Imports</span> Rhino.Commands

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> ContourCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbContour"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> filter = ObjectType.Surface <span class="highlight-keyword">Or</span> ObjectType.PolysrfFilter <span class="highlight-keyword">Or</span> ObjectType.Mesh
      <span class="highlight-keyword">Dim</span> obj_refs <span class="highlight-keyword">As</span> ObjRef() = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select objects to contour"</span>, <span class="highlight-keyword">False</span>, filter, obj_refs)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> gp = <span class="highlight-keyword">New</span> GetPoint()
      gp.SetCommandPrompt(<span class="highlight-literal">"Contour plane base point"</span>)
      gp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> base_point = gp.Point()

      gp.DrawLineFromPoint(base_point, <span class="highlight-keyword">True</span>)
      gp.SetCommandPrompt(<span class="highlight-literal">"Direction perpendicular to contour planes"</span>)
      gp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> end_point = gp.Point()

      <span class="highlight-keyword">If</span> base_point.DistanceTo(end_point) &lt; RhinoMath.ZeroTolerance <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> distance <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = <span class="highlight-number">1.0</span>
      rc = RhinoGet.GetNumber(<span class="highlight-literal">"Distance between contours"</span>, <span class="highlight-keyword">False</span>, distance)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> interval = Math.Abs(distance)

      <span class="highlight-keyword">Dim</span> curves <span class="highlight-keyword">As</span> Curve() = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> obj_ref <span class="highlight-keyword">As</span> ObjRef <span class="highlight-keyword">In</span> obj_refs
        <span class="highlight-keyword">Dim</span> geometry = obj_ref.Geometry()
        <span class="highlight-keyword">If</span> geometry <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
          <span class="highlight-keyword">Return</span> Result.Failure
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> geometry <span class="highlight-keyword">Is</span> Brep <span class="highlight-keyword">Then</span>
          curves = Brep.CreateContourCurves(<span class="highlight-keyword">TryCast</span>(geometry, Brep), base_point, end_point, interval)
        <span class="highlight-keyword">Else</span>
          curves = Mesh.CreateContourCurves(<span class="highlight-keyword">TryCast</span>(geometry, Mesh), base_point, end_point, interval)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> curve <span class="highlight-keyword">As</span> Curve <span class="highlight-keyword">In</span> curves
          <span class="highlight-keyword">Dim</span> curve_object_id = doc.Objects.AddCurve(curve)
          doc.Objects.[<span class="highlight-keyword">Select</span>](curve_object_id)
        <span class="highlight-keyword">Next</span>
      <span class="highlight-keyword">Next</span>

      <span class="highlight-keyword">If</span> curves <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        doc.Views.Redraw()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> System <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.DocObjects <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input.Custom <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Commands <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc

<span class="highlight-keyword">def</span> RunCommand():
  filter = ObjectType.Surface | ObjectType.PolysrfFilter | ObjectType.Mesh
  rc, obj_refs = RhinoGet.GetMultipleObjects(<span class="highlight-literal">"Select objects to contour"</span>, False, filter)
  <span class="highlight-keyword">if</span> rc &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> rc

  gp = GetPoint()
  gp.SetCommandPrompt(<span class="highlight-literal">"Contour plane base point"</span>)
  gp.Get()
  <span class="highlight-keyword">if</span> gp.CommandResult() &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> gp.CommandResult()
  base_point = gp.Point()

  gp.DrawLineFromPoint(base_point, True)
  gp.SetCommandPrompt(<span class="highlight-literal">"Direction perpendicular to contour planes"</span>)
  gp.Get()
  <span class="highlight-keyword">if</span> gp.CommandResult() &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> gp.CommandResult()
  end_point = gp.Point()

  <span class="highlight-keyword">if</span> base_point.DistanceTo(end_point) &lt; RhinoMath.ZeroTolerance:
    <span class="highlight-keyword">return</span> Result.Nothing

  distance = <span class="highlight-number">1.0</span>
  rc, distance = RhinoGet.GetNumber(<span class="highlight-literal">"Distance between contours"</span>, False, distance)
  <span class="highlight-keyword">if</span> rc &lt;&gt; Result.Success:
    <span class="highlight-keyword">return</span> rc

  interval = Math.Abs(distance)

  <span class="highlight-keyword">for</span> obj_ref <span class="highlight-keyword">in</span> obj_refs:
    geometry = obj_ref.Geometry()
    <span class="highlight-keyword">if</span> geometry == None:
      <span class="highlight-keyword">return</span> Result.Failure

    <span class="highlight-keyword">if</span> type(geometry) == Brep:
      curves = Brep.CreateContourCurves(geometry, base_point, end_point, interval)
    <span class="highlight-keyword">else</span>:
      curves = Mesh.CreateContourCurves(geometry, base_point, end_point, interval)

    <span class="highlight-keyword">for</span> curve <span class="highlight-keyword">in</span> curves:
      curve_object_id = doc.Objects.AddCurve(curve)
      doc.Objects.Select(curve_object_id)

  <span class="highlight-keyword">if</span> curves &lt;&gt; None:
    doc.Views.Redraw()
  <span class="highlight-keyword">return</span> Result.Success

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Mesh.htm">Mesh Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Geometry_Mesh_CreateContourCurves.htm">CreateContourCurves Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>