<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>OptionDouble.CurrentValue Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="CurrentValue property" /><meta name="System.Keywords" content="OptionDouble.CurrentValue property" /><meta name="Microsoft.Help.F1" content="Rhino.Input.Custom.OptionDouble.CurrentValue" /><meta name="Microsoft.Help.F1" content="Rhino.Input.Custom.OptionDouble.get_CurrentValue" /><meta name="Microsoft.Help.F1" content="Rhino.Input.Custom.OptionDouble.set_CurrentValue" /><meta name="Microsoft.Help.Id" content="P:Rhino.Input.Custom.OptionDouble.CurrentValue" /><meta name="Description" content="summaryP:Rhino.Input.Custom.OptionDouble.CurrentValue" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Input.Custom" /><meta name="file" content="P_Rhino_Input_Custom_OptionDouble_CurrentValue" /><meta name="guid" content="P_Rhino_Input_Custom_OptionDouble_CurrentValue" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Input_Custom.htm" title="Rhino.Input.Custom" tocid="N_Rhino_Input_Custom">Rhino.Input.Custom</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Input_Custom_OptionDouble.htm" title="OptionDouble Class" tocid="T_Rhino_Input_Custom_OptionDouble">OptionDouble Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_Rhino_Input_Custom_OptionDouble.htm" title="OptionDouble Properties" tocid="Properties_T_Rhino_Input_Custom_OptionDouble">OptionDouble Properties</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Input_Custom_OptionDouble_CurrentValue.htm" title="CurrentValue Property " tocid="P_Rhino_Input_Custom_OptionDouble_CurrentValue">CurrentValue Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_Rhino_Input_Custom_OptionDouble_InitialValue.htm" title="InitialValue Property " tocid="P_Rhino_Input_Custom_OptionDouble_InitialValue">InitialValue Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>OptionDouble<span id="LST288ACE6_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST288ACE6_0?cpp=::|nu=.");</script>CurrentValue Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary"><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;summary&gt; documentation for "P:Rhino.Input.Custom.OptionDouble.CurrentValue"]</p></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">double</span> <span class="identifier">CurrentValue</span> { <span class="keyword">get</span>; <span class="keyword">set</span>; }</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Property</span> <span class="identifier">CurrentValue</span> <span class="keyword">As</span> <span class="identifier">Double</span>
	<span class="keyword">Get</span>
	<span class="keyword">Set</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="https://docs.microsoft.com/dotnet/api/system.double" target="_blank">Double</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBCBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBCBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBCBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Examples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> Rhino.Commands.Result CommandLineOptions(Rhino.RhinoDoc doc)
  {
    <span class="highlight-comment">// For this example we will use a GetPoint class, but all of the custom</span>
    <span class="highlight-comment">// "Get" classes support command line options.</span>
    Rhino.Input.Custom.GetPoint gp = <span class="highlight-keyword">new</span> Rhino.Input.Custom.GetPoint();
    gp.SetCommandPrompt(<span class="highlight-literal">"GetPoint with options"</span>);

    <span class="highlight-comment">// set up the options</span>
    Rhino.Input.Custom.OptionInteger intOption = <span class="highlight-keyword">new</span> Rhino.Input.Custom.OptionInteger(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">99</span>);
    Rhino.Input.Custom.OptionDouble dblOption = <span class="highlight-keyword">new</span> Rhino.Input.Custom.OptionDouble(<span class="highlight-number">2.2</span>, <span class="highlight-number">0</span>, <span class="highlight-number">99.9</span>);
    Rhino.Input.Custom.OptionToggle boolOption = <span class="highlight-keyword">new</span> Rhino.Input.Custom.OptionToggle(<span class="highlight-keyword">true</span>, <span class="highlight-literal">"Off"</span>, <span class="highlight-literal">"On"</span>);
    <span class="highlight-keyword">string</span>[] listValues = <span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[] { <span class="highlight-literal">"Item0"</span>, <span class="highlight-literal">"Item1"</span>, <span class="highlight-literal">"Item2"</span>, <span class="highlight-literal">"Item3"</span>, <span class="highlight-literal">"Item4"</span> };

    gp.AddOptionInteger(<span class="highlight-literal">"Integer"</span>, <span class="highlight-keyword">ref</span> intOption);
    gp.AddOptionDouble(<span class="highlight-literal">"Double"</span>, <span class="highlight-keyword">ref</span> dblOption);
    gp.AddOptionToggle(<span class="highlight-literal">"Boolean"</span>, <span class="highlight-keyword">ref</span> boolOption);
    <span class="highlight-keyword">int</span> listIndex = <span class="highlight-number">3</span>;
    <span class="highlight-keyword">int</span> opList = gp.AddOptionList(<span class="highlight-literal">"List"</span>, listValues, listIndex);

    <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>)
    {
      <span class="highlight-comment">// perform the get operation. This will prompt the user to input a point, but also</span>
      <span class="highlight-comment">// allow for command line options defined above</span>
      Rhino.Input.GetResult get_rc = gp.Get();
      <span class="highlight-keyword">if</span> (gp.CommandResult() != Rhino.Commands.Result.Success)
        <span class="highlight-keyword">return</span> gp.CommandResult();

      <span class="highlight-keyword">if</span> (get_rc == Rhino.Input.GetResult.Point)
      {
        doc.Objects.AddPoint(gp.Point());
        doc.Views.Redraw();
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Command line option values are"</span>);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Integer = {0}"</span>, intOption.CurrentValue);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Double = {0}"</span>, dblOption.CurrentValue);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Boolean = {0}"</span>, boolOption.CurrentValue);
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" List = {0}"</span>, listValues[listIndex]);
      }
      <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (get_rc == Rhino.Input.GetResult.Option)
      {
        <span class="highlight-keyword">if</span> (gp.OptionIndex() == opList)
          listIndex = gp.Option().CurrentListOptionIndex;
        <span class="highlight-keyword">continue</span>;
      }
      <span class="highlight-keyword">break</span>;
    }
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success;
  }
}</pre></div><div id="ID0EBBCBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Partial</span> <span class="highlight-keyword">Class</span> Examples
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> CommandLineOptions(<span class="highlight-keyword">ByVal</span> doc <span class="highlight-keyword">As</span> Rhino.RhinoDoc) <span class="highlight-keyword">As</span> Rhino.Commands.Result
    <span class="highlight-comment">' For this example we will use a GetPoint class, but all of the custom</span>
    <span class="highlight-comment">' "Get" classes support command line options.</span>
    <span class="highlight-keyword">Dim</span> gp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"GetPoint with options"</span>)

    <span class="highlight-comment">' set up the options</span>
    <span class="highlight-keyword">Dim</span> intOption <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.OptionInteger(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">99</span>)
    <span class="highlight-keyword">Dim</span> dblOption <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.OptionDouble(<span class="highlight-number">2.2</span>, <span class="highlight-number">0</span>, <span class="highlight-number">99.9</span>)
    <span class="highlight-keyword">Dim</span> boolOption <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rhino.Input.Custom.OptionToggle(<span class="highlight-keyword">True</span>, <span class="highlight-literal">"Off"</span>, <span class="highlight-literal">"On"</span>)
    <span class="highlight-keyword">Dim</span> listValues <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">String</span>() {<span class="highlight-literal">"Item0"</span>, <span class="highlight-literal">"Item1"</span>, <span class="highlight-literal">"Item2"</span>, <span class="highlight-literal">"Item3"</span>, <span class="highlight-literal">"Item4"</span>}

    gp.AddOptionInteger(<span class="highlight-literal">"Integer"</span>, intOption)
    gp.AddOptionDouble(<span class="highlight-literal">"Double"</span>, dblOption)
    gp.AddOptionToggle(<span class="highlight-literal">"Boolean"</span>, boolOption)
    <span class="highlight-keyword">Dim</span> listIndex <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span>
    <span class="highlight-keyword">Dim</span> opList <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = gp.AddOptionList(<span class="highlight-literal">"List"</span>, listValues, listIndex)

    <span class="highlight-keyword">While</span> <span class="highlight-keyword">True</span>
      <span class="highlight-comment">' perform the get operation. This will prompt the user to input a point, but also</span>
      <span class="highlight-comment">' allow for command line options defined above</span>
      <span class="highlight-keyword">Dim</span> get_rc <span class="highlight-keyword">As</span> Rhino.Input.GetResult = gp.[<span class="highlight-keyword">Get</span>]()
      <span class="highlight-keyword">If</span> gp.CommandResult() &lt;&gt; Rhino.Commands.Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> gp.CommandResult()
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">If</span> get_rc = Rhino.Input.GetResult.Point <span class="highlight-keyword">Then</span>
        doc.Objects.AddPoint(gp.Point())
        doc.Views.Redraw()
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">"Command line option values are"</span>)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Integer = {0}"</span>, intOption.CurrentValue)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Double = {0}"</span>, dblOption.CurrentValue)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" Boolean = {0}"</span>, boolOption.CurrentValue)
        Rhino.RhinoApp.WriteLine(<span class="highlight-literal">" List = {0}"</span>, listValues(listIndex))
      <span class="highlight-keyword">ElseIf</span> get_rc = Rhino.Input.GetResult.[<span class="highlight-keyword">Option</span>] <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">If</span> gp.OptionIndex() = opList <span class="highlight-keyword">Then</span>
          listIndex = gp.[<span class="highlight-keyword">Option</span>]().CurrentListOptionIndex
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">While</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">While</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span>
    <span class="highlight-keyword">Return</span> Rhino.Commands.Result.Success
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBCBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAACBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAACBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">import</span> Rhino
<span class="highlight-keyword">import</span> scriptcontext

<span class="highlight-keyword">def</span> CommandLineOptions():
    <span class="highlight-comment"># For this example we will use a GetPoint class, but all of the custom</span>
    <span class="highlight-comment"># "Get" classes support command line options.</span>
    gp = Rhino.Input.Custom.GetPoint()
    gp.SetCommandPrompt(<span class="highlight-literal">"GetPoint with options"</span>)

    <span class="highlight-comment"># set up the options</span>
    intOption = Rhino.Input.Custom.OptionInteger(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">99</span>)
    dblOption = Rhino.Input.Custom.OptionDouble(<span class="highlight-number">2.2</span>, <span class="highlight-number">0</span>, <span class="highlight-number">99.9</span>)
    boolOption = Rhino.Input.Custom.OptionToggle(True, <span class="highlight-literal">"Off"</span>, <span class="highlight-literal">"On"</span>)
    listValues = <span class="highlight-literal">"Item0"</span>, <span class="highlight-literal">"Item1"</span>, <span class="highlight-literal">"Item2"</span>, <span class="highlight-literal">"Item3"</span>, <span class="highlight-literal">"Item4"</span>

    gp.AddOptionInteger(<span class="highlight-literal">"Integer"</span>, intOption)
    gp.AddOptionDouble(<span class="highlight-literal">"Double"</span>, dblOption)
    gp.AddOptionToggle(<span class="highlight-literal">"Boolean"</span>, boolOption)
    listIndex = <span class="highlight-number">3</span>
    opList = gp.AddOptionList(<span class="highlight-literal">"List"</span>, listValues, listIndex)
    <span class="highlight-keyword">while</span> True:
        <span class="highlight-comment"># perform the get operation. This will prompt the user to</span>
        <span class="highlight-comment"># input a point, but also allow for command line options</span>
        <span class="highlight-comment"># defined above</span>
        get_rc = gp.Get()
        <span class="highlight-keyword">if</span> gp.CommandResult()!=Rhino.Commands.Result.Success:
            <span class="highlight-keyword">return</span> gp.CommandResult()
        <span class="highlight-keyword">if</span> get_rc==Rhino.Input.GetResult.Point:
            point = gp.Point()
            scriptcontext.doc.Objects.AddPoint(point)
            scriptcontext.doc.Views.Redraw()
            <span class="highlight-keyword">print</span> <span class="highlight-literal">"Command line option values are"</span>
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" Integer ="</span>, intOption.CurrentValue
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" Double ="</span>, dblOption.CurrentValue
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" Boolean ="</span>, boolOption.CurrentValue
            <span class="highlight-keyword">print</span> <span class="highlight-literal">" List ="</span>, listValues[listIndex]
        <span class="highlight-keyword">elif</span> get_rc==Rhino.Input.GetResult.Option:
            <span class="highlight-keyword">if</span> gp.OptionIndex()==opList:
              listIndex = gp.Option().CurrentListOptionIndex
            <span class="highlight-keyword">continue</span>
        <span class="highlight-keyword">break</span>
    <span class="highlight-keyword">return</span> Rhino.Commands.Result.Success


<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
    CommandLineOptions()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Input_Custom_OptionDouble.htm">OptionDouble Class</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Input_Custom.htm">Rhino.Input.Custom Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>