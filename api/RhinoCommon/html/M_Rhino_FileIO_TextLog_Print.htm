<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>TextLog.Print Method (String)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.FileIO.TextLog.Print(System.String)" /><meta name="Description" content="Send text to the text log" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.FileIO" /><meta name="file" content="M_Rhino_FileIO_TextLog_Print" /><meta name="guid" content="M_Rhino_FileIO_TextLog_Print" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_FileIO.htm" title="Rhino.FileIO" tocid="N_Rhino_FileIO">Rhino.FileIO</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_FileIO_TextLog.htm" title="TextLog Class" tocid="T_Rhino_FileIO_TextLog">TextLog Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_FileIO_TextLog.htm" title="TextLog Methods" tocid="Methods_T_Rhino_FileIO_TextLog">TextLog Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_FileIO_TextLog_Print.htm" title="Print Method " tocid="Overload_Rhino_FileIO_TextLog_Print">Print Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_FileIO_TextLog_Print.htm" title="Print Method (String)" tocid="M_Rhino_FileIO_TextLog_Print">Print Method (String)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_FileIO_TextLog_Print_1.htm" title="Print Method (String, Object)" tocid="M_Rhino_FileIO_TextLog_Print_1">Print Method (String, Object)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_FileIO_TextLog_Print_2.htm" title="Print Method (String, Object, Object)" tocid="M_Rhino_FileIO_TextLog_Print_2">Print Method (String, Object, Object)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>TextLog<span id="LST8439DC7_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8439DC7_0?cpp=::|nu=.");</script>Print Method (String)</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Send text to the text log
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_FileIO.htm">Rhino.FileIO</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.1</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">Print</span>(
	<span class="identifier">string</span> <span class="parameter">text</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Sub</span> <span class="identifier">Print</span> ( 
	<span class="parameter">text</span> <span class="keyword">As</span> <span class="identifier">String</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">text</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.string" target="_blank">System<span id="LST8439DC7_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8439DC7_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br /><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[Missing &lt;param name="text"/&gt; documentation for "M:Rhino.FileIO.TextLog.Print(System.String)"]</p></dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBBBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBBBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBBBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBBBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBBBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBBBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> Rhino.FileIO;
<span class="highlight-keyword">using</span> Rhino.Commands;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> InstanceDefinitionTreeCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csInstanceDefinitionTree"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      <span class="highlight-keyword">var</span> instance_definitions = doc.InstanceDefinitions;
      <span class="highlight-keyword">var</span> instance_definition_count = instance_definitions.Count;

      <span class="highlight-keyword">if</span> (instance_definition_count == <span class="highlight-number">0</span>)
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Document contains no instance definitions."</span>);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-keyword">var</span> dump = <span class="highlight-keyword">new</span> TextLog();
      dump.IndentSize = <span class="highlight-number">4</span>;

      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; instance_definition_count; i++)
        DumpInstanceDefinition(instance_definitions[i], <span class="highlight-keyword">ref</span> dump, <span class="highlight-keyword">true</span>);

      RhinoApp.WriteLine(dump.ToString());

      <span class="highlight-keyword">return</span> Result.Success;
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> DumpInstanceDefinition(InstanceDefinition instanceDefinition, <span class="highlight-keyword">ref</span> TextLog dump, <span class="highlight-keyword">bool</span> isRoot)
    {
      <span class="highlight-keyword">if</span> (instanceDefinition != <span class="highlight-keyword">null</span> &amp;&amp; !instanceDefinition.IsDeleted)
      {
        <span class="highlight-keyword">string</span> node = isRoot ? <span class="highlight-literal">"─"</span> : <span class="highlight-literal">"└"</span>;
        dump.Print(<span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"{0} Instance definition {1} = {2}\n"</span>, node, instanceDefinition.Index, instanceDefinition.Name));

        <span class="highlight-keyword">if</span> (instanceDefinition.ObjectCount  &gt; <span class="highlight-number">0</span>)
        {
          dump.PushIndent();
          <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; instanceDefinition.ObjectCount ; i++)
          {
            <span class="highlight-keyword">var</span> obj = instanceDefinition.Object(i);
            <span class="highlight-keyword">if</span> (obj == <span class="highlight-keyword">null</span>) <span class="highlight-keyword">continue</span>;
            <span class="highlight-keyword">if</span> (obj <span class="highlight-keyword">is</span> InstanceObject)
              DumpInstanceDefinition((obj <span class="highlight-keyword">as</span> InstanceObject).InstanceDefinition, <span class="highlight-keyword">ref</span> dump, <span class="highlight-keyword">false</span>); <span class="highlight-comment">// Recursive...</span>
            <span class="highlight-keyword">else</span>
              dump.Print(<span class="highlight-literal">"\u2514 Object {0} = {1}\n"</span>, i, obj.ShortDescription(<span class="highlight-keyword">false</span>));
          }
          dump.PopIndent();
        }
      }
    }
  }
}</pre></div><div id="ID0EBBBBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> Rhino.FileIO
<span class="highlight-keyword">Imports</span> Rhino.Commands

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> InstanceDefinitionTreeCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbInstanceDefinitionTree"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> instanceDefinitions = doc.InstanceDefinitions
      <span class="highlight-keyword">Dim</span> instanceDefinitionCount = instanceDefinitions.Count

      <span class="highlight-keyword">If</span> instanceDefinitionCount = <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"Document contains no instance definitions."</span>)
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> dump = <span class="highlight-keyword">New</span> TextLog()
      dump.IndentSize = <span class="highlight-number">4</span>

      <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> instanceDefinitionCount - <span class="highlight-number">1</span>
        DumpInstanceDefinition(instanceDefinitions(i), dump, <span class="highlight-keyword">True</span>)
      <span class="highlight-keyword">Next</span>

      RhinoApp.WriteLine(dump.ToString())

      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>

    <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> DumpInstanceDefinition(instanceDefinition <span class="highlight-keyword">As</span> InstanceDefinition, <span class="highlight-keyword">ByRef</span> dump <span class="highlight-keyword">As</span> TextLog, isRoot <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span>)
      <span class="highlight-keyword">If</span> instanceDefinition <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> <span class="highlight-keyword">Not</span> instanceDefinition.IsDeleted <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Dim</span> node <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
        <span class="highlight-keyword">If</span> isRoot <span class="highlight-keyword">Then</span>
          node = <span class="highlight-literal">"─"</span>
        <span class="highlight-keyword">Else</span>
          <span class="highlight-comment">'"\u2500"; </span>
          node = <span class="highlight-literal">"└"</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
        <span class="highlight-comment">'"\u2514"; </span>
        dump.Print(<span class="highlight-keyword">String</span>.Format(<span class="highlight-literal">"{0} Instance definition {1} = {2}"</span> &amp; vbLf, node, instanceDefinition.Index, instanceDefinition.Name))

        <span class="highlight-keyword">If</span> instanceDefinition.ObjectCount &gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span>
          dump.PushIndent()
          <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> instanceDefinition.ObjectCount - <span class="highlight-number">1</span>
            <span class="highlight-keyword">Dim</span> obj = instanceDefinition.[<span class="highlight-keyword">Object</span>](i)

            <span class="highlight-keyword">If</span> obj <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span> <span class="highlight-keyword">Continue</span> <span class="highlight-keyword">For</span>

            <span class="highlight-keyword">If</span> <span class="highlight-keyword">TypeOf</span> obj <span class="highlight-keyword">Is</span> InstanceObject <span class="highlight-keyword">Then</span>
              DumpInstanceDefinition(<span class="highlight-keyword">TryCast</span>(obj, InstanceObject).InstanceDefinition, dump, <span class="highlight-keyword">False</span>)
            <span class="highlight-keyword">Else</span>
              <span class="highlight-comment">' Recursive...</span>
              dump.Print(<span class="highlight-keyword">String</span>.Format(<span class="highlight-literal">"└ Object {0} = {1}"</span> &amp; vbLf, i, obj.ShortDescription(<span class="highlight-keyword">False</span>)))
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
          <span class="highlight-keyword">Next</span>
          dump.PopIndent()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBBBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc
<span class="highlight-keyword">import</span> Rhino

<span class="highlight-keyword">def</span> RunCommand():
  instanceDefinitions = doc.InstanceDefinitions
  instanceDefinitionCount = instanceDefinitions.Count

  <span class="highlight-keyword">if</span> instanceDefinitionCount == <span class="highlight-number">0</span>:
    <span class="highlight-keyword">print</span> <span class="highlight-literal">"Document contains no instance definitions."</span>
    <span class="highlight-keyword">return</span>

  dump = Rhino.FileIO.TextLog()
  dump.IndentSize = <span class="highlight-number">4</span>

  <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, instanceDefinitionCount):
    DumpInstanceDefinition(instanceDefinitions[i], dump, True)

  <span class="highlight-keyword">print</span> dump.ToString()

<span class="highlight-keyword">def</span> DumpInstanceDefinition(instanceDefinition, dump, isRoot):
  <span class="highlight-keyword">if</span> instanceDefinition != None <span class="highlight-keyword">and</span> <span class="highlight-keyword">not</span> instanceDefinition.IsDeleted:
    <span class="highlight-keyword">if</span> isRoot:
      node = <span class="highlight-literal">'-'</span>
    <span class="highlight-keyword">else</span>:
      node = <span class="highlight-literal">'+'</span>
    dump.Print(u<span class="highlight-literal">"{0} Instance definition {1} = {2}\n"</span>.format(node, instanceDefinition.Index, instanceDefinition.Name))

    <span class="highlight-keyword">if</span> instanceDefinition.ObjectCount  &gt; <span class="highlight-number">0</span>:
      dump.PushIndent()
      <span class="highlight-keyword">for</span> i <span class="highlight-keyword">in</span> range(<span class="highlight-number">0</span>, instanceDefinition.ObjectCount):
        obj = instanceDefinition.Object(i)
        <span class="highlight-keyword">if</span> obj != None <span class="highlight-keyword">and</span> type(obj) == Rhino.DocObjects.InstanceObject:
          DumpInstanceDefinition(obj.InstanceDefinition, dump, False) <span class="highlight-comment"># Recursive...</span>
        <span class="highlight-keyword">else</span>:
          dump.Print(u<span class="highlight-literal">"+ Object {0} = {1}\n"</span>.format(i, obj.ShortDescription(False)))
      dump.PopIndent()

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_FileIO_TextLog.htm">TextLog Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_FileIO_TextLog_Print.htm">Print Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_FileIO.htm">Rhino.FileIO Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>