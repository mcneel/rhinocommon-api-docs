<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Transform Structure</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Transform structure" /><meta name="System.Keywords" content="Rhino.Geometry.Transform structure" /><meta name="Microsoft.Help.F1" content="Rhino.Geometry.Transform" /><meta name="Microsoft.Help.Id" content="T:Rhino.Geometry.Transform" /><meta name="Description" content="Represents the values in a 4x4 transform matrix. This is parallel to C++ ON_Xform." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="T_Rhino_Geometry_Transform" /><meta name="guid" content="T_Rhino_Geometry_Transform" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_Transform.htm" title="Transform Structure" tocid="T_Rhino_Geometry_Transform">Transform Structure</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_Transform__ctor.htm" title="Transform Constructor " tocid="Overload_Rhino_Geometry_Transform__ctor">Transform Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_Rhino_Geometry_Transform.htm" title="Transform Properties" tocid="Properties_T_Rhino_Geometry_Transform">Transform Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_Transform.htm" title="Transform Methods" tocid="Methods_T_Rhino_Geometry_Transform">Transform Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Operators_T_Rhino_Geometry_Transform.htm" title="Transform Operators" tocid="Operators_T_Rhino_Geometry_Transform">Transform Operators</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Transform Structure</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Represents the values in a 4x4 transform matrix.
            <p>This is parallel to C++ ON_Xform.</p></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">struct</span> <span class="identifier">Transform</span> : <span class="identifier">IComparable</span>&lt;<span class="identifier">Transform</span>&gt;, 
	<span class="identifier">IEquatable</span>&lt;<span class="identifier">Transform</span>&gt;, <span class="identifier">ICloneable</span></pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Structure</span> <span class="identifier">Transform</span>
	<span class="keyword">Implements</span> <span class="identifier">IComparable</span>(<span class="keyword">Of</span> <span class="identifier">Transform</span>), <span class="identifier">IEquatable</span>(<span class="keyword">Of</span> <span class="identifier">Transform</span>), 
	<span class="identifier">ICloneable</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script></div><p>The <span class="selflink">Transform</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID2RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform__ctor_1.htm">Transform(Double)</a></td><td><div class="summary">
            Initializes a new transform matrix with a specified value along the diagonal.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform__ctor.htm">Transform(Transform)</a></td><td><div class="summary">
            Initializes a new transform matrix with a specified value.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_Determinant.htm">Determinant</a></td><td><div class="summary">
            The determinant of this 4x4 matrix.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="P_Rhino_Geometry_Transform_Identity.htm">Identity</a></td><td><div class="summary">
            Gets a new identity transform matrix. An identity matrix defines no transformation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsAffine.htm">IsAffine</a></td><td><div class="summary">
            Tests for an affine transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            An affine transformation can be broken into a linear transformation and a translation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsIdentity.htm">IsIdentity</a></td><td><div class="summary">Return true if this Transform is the identity transform</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsLinear.htm">IsLinear</a></td><td><div class="summary">
            Tests for a linear transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            If in addition its last column is ( 0, 0, 0, 1)^T then it is linear.
            An affine transformation can be broken into a linear transformation and a translation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsRotation.htm">IsRotation</a></td><td><div class="summary">
            Returns true if this is a proper rotation. 
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsValid.htm">IsValid</a></td><td><div class="summary">
            Gets a value indicating whether or not this Transform is a valid matrix. 
            A valid transform matrix is not allowed to have any invalid numbers.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsZero.htm">IsZero</a></td><td><div class="summary">
            True if matrix is Zero4x4, ZeroTransformation, or some other type of
            zero. The value xform[3][3] can be anything.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsZero4x4.htm">IsZero4x4</a></td><td><div class="summary">
            True if all values are 0
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_IsZeroTransformation.htm">IsZeroTransformation</a></td><td><div class="summary">
            True if all values are 0, except for M33 which is 1.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_Item.htm">Item</a></td><td><div class="summary">
            Gets or sets the matrix value at the given row and column indices.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M00.htm">M00</a></td><td><div class="summary">Gets or sets this[0,0].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M01.htm">M01</a></td><td><div class="summary">Gets or sets this[0,1].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M02.htm">M02</a></td><td><div class="summary">Gets or sets this[0,2].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M03.htm">M03</a></td><td><div class="summary">Gets or sets this[0,3].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M10.htm">M10</a></td><td><div class="summary">Gets or sets this[1,0].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M11.htm">M11</a></td><td><div class="summary">Gets or sets this[1,1].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M12.htm">M12</a></td><td><div class="summary">Gets or sets this[1,2].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M13.htm">M13</a></td><td><div class="summary">Gets or sets this[1,3].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M20.htm">M20</a></td><td><div class="summary">Gets or sets this[2,0].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M21.htm">M21</a></td><td><div class="summary">Gets or sets this[2,1].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M22.htm">M22</a></td><td><div class="summary">Gets or sets this[2,2].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M23.htm">M23</a></td><td><div class="summary">Gets or sets this[2,3].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M30.htm">M30</a></td><td><div class="summary">Gets or sets this[3,0].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M31.htm">M31</a></td><td><div class="summary">Gets or sets this[3,1].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M32.htm">M32</a></td><td><div class="summary">Gets or sets this[3,2].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_M33.htm">M33</a></td><td><div class="summary">Gets or sets this[3,3].</div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_RigidType.htm">RigidType</a></td><td><div class="summary">
            Gets a value indicating whether or not the Transform is rigid. 
            A rigid transformation can be broken into  a proper rotation and a translation,
            while an isometry transformation could also include a reflection.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Rhino_Geometry_Transform_SimilarityType.htm">SimilarityType</a></td><td><div class="summary">
            Gets a value indicating whether or not the Transform maintains similarity. 
            The easiest way to think of Similarity is that any circle, when transformed, 
            remains a circle. Whereas a non-similarity Transform deforms circles into ellipses.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="P_Rhino_Geometry_Transform_Unset.htm">Unset</a></td><td><div class="summary">
            Gets an XForm filled with RhinoMath.UnsetValue.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="P_Rhino_Geometry_Transform_ZeroTransformation.htm">ZeroTransformation</a></td><td><div class="summary">
            ZeroTransformation diagonal = (0,0,0,1)
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_Affineize.htm">Affineize</a></td><td><div class="summary">
            Replaces the last row with (0 0 0 1), discarding any perspective part of this transform
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_ChangeBasis.htm">ChangeBasis(Plane, Plane)</a></td><td><div class="summary">
            Computes a change of basis transformation. A basis change is essentially a remapping 
            of geometry from one coordinate system to another.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_ChangeBasis_1.htm">ChangeBasis(Vector3d, Vector3d, Vector3d, Vector3d, Vector3d, Vector3d)</a></td><td><div class="summary">
            Computes a change of basis transformation. A basis change is essentially a remapping 
            of geometry from one coordinate system to another.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_Clone.htm">Clone</a></td><td><div class="summary">
            Returns a deep copy of the transform. For languages that treat structures as value types, this can 
            be accomplished by a simple assignment.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_CompareTo.htm">CompareTo</a></td><td><div class="summary">
            Compares this transform with another transform.
            <p>M33 has highest value, then M32, etc..</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_DecomposeAffine.htm">DecomposeAffine(Transform<span id="LSTBCEEA38A_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_0?cpp=%");</script>, Vector3d<span id="LSTBCEEA38A_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_1?cpp=%");</script>)</a></td><td><div class="summary">
            Decomposes an affine transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            An affine transformation can be broken into a linear transformation and a translation.
            Note, a perspective transformation is not affine.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_DecomposeAffine_1.htm">DecomposeAffine(Vector3d<span id="LSTBCEEA38A_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_2?cpp=%");</script>, Transform<span id="LSTBCEEA38A_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_3?cpp=%");</script>)</a></td><td><div class="summary">
            Decomposes an affine transformation.
            A transformation is affine if it is valid and its last row is [0, 0, 0, 1].
            An affine transformation can be broken into a linear transformation and a translation.
            Note, a perspective transformation is not affine.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_DecomposeAffine_2.htm">DecomposeAffine(Vector3d<span id="LSTBCEEA38A_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_4?cpp=%");</script>, Transform<span id="LSTBCEEA38A_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_5?cpp=%");</script>, Transform<span id="LSTBCEEA38A_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_6?cpp=%");</script>, Vector3d<span id="LSTBCEEA38A_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_7?cpp=%");</script>)</a></td><td><div class="summary">
            An affine transformation can be decomposed into a Symmetric, Rotation and Translation.
            Then the Symmetric component may be further decomposed as non-uniform scale in an orthonormal
            coordinate system.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_DecomposeRigid.htm">DecomposeRigid</a></td><td><div class="summary">
            Decomposes a rigid transformation. The transformation must be affine.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_DecomposeSimilarity.htm">DecomposeSimilarity</a></td><td><div class="summary">
            Decomposes a similarity transformation. The transformation must be affine.
            A similarity transformation can be broken into a sequence of a dilation, translation, rotation, and a reflection.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_DecomposeSymmetric.htm">DecomposeSymmetric</a></td><td><div class="summary">
            A Symmetric linear transformation can be decomposed A = Q * Diag * Q ^ T, where Diag is a diagonal
            transformation. Diag[i][i] is an eigenvalue of A and the i-th column of Q is a corresponding
            unit length eigenvector. Note, this transformation must be Linear and Symmetric.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Diagonal.htm">Diagonal(Vector3d)</a></td><td><div class="summary">
            Constructs a new transformation with diagonal (d0,d1,d2,1.0).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Diagonal_1.htm">Diagonal(Double, Double, Double)</a></td><td><div class="summary">
            Constructs a new transformation with diagonal (d0,d1,d2,1.0).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_Equals_1.htm">Equals(Object)</a></td><td><div class="summary">
            Determines if another object is a transform and its value equals this transform value.
            </div> (Overrides <a href="https://docs.microsoft.com/dotnet/api/system.valuetype.equals#System_ValueType_Equals_System_Object_" target="_blank">ValueType<span id="LSTBCEEA38A_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_8?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Equals(Object)</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_Equals.htm">Equals(Transform)</a></td><td><div class="summary">
            Determines if another transform equals this transform value.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_GetEulerZYZ.htm">GetEulerZYZ</a></td><td><div class="summary">
            Find the Euler angles for a rotation transformation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_GetHashCode.htm">GetHashCode</a></td><td><div class="summary">
            Gets a non-unique hashing code for this transform.
            </div> (Overrides <a href="https://docs.microsoft.com/dotnet/api/system.valuetype.gethashcode#System_ValueType_GetHashCode" target="_blank">ValueType<span id="LSTBCEEA38A_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_9?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>GetHashCode<span id="LSTBCEEA38A_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_10?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_GetQuaternion.htm">GetQuaternion</a></td><td><div class="summary">
            If this transform is a proper rotation, then find the eqivalent quaternion.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gettype#System_Object_GetType" target="_blank">GetType</a></td><td><div class="summary">Gets the <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank">Type</a> of the current instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_GetYawPitchRoll.htm">GetYawPitchRoll</a></td><td><div class="summary">
            Find the Tait-Byran angles (also loosely called Euler angles) for a rotation transformation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_IsRigid.htm">IsRigid</a></td><td><div class="summary">
            Gets a value indicating whether or not the Transform is rigid. 
            A rigid transformation can be broken into  a proper rotation and a translation,
            while an isometry transformation could also include a reflection.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_IsSimilarity.htm">IsSimilarity</a></td><td><div class="summary">
            Gets a value indicating whether or not the Transform maintains similarity. 
            A similarity transformation can be broken into a sequence of a dilation, translation, rotation, and a reflection.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_IsZeroTransformationWithTolerance.htm">IsZeroTransformationWithTolerance</a></td><td><div class="summary">
            True if all values are 0 within tolerance, except for M33 which is exactly 1.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_Linearize.htm">Linearize</a></td><td><div class="summary">
            Affinitize() and replaces the last column with (0 0 0 1)^T, discarding any translation part of this transform.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Mirror.htm">Mirror(Plane)</a></td><td><div class="summary">
            Constructs a new Mirror transformation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Mirror_1.htm">Mirror(Point3d, Vector3d)</a></td><td><div class="summary">
            Create mirror transformation matrix
            The mirror transform maps a point Q to 
            Q - (2*(Q-P)oN)*N, where
            P = pointOnMirrorPlane and N = normalToMirrorPlane.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Multiply.htm">Multiply</a></td><td><div class="summary">
            Multiplies (combines) two transformations.
            <p>This is the same as the * operator between two transformations.</p></div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_Orthogonalize.htm">Orthogonalize</a></td><td><div class="summary">
            Force the linear part of this transformation to be a rotation (or a rotation with reflection).
            Use DecomposeRigid(T,R) to find the nearest rotation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_PlanarProjection.htm">PlanarProjection</a></td><td><div class="summary">
            Constructs a projection transformation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_PlaneToPlane.htm">PlaneToPlane</a></td><td><div class="summary">
            Create a rotation transformation that orients plane0 to plane1. If you want to orient objects from
            one plane to another, use this form of transformation.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_ProjectAlong.htm">ProjectAlong</a></td><td><div class="summary">
            Construct a projection onto a plane along a specific direction.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Rotation_2.htm">Rotation(Double, Point3d)</a></td><td><div class="summary">
            Constructs a new rotation transformation with specified angle and rotation center. The axis of rotation is <a href="P_Rhino_Geometry_Vector3d_ZAxis.htm">ZAxis</a>.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Rotation_3.htm">Rotation(Double, Vector3d, Point3d)</a></td><td><div class="summary">
            Constructs a new rotation transformation with specified angle, rotation center and rotation axis.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Rotation.htm">Rotation(Vector3d, Vector3d, Point3d)</a></td><td><div class="summary">
            Constructs a new rotation transformation with start and end directions and rotation center.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Rotation_4.htm">Rotation(Double, Double, Vector3d, Point3d)</a></td><td><div class="summary">
            Constructs a new rotation transformation with specified angle, rotation center and rotation axis.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Rotation_1.htm">Rotation(Vector3d, Vector3d, Vector3d, Vector3d, Vector3d, Vector3d)</a></td><td><div class="summary">
            Constructs a transformation that maps X0 to X1, Y0 to Y1, Z0 to Z1.
            The frames should be right hand orthonormal frames (unit vectors with Z = X x Y).
            The resulting rotation fixes the origin (0,0,0), maps initial X to final X, 
            initial Y to final Y, and initial Z to final Z.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_RotationZYX.htm">RotationZYX</a></td><td><div class="summary">
            Create rotation transformation From Tait-Byran angles (also loosely known as Euler angles).
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_RotationZYZ.htm">RotationZYZ</a></td><td><div class="summary">
            Create rotation transformation From Euler angles.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Scale_1.htm">Scale(Point3d, Double)</a></td><td><div class="summary">
            Constructs a new uniform scaling transformation with a specified scaling anchor point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Scale.htm">Scale(Plane, Double, Double, Double)</a></td><td><div class="summary">
            Constructs a new non-uniform scaling transformation with a specified scaling anchor point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_Shear.htm">Shear</a></td><td><div class="summary">
            Constructs a Shear transformation.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_ToFloatArray.htm">ToFloatArray</a></td><td><div class="summary">
            Return the matrix as a linear array of 16 float values
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_ToString.htm">ToString</a></td><td><div class="summary">
            Returns a string representation of this transform.
            </div> (Overrides <a href="https://docs.microsoft.com/dotnet/api/system.valuetype.tostring#System_ValueType_ToString" target="_blank">ValueType<span id="LSTBCEEA38A_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_11?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ToString<span id="LSTBCEEA38A_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBCEEA38A_12?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_TransformBoundingBox.htm">TransformBoundingBox</a></td><td><div class="summary">
            Computes a new bounding box that is the smallest axis aligned
            bounding box that contains the transformed result of its 8 original corner
            points.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_TransformList.htm">TransformList</a></td><td><div class="summary">
            Given a list, an array or any enumerable set of points, computes a new array of transformed points.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Transform_Translation.htm">Translation(Vector3d)</a></td><td><div class="summary">
            Constructs a new translation (move) transformation. 
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/static.gif" alt="Static member" title="Static member" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_Rhino_Geometry_Transform_Translation_1.htm">Translation(Double, Double, Double)</a></td><td><div class="summary">
            Constructs a new translation (move) transformation. 
            Right column is (dx, dy, dz, 1.0).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_Transpose.htm">Transpose</a></td><td><div class="summary">
            Flip row/column values
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Rhino_Geometry_Transform_TryGetInverse.htm">TryGetInverse</a></td><td><div class="summary">
            Attempts to get the inverse transform of this transform.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Operators</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="operatorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/puboperator.gif" alt="Public operator" title="Public operator" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_op_Equality.htm">Equality</a></td><td><div class="summary">
            Determines if two transformations are equal in value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/puboperator.gif" alt="Public operator" title="Public operator" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_op_Inequality.htm">Inequality</a></td><td><div class="summary">
            Determines if two transformations are different in value.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/puboperator.gif" alt="Public operator" title="Public operator" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_op_Multiply.htm">Multiply(Transform, Point3d)</a></td><td><div class="summary">
            Multiplies a transformation by a point and gets a new point.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/puboperator.gif" alt="Public operator" title="Public operator" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_op_Multiply_1.htm">Multiply(Transform, Transform)</a></td><td><div class="summary">
            Multiplies (combines) two transformations.
            </div></td></tr><tr data="public;static;declared;notNetfw;"><td><img src="../icons/puboperator.gif" alt="Public operator" title="Public operator" /><img src="../icons/static.gif" alt="Static member" title="Static member" /></td><td><a href="M_Rhino_Geometry_Transform_op_Multiply_2.htm">Multiply(Transform, Vector3d)</a></td><td><div class="summary">
            Multiplies a transformation by a vector and gets a new vector.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>