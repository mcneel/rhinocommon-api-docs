<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Mesh.CreateFromBrep Method (Brep)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="M:Rhino.Geometry.Mesh.CreateFromBrep(Rhino.Geometry.Brep)" /><meta name="Description" content="Constructs a mesh from a brep." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Rhino.Geometry" /><meta name="file" content="M_Rhino_Geometry_Mesh_CreateFromBrep" /><meta name="guid" content="M_Rhino_Geometry_Mesh_CreateFromBrep" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">RhinoCommon API<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="RhinoCommon API" tocid="roottoc">RhinoCommon API</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_RhinoCommon.htm" title="Namespaces" tocid="R_Project_RhinoCommon">Namespaces</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_Rhino_Geometry.htm" title="Rhino.Geometry" tocid="N_Rhino_Geometry">Rhino.Geometry</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_Rhino_Geometry_Mesh.htm" title="Mesh Class" tocid="T_Rhino_Geometry_Mesh">Mesh Class</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_Rhino_Geometry_Mesh.htm" title="Mesh Methods" tocid="Methods_T_Rhino_Geometry_Mesh">Mesh Methods</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_Rhino_Geometry_Mesh_CreateFromBrep.htm" title="CreateFromBrep Method " tocid="Overload_Rhino_Geometry_Mesh_CreateFromBrep">CreateFromBrep Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Mesh_CreateFromBrep.htm" title="CreateFromBrep Method (Brep)" tocid="M_Rhino_Geometry_Mesh_CreateFromBrep">CreateFromBrep Method (Brep)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_Rhino_Geometry_Mesh_CreateFromBrep_1.htm" title="CreateFromBrep Method (Brep, MeshingParameters)" tocid="M_Rhino_Geometry_Mesh_CreateFromBrep_1">CreateFromBrep Method (Brep, MeshingParameters)</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Mesh<span id="LSTBC132C92_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBC132C92_0?cpp=::|nu=.");</script>CreateFromBrep Method (Brep)</h1></td></tr></table><span class="introStyle"></span> <p><strong>Note: This API is now obsolete.</strong></p><div class="summary">
            Constructs a mesh from a brep.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Rhino_Geometry.htm">Rhino.Geometry</a><br />
    <strong>Assembly:</strong>
   RhinoCommon (in RhinoCommon.dll)<div class="since"><strong>Since:</strong> 5.0</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','cs','1','2');return false;">C#</a></div><div id="ID0EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">ObsoleteAttribute</span>("Use version that takes MeshingParameters as input")]
<span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Mesh</span>[] <span class="identifier">CreateFromBrep</span>(
	<span class="identifier">Brep</span> <span class="parameter">brep</span>
)</pre></div><div id="ID0EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">ObsoleteAttribute</span>("Use version that takes MeshingParameters as input")&gt;
<span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Function</span> <span class="identifier">CreateFromBrep</span> ( 
	<span class="parameter">brep</span> <span class="keyword">As</span> <span class="identifier">Brep</span>
) <span class="keyword">As</span> <span class="identifier">Mesh</span>()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBCA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">brep</span></dt><dd>Type: <a href="T_Rhino_Geometry_Brep.htm">Rhino.Geometry<span id="LSTBC132C92_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBC132C92_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Brep</a><br />Brep to approximate.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <span id="LSTBC132C92_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBC132C92_2?cpp=array&lt;");</script><a href="T_Rhino_Geometry_Mesh.htm">Mesh</a><span id="LSTBC132C92_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBC132C92_3?cpp=&gt;|vb=()|nu=[]");</script><br />An array of meshes.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EBBCBA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','cs','1','2');return false;">C#</a></div><div id="ID0EBBCBA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EBBCBA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBBCBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EBBCBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EBBCBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Rhino;
<span class="highlight-keyword">using</span> Rhino.Commands;
<span class="highlight-keyword">using</span> System.Linq;
<span class="highlight-keyword">using</span> Rhino.Geometry;
<span class="highlight-keyword">using</span> Rhino.Input;
<span class="highlight-keyword">using</span> Rhino.DocObjects;
<span class="highlight-keyword">using</span> System.Collections.Generic;

<span class="highlight-keyword">namespace</span> examples_cs
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> TightBoundingBoxCommand : Command
  {
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> EnglishName { <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> <span class="highlight-literal">"csTightBoundingBox"</span>; } }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> Result RunCommand(RhinoDoc doc, RunMode mode)
    {
      ObjRef obj_ref;
      <span class="highlight-keyword">var</span> rc = RhinoGet.GetOneObject(
        <span class="highlight-literal">"Select surface to split"</span>, <span class="highlight-keyword">true</span>, ObjectType.Surface, <span class="highlight-keyword">out</span> obj_ref);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">var</span> surface = obj_ref.Surface();
      <span class="highlight-keyword">if</span> (surface == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      obj_ref = <span class="highlight-keyword">null</span>;
      rc = RhinoGet.GetOneObject(
        <span class="highlight-literal">"Select cutting curve"</span>, <span class="highlight-keyword">true</span>, ObjectType.Curve, <span class="highlight-keyword">out</span> obj_ref);
      <span class="highlight-keyword">if</span> (rc != Result.Success)
        <span class="highlight-keyword">return</span> rc;
      <span class="highlight-keyword">var</span> curve = obj_ref.Curve();
      <span class="highlight-keyword">if</span> (curve == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-keyword">var</span> brep_face = surface <span class="highlight-keyword">as</span> BrepFace;
      <span class="highlight-keyword">if</span> (brep_face == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span> Result.Failure;

      <span class="highlight-keyword">var</span> split_brep = brep_face.Split(
        <span class="highlight-keyword">new</span> List&lt;Curve&gt; {curve}, doc.ModelAbsoluteTolerance);
      <span class="highlight-keyword">if</span> (split_brep == <span class="highlight-keyword">null</span>)
      {
        RhinoApp.WriteLine(<span class="highlight-literal">"Unable to split surface."</span>);
        <span class="highlight-keyword">return</span> Result.Nothing;
      }

      <span class="highlight-keyword">var</span> meshes = Mesh.CreateFromBrep(split_brep);

      <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> mesh <span class="highlight-keyword">in</span> meshes)
      {
        <span class="highlight-keyword">var</span> bbox = mesh.GetBoundingBox(<span class="highlight-keyword">true</span>);
        <span class="highlight-keyword">switch</span> (bbox.IsDegenerate(doc.ModelAbsoluteTolerance))
        {
          <span class="highlight-keyword">case</span> <span class="highlight-number">3</span>:
          <span class="highlight-keyword">case</span> <span class="highlight-number">2</span>:
            <span class="highlight-keyword">return</span> Result.Failure;
          <span class="highlight-keyword">case</span> <span class="highlight-number">1</span>:
            <span class="highlight-comment">// rectangle</span>
            <span class="highlight-comment">// box with 8 corners flattened to rectangle with 4 corners</span>
            <span class="highlight-keyword">var</span> rectangle_corners = bbox.GetCorners().Distinct().ToList();
            <span class="highlight-comment">// add 1st point as last to close the loop</span>
            rectangle_corners.Add(rectangle_corners[<span class="highlight-number">0</span>]);
            doc.Objects.AddPolyline(rectangle_corners);
            doc.Views.Redraw();
            <span class="highlight-keyword">break</span>;
          <span class="highlight-keyword">case</span> <span class="highlight-number">0</span>: 
            <span class="highlight-comment">// box</span>
            <span class="highlight-keyword">var</span> brep_box = <span class="highlight-keyword">new</span> Box(bbox).ToBrep();
            doc.Objects.AddBrep(brep_box);
            doc.Views.Redraw();
            <span class="highlight-keyword">break</span>;
        }
      }

      <span class="highlight-keyword">return</span> Result.Success;
    }
  }
}</pre></div><div id="ID0EBBCBA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Imports</span> Rhino
<span class="highlight-keyword">Imports</span> Rhino.Commands
<span class="highlight-keyword">Imports</span> System.Linq
<span class="highlight-keyword">Imports</span> Rhino.Geometry
<span class="highlight-keyword">Imports</span> Rhino.Input
<span class="highlight-keyword">Imports</span> Rhino.DocObjects
<span class="highlight-keyword">Imports</span> System.Collections.Generic

<span class="highlight-keyword">Namespace</span> examples_vb
  <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> TightBoundingBoxCommand
    <span class="highlight-keyword">Inherits</span> Command
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">ReadOnly</span> <span class="highlight-keyword">Property</span> EnglishName() <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>
      <span class="highlight-keyword">Get</span>
        <span class="highlight-keyword">Return</span> <span class="highlight-literal">"vbTightBoundingBox"</span>
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">Get</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Property</span>

    <span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> RunCommand(doc <span class="highlight-keyword">As</span> RhinoDoc, mode <span class="highlight-keyword">As</span> RunMode) <span class="highlight-keyword">As</span> Result
      <span class="highlight-keyword">Dim</span> obj_ref <span class="highlight-keyword">As</span> ObjRef = <span class="highlight-keyword">Nothing</span>
      <span class="highlight-keyword">Dim</span> rc = RhinoGet.GetOneObject(<span class="highlight-literal">"Select surface to split"</span>, <span class="highlight-keyword">True</span>, ObjectType.Surface, obj_ref)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> surface = obj_ref.Surface()
      <span class="highlight-keyword">If</span> surface <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      obj_ref = <span class="highlight-keyword">Nothing</span>
      rc = RhinoGet.GetOneObject(<span class="highlight-literal">"Select cutting curve"</span>, <span class="highlight-keyword">True</span>, ObjectType.Curve, obj_ref)
      <span class="highlight-keyword">If</span> rc &lt;&gt; Result.Success <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> rc
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
      <span class="highlight-keyword">Dim</span> curve = obj_ref.Curve()
      <span class="highlight-keyword">If</span> curve <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> brep_face = <span class="highlight-keyword">TryCast</span>(surface, BrepFace)
      <span class="highlight-keyword">If</span> brep_face <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Return</span> Result.Failure
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> split_brep = brep_face.Split(<span class="highlight-keyword">New</span> List(<span class="highlight-keyword">Of</span> Curve)() From { _
        curve _
      }, doc.ModelAbsoluteTolerance)
      <span class="highlight-keyword">If</span> split_brep <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
        RhinoApp.WriteLine(<span class="highlight-literal">"Unable to split surface."</span>)
        <span class="highlight-keyword">Return</span> Result.[<span class="highlight-keyword">Nothing</span>]
      <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

      <span class="highlight-keyword">Dim</span> meshes = Mesh.CreateFromBrep(split_brep)

      <span class="highlight-keyword">For</span> <span class="highlight-keyword">Each</span> mesh__1 <span class="highlight-keyword">As</span> Mesh <span class="highlight-keyword">In</span> meshes
        <span class="highlight-keyword">Dim</span> bbox = mesh__1.GetBoundingBox(<span class="highlight-keyword">True</span>)
        <span class="highlight-keyword">Select</span> <span class="highlight-keyword">Case</span> bbox.IsDegenerate(doc.ModelAbsoluteTolerance)
          <span class="highlight-keyword">Case</span> <span class="highlight-number">3</span>, <span class="highlight-number">2</span>
            <span class="highlight-keyword">Return</span> Result.Failure
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
          <span class="highlight-keyword">Case</span> <span class="highlight-number">1</span>
            <span class="highlight-comment">' rectangle</span>
            <span class="highlight-comment">' box with 8 corners flattened to rectangle with 4 corners</span>
            <span class="highlight-keyword">Dim</span> rectangle_corners = bbox.GetCorners().Distinct().ToList()
            <span class="highlight-comment">' add 1st point as last to close the loop</span>
            rectangle_corners.Add(rectangle_corners(<span class="highlight-number">0</span>))
            doc.Objects.AddPolyline(rectangle_corners)
            doc.Views.Redraw()
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
          <span class="highlight-keyword">Case</span> <span class="highlight-number">0</span>
            <span class="highlight-comment">' box</span>
            <span class="highlight-keyword">Dim</span> brep_box = <span class="highlight-keyword">New</span> Box(bbox).ToBrep()
            doc.Objects.AddBrep(brep_box)
            doc.Views.Redraw()
            <span class="highlight-keyword">Exit</span> <span class="highlight-keyword">Select</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Select</span>
      <span class="highlight-keyword">Next</span>

      <span class="highlight-keyword">Return</span> Result.Success
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span>
  <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EBBCBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAACBA_tab1" class="codeSnippetContainerTabSingle">Python</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAACBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">from</span> scriptcontext <span class="highlight-keyword">import</span> doc
<span class="highlight-keyword">import</span> rhinoscriptsyntax <span class="highlight-keyword">as</span> rs
<span class="highlight-keyword">from</span> Rhino.Geometry <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Input <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.DocObjects <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> Rhino.Commands <span class="highlight-keyword">import</span> *
<span class="highlight-keyword">from</span> System.Collections.Generic <span class="highlight-keyword">import</span> *

<span class="highlight-keyword">def</span> RunCommand():
  rc, obj_ref = RhinoGet.GetOneObject(
    <span class="highlight-literal">"Select surface to split"</span>, True, ObjectType.Surface)
  <span class="highlight-keyword">if</span> rc != Result.Success:
    <span class="highlight-keyword">return</span> rc
  brep_face = obj_ref.Surface()
  <span class="highlight-keyword">if</span> brep_face == None:
    <span class="highlight-keyword">return</span> Result.Failure

  rc, obj_ref = RhinoGet.GetOneObject(
    <span class="highlight-literal">"Select cutting curve"</span>, True, ObjectType.Curve)
  <span class="highlight-keyword">if</span> rc != Result.Success:
    <span class="highlight-keyword">return</span> rc
  curve = obj_ref.Curve()
  <span class="highlight-keyword">if</span> curve == None:
    <span class="highlight-keyword">return</span> Result.Failure

  curves = List[Curve]([curve])
  split_brep = brep_face.Split(
    curves, doc.ModelAbsoluteTolerance)

  <span class="highlight-keyword">if</span> split_brep == None:
    RhinoApp.WriteLine(<span class="highlight-literal">"Unable to split surface."</span>)
    <span class="highlight-keyword">return</span> Result.Nothing

  meshes = Mesh.CreateFromBrep(split_brep)
  <span class="highlight-keyword">print</span> type(meshes)
  <span class="highlight-keyword">for</span> mesh <span class="highlight-keyword">in</span> meshes:
    bbox = mesh.GetBoundingBox(True)
    bbox_type = bbox.IsDegenerate(doc.ModelAbsoluteTolerance)
    <span class="highlight-keyword">if</span> bbox_type == <span class="highlight-number">1</span>: <span class="highlight-comment"># rectangle</span>
        <span class="highlight-comment"># box with 8 corners flattened to rectangle with 4 corners</span>
        box_corners = bbox.GetCorners()
        rectangle_corners = []
        <span class="highlight-keyword">for</span> corner_point <span class="highlight-keyword">in</span> box_corners:
          <span class="highlight-keyword">if</span> corner_point <span class="highlight-keyword">not</span> <span class="highlight-keyword">in</span> rectangle_corners:
              rectangle_corners.append(corner_point)
        <span class="highlight-comment"># add 1st point as last to close the loop</span>
        rectangle_corners.append(rectangle_corners[<span class="highlight-number">0</span>])
        doc.Objects.AddPolyline(rectangle_corners)
        doc.Views.Redraw()
    <span class="highlight-keyword">elif</span> bbox_type == <span class="highlight-number">0</span>: <span class="highlight-comment"># box</span>
        brep_box = Box(bbox).ToBrep()
        doc.Objects.AddBrep(brep_box)
        doc.Views.Redraw()
    <span class="highlight-keyword">else</span>: <span class="highlight-comment"># bbox invalid, point, or line</span>
      <span class="highlight-keyword">return</span> Result.Failure

  <span class="highlight-keyword">return</span> Result.Success

<span class="highlight-keyword">if</span> __name__ == <span class="highlight-literal">"__main__"</span>:
  RunCommand()</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_Rhino_Geometry_Mesh.htm">Mesh Class</a></div><div class="seeAlsoStyle"><a href="Overload_Rhino_Geometry_Mesh_CreateFromBrep.htm">CreateFromBrep Overload</a></div><div class="seeAlsoStyle"><a href="N_Rhino_Geometry.htm">Rhino.Geometry Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Rhino 7.18.22124.03000 (Last updated: 5/10/2022)<br />Copyright © 2009-2022 Robert McNeel &amp; Associates<p><a href="https://discourse.mcneel.com/c/rhino-developer" target="_blank">Report wishes and bugs at discourse.mcneel.com</a></p> </div></body></html>